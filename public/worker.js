// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 30688, "");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var invoke_ii = env.invoke_ii;
 var emscripten_longjmp = env.emscripten_longjmp;
 var setTempRet0 = env.setTempRet0;
 var getTempRet0 = env.getTempRet0;
 var invoke_iii = env.invoke_iii;
 var invoke_vii = env.invoke_vii;
 var invoke_vi = env.invoke_vi;
 var invoke_v = env.invoke_v;
 var invoke_i = env.invoke_i;
 var invoke_viii = env.invoke_viii;
 var invoke_iiiiii = env.invoke_iiiiii;
 var signal = env.signal;
 var exit = env.exit;
 var __syscall5 = env.__sys_open;
 var __syscall142 = env.__sys__newselect;
 var __syscall54 = env.__sys_ioctl;
 var __wasi_fd_write = env.fd_write;
 var __wasi_fd_read = env.fd_read;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_fdstat_get = env.fd_fdstat_get;
 var __syscall221 = env.__sys_fcntl64;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var __stack_pointer = 5331248;
 var __stack_end = 0;
 var __stack_base = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
  __emscripten_environ_constructor();
 }
 
 function js_spim_main() {
  var $2 = 0, $4 = 0, $3 = 0, $7 = 0, $6 = 0, $1 = 0, $0 = 0, $5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0 = __stack_pointer - 64 | 0;
  __stack_pointer = $0;
  $1 = dlmalloc(40 | 0) | 0;
  HEAP32[$1 >> 2] = 0;
  $2 = HEAP32[(0 + 28200 | 0) >> 2] | 0;
  HEAP32[(0 + 50440 | 0) >> 2] = $2;
  HEAP32[(0 + 50436 | 0) >> 2] = $2;
  HEAP8[(0 + 50431 | 0) >> 0] = 1;
  HEAP8[(0 + 50428 | 0) >> 0] = 0;
  HEAP8[(0 + 50429 | 0) >> 0] = 0;
  HEAP8[(0 + 50430 | 0) >> 0] = 0;
  HEAP8[(0 + 50432 | 0) >> 0] = 0;
  HEAP8[(0 + 50433 | 0) >> 0] = 0;
  HEAP32[(0 + 50452 | 0) >> 2] = 0;
  HEAP32[(0 + 50444 | 0) >> 2] = 0;
  HEAP8[(0 + 50448 | 0) >> 0] = 0;
  HEAP32[(0 + 87856 | 0) >> 2] = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 1076 | 0) >> 2] | 0;
  HEAP32[($0 + 56 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 1072 | 0) >> 2] | 0;
  HEAP32[($0 + 60 | 0) >> 2] = i64toi32_i32$1;
  $3 = invoke_ii(1 | 0, 1080 | 0) | 0;
  $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
  HEAP32[(0 + 87856 | 0) >> 2] = 0;
  $4 = -1;
  $5 = 4;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
   if (!$6) {
    break label$1
   }
   label$2 : {
    $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
    if ($4) {
     break label$2
    }
    emscripten_longjmp($2 | 0, $6 | 0);
    abort();
   }
   setTempRet0($6 | 0);
  }
  $2 = getTempRet0() | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (($4 | 0) == (1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!$3) {
       break label$6
      }
      HEAP32[(0 + 30688 | 0) >> 2] = $3;
     }
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     $6 = HEAP32[($0 + 60 | 0) >> 2] | 0;
     $3 = invoke_iii(2 | 0, $6 | 0, 1103 | 0) | 0;
     $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     $4 = -1;
     label$7 : {
      if (!$2) {
       break label$7
      }
      $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
      if (!$7) {
       break label$7
      }
      label$8 : {
       $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
       if ($4) {
        break label$8
       }
       emscripten_longjmp($2 | 0, $7 | 0);
       abort();
      }
      setTempRet0($7 | 0);
     }
     $2 = getTempRet0() | 0;
     if (($4 | 0) == (1 | 0)) {
      break label$5
     }
     label$9 : {
      label$10 : {
       label$11 : {
        if (!$3) {
         break label$11
        }
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $3 = invoke_iii(2 | 0, $6 | 0, 1108 | 0) | 0;
        $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $4 = -1;
        label$12 : {
         if (!$2) {
          break label$12
         }
         $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
         if (!$7) {
          break label$12
         }
         label$13 : {
          $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
          if ($4) {
           break label$13
          }
          emscripten_longjmp($2 | 0, $7 | 0);
          abort();
         }
         setTempRet0($7 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        if ($3) {
         break label$10
        }
       }
       $3 = 0;
       HEAP8[(0 + 50429 | 0) >> 0] = 0;
       HEAP8[(0 + 50428 | 0) >> 0] = 0;
       HEAP8[(0 + 50430 | 0) >> 0] = 0;
       $4 = 1;
       break label$9;
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $3 = invoke_iii(2 | 0, $6 | 0, 1111 | 0) | 0;
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$14 : {
       if (!$2) {
        break label$14
       }
       $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$7) {
        break label$14
       }
       label$15 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
        if ($4) {
         break label$15
        }
        emscripten_longjmp($2 | 0, $7 | 0);
        abort();
       }
       setTempRet0($7 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       break label$5
      }
      label$16 : {
       label$17 : {
        if (!$3) {
         break label$17
        }
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $3 = invoke_iii(2 | 0, $6 | 0, 1117 | 0) | 0;
        $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $4 = -1;
        label$18 : {
         if (!$2) {
          break label$18
         }
         $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
         if (!$7) {
          break label$18
         }
         label$19 : {
          $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
          if ($4) {
           break label$19
          }
          emscripten_longjmp($2 | 0, $7 | 0);
          abort();
         }
         setTempRet0($7 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        if ($3) {
         break label$16
        }
       }
       $4 = 1;
       $3 = 0;
       HEAP8[(0 + 50429 | 0) >> 0] = 1;
       HEAP8[(0 + 50428 | 0) >> 0] = 1;
       HEAP8[(0 + 50430 | 0) >> 0] = 1;
       HEAP8[(0 + 50432 | 0) >> 0] = 1;
       break label$9;
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $3 = invoke_iii(2 | 0, $6 | 0, 1120 | 0) | 0;
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$20 : {
       if (!$2) {
        break label$20
       }
       $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$7) {
        break label$20
       }
       label$21 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
        if ($4) {
         break label$21
        }
        emscripten_longjmp($2 | 0, $7 | 0);
        abort();
       }
       setTempRet0($7 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       break label$5
      }
      label$22 : {
       label$23 : {
        if (!$3) {
         break label$23
        }
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $3 = invoke_iii(2 | 0, $6 | 0, 1138 | 0) | 0;
        $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $4 = -1;
        label$24 : {
         if (!$2) {
          break label$24
         }
         $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
         if (!$7) {
          break label$24
         }
         label$25 : {
          $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
          if ($4) {
           break label$25
          }
          emscripten_longjmp($2 | 0, $7 | 0);
          abort();
         }
         setTempRet0($7 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        if ($3) {
         break label$22
        }
       }
       $4 = 1;
       $3 = 0;
       HEAP8[(0 + 50429 | 0) >> 0] = 1;
       break label$9;
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $3 = invoke_iii(2 | 0, $6 | 0, 1142 | 0) | 0;
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$26 : {
       if (!$2) {
        break label$26
       }
       $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$7) {
        break label$26
       }
       label$27 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
        if ($4) {
         break label$27
        }
        emscripten_longjmp($2 | 0, $7 | 0);
        abort();
       }
       setTempRet0($7 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       break label$5
      }
      label$28 : {
       label$29 : {
        if (!$3) {
         break label$29
        }
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $3 = invoke_iii(2 | 0, $6 | 0, 1157 | 0) | 0;
        $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $4 = -1;
        label$30 : {
         if (!$2) {
          break label$30
         }
         $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
         if (!$7) {
          break label$30
         }
         label$31 : {
          $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
          if ($4) {
           break label$31
          }
          emscripten_longjmp($2 | 0, $7 | 0);
          abort();
         }
         setTempRet0($7 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        if ($3) {
         break label$28
        }
       }
       $4 = 1;
       $3 = 0;
       HEAP8[(0 + 50430 | 0) >> 0] = 1;
       break label$9;
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $3 = invoke_iii(2 | 0, $6 | 0, 1161 | 0) | 0;
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$32 : {
       if (!$2) {
        break label$32
       }
       $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$7) {
        break label$32
       }
       label$33 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
        if ($4) {
         break label$33
        }
        emscripten_longjmp($2 | 0, $7 | 0);
        abort();
       }
       setTempRet0($7 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       break label$5
      }
      label$34 : {
       label$35 : {
        if (!$3) {
         break label$35
        }
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $3 = invoke_iii(2 | 0, $6 | 0, 1172 | 0) | 0;
        $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $4 = -1;
        label$36 : {
         if (!$2) {
          break label$36
         }
         $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
         if (!$7) {
          break label$36
         }
         label$37 : {
          $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
          if ($4) {
           break label$37
          }
          emscripten_longjmp($2 | 0, $7 | 0);
          abort();
         }
         setTempRet0($7 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        if (!$3) {
         break label$35
        }
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $3 = invoke_iii(2 | 0, $6 | 0, 1058 | 0) | 0;
        $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $4 = -1;
        label$38 : {
         if (!$2) {
          break label$38
         }
         $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
         if (!$7) {
          break label$38
         }
         label$39 : {
          $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
          if ($4) {
           break label$39
          }
          emscripten_longjmp($2 | 0, $7 | 0);
          abort();
         }
         setTempRet0($7 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        label$40 : {
         if (!$3) {
          break label$40
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1175 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$41 : {
          if (!$2) {
           break label$41
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$41
          }
          label$42 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$42
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         if (!$3) {
          break label$40
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1179 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$43 : {
          if (!$2) {
           break label$43
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$43
          }
          label$44 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$44
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$45 : {
          label$46 : {
           if (!$3) {
            break label$46
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1195 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$47 : {
            if (!$2) {
             break label$47
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$47
            }
            label$48 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$48
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$45
           }
          }
          $3 = 0;
          HEAP32[(0 + 30688 | 0) >> 2] = HEAP32[($0 + 64 | 0) >> 2] | 0;
          break label$34;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1199 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$49 : {
          if (!$2) {
           break label$49
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$49
          }
          label$50 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$50
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$51 : {
          label$52 : {
           if (!$3) {
            break label$52
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1210 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$53 : {
            if (!$2) {
             break label$53
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$53
            }
            label$54 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$54
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$51
           }
          }
          $4 = 1;
          $3 = 0;
          HEAP8[(0 + 50448 | 0) >> 0] = 1;
          break label$9;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1215 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$55 : {
          if (!$2) {
           break label$55
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$55
          }
          label$56 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$56
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$57 : {
          label$58 : {
           if (!$3) {
            break label$58
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1228 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$59 : {
            if (!$2) {
             break label$59
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$59
            }
            label$60 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$60
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$57
           }
          }
          $3 = 0;
          HEAP8[(0 + 50448 | 0) >> 0] = 0;
          $4 = 1;
          break label$9;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1234 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$61 : {
          if (!$2) {
           break label$61
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$61
          }
          label$62 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$62
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$63 : {
          label$64 : {
           if (!$3) {
            break label$64
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1242 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$65 : {
            if (!$2) {
             break label$65
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$65
            }
            label$66 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$66
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$63
           }
          }
          $4 = 1;
          $3 = 0;
          HEAP8[(0 + 50431 | 0) >> 0] = 1;
          break label$9;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1245 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$67 : {
          if (!$2) {
           break label$67
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$67
          }
          label$68 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$68
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$69 : {
          label$70 : {
           if (!$3) {
            break label$70
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1255 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$71 : {
            if (!$2) {
             break label$71
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$71
            }
            label$72 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$72
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$69
           }
          }
          $3 = 0;
          HEAP8[(0 + 50431 | 0) >> 0] = 0;
          $4 = 1;
          break label$9;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1259 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$73 : {
          if (!$2) {
           break label$73
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$73
          }
          label$74 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$74
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$75 : {
          label$76 : {
           if (!$3) {
            break label$76
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1266 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$77 : {
            if (!$2) {
             break label$77
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$77
            }
            label$78 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$78
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$75
           }
          }
          $4 = 1;
          $3 = 0;
          HEAP8[(0 + 50432 | 0) >> 0] = 1;
          break label$9;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1269 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$79 : {
          if (!$2) {
           break label$79
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$79
          }
          label$80 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$80
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$81 : {
          label$82 : {
           if (!$3) {
            break label$82
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1278 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$83 : {
            if (!$2) {
             break label$83
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$83
            }
            label$84 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$84
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$81
           }
          }
          $3 = 0;
          HEAP8[(0 + 50432 | 0) >> 0] = 0;
          $4 = 1;
          break label$9;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1282 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$85 : {
          if (!$2) {
           break label$85
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$85
          }
          label$86 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$86
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         if (!$3) {
          break label$35
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1288 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$87 : {
          if (!$2) {
           break label$87
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$87
          }
          label$88 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$88
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         if (!$3) {
          break label$35
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1291 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$89 : {
          if (!$2) {
           break label$89
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$89
          }
          label$90 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$90
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         if (!$3) {
          break label$40
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1299 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$91 : {
          if (!$2) {
           break label$91
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$91
          }
          label$92 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$92
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         if (!$3) {
          break label$40
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1303 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$93 : {
          if (!$2) {
           break label$93
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$93
          }
          label$94 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$94
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$95 : {
          label$96 : {
           if (!$3) {
            break label$96
           }
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $3 = invoke_iii(2 | 0, $6 | 0, 1314 | 0) | 0;
           $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
           HEAP32[(0 + 87856 | 0) >> 2] = 0;
           $4 = -1;
           label$97 : {
            if (!$2) {
             break label$97
            }
            $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
            if (!$7) {
             break label$97
            }
            label$98 : {
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$98
             }
             emscripten_longjmp($2 | 0, $7 | 0);
             abort();
            }
            setTempRet0($7 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) == (1 | 0)) {
            break label$5
           }
           if ($3) {
            break label$95
           }
          }
          $3 = 0;
          HEAP32[(0 + 30688 | 0) >> 2] = HEAP32[($0 + 64 | 0) >> 2] | 0;
          break label$34;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_iii(2 | 0, $6 | 0, 1318 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$99 : {
          if (!$2) {
           break label$99
          }
          $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$7) {
           break label$99
          }
          label$100 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$100
           }
           emscripten_longjmp($2 | 0, $7 | 0);
           abort();
          }
          setTempRet0($7 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$101 : {
          label$102 : {
           label$103 : {
            label$104 : {
             label$105 : {
              label$106 : {
               label$107 : {
                label$108 : {
                 if (!$3) {
                  break label$108
                 }
                 HEAP32[(0 + 87856 | 0) >> 2] = 0;
                 $3 = invoke_iii(2 | 0, $6 | 0, 1325 | 0) | 0;
                 $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                 HEAP32[(0 + 87856 | 0) >> 2] = 0;
                 $4 = -1;
                 label$109 : {
                  if (!$2) {
                   break label$109
                  }
                  $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                  if (!$7) {
                   break label$109
                  }
                  label$110 : {
                   $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                   if ($4) {
                    break label$110
                   }
                   emscripten_longjmp($2 | 0, $7 | 0);
                   abort();
                  }
                  setTempRet0($7 | 0);
                 }
                 $2 = getTempRet0() | 0;
                 if (($4 | 0) == (1 | 0)) {
                  break label$5
                 }
                 if ($3) {
                  break label$107
                 }
                }
                HEAP32[(0 + 87856 | 0) >> 2] = 0;
                $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
                $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                HEAP32[(0 + 87856 | 0) >> 2] = 0;
                $3 = -1;
                if (!$2) {
                 break label$105
                }
                $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$4) {
                 break label$105
                }
                $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                if ($3) {
                 break label$106
                }
                emscripten_longjmp($2 | 0, $4 | 0);
                abort();
               }
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $7 = invoke_iii(2 | 0, $6 | 0, 1329 | 0) | 0;
               $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $4 = -1;
               if (!$2) {
                break label$103
               }
               $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
               if (!$3) {
                break label$103
               }
               $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
               if ($4) {
                break label$104
               }
               emscripten_longjmp($2 | 0, $3 | 0);
               abort();
              }
              setTempRet0($4 | 0);
             }
             $4 = 1;
             $2 = getTempRet0() | 0;
             if (($3 | 0) != (1 | 0)) {
              break label$102
             }
             break label$5;
            }
            setTempRet0($3 | 0);
           }
           $2 = getTempRet0() | 0;
           if (($4 | 0) != (1 | 0)) {
            break label$101
           }
           break label$5;
          }
          $3 = 0;
          HEAP32[(0 + 30696 | 0) >> 2] = $6;
          break label$9;
         }
         label$111 : {
          label$112 : {
           label$113 : {
            label$114 : {
             label$115 : {
              label$116 : {
               if (!$7) {
                break label$116
               }
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $7 = invoke_iii(2 | 0, $6 | 0, 1336 | 0) | 0;
               $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $4 = -1;
               label$117 : {
                if (!$2) {
                 break label$117
                }
                $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$3) {
                 break label$117
                }
                label$118 : {
                 $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($4) {
                  break label$118
                 }
                 emscripten_longjmp($2 | 0, $3 | 0);
                 abort();
                }
                setTempRet0($3 | 0);
               }
               $2 = getTempRet0() | 0;
               if (($4 | 0) == (1 | 0)) {
                break label$5
               }
               if ($7) {
                break label$115
               }
              }
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
              $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $3 = -1;
              if (!$2) {
               break label$113
              }
              $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
              if (!$4) {
               break label$113
              }
              $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
              if ($3) {
               break label$114
              }
              emscripten_longjmp($2 | 0, $4 | 0);
              abort();
             }
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $7 = invoke_iii(2 | 0, $6 | 0, 1340 | 0) | 0;
             $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $4 = -1;
             if (!$2) {
              break label$111
             }
             $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
             if (!$3) {
              break label$111
             }
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$112
             }
             emscripten_longjmp($2 | 0, $3 | 0);
             abort();
            }
            setTempRet0($4 | 0);
           }
           $4 = 1;
           $2 = getTempRet0() | 0;
           if (($3 | 0) == (1 | 0)) {
            break label$5
           }
           $3 = 0;
           HEAP32[(0 + 30700 | 0) >> 2] = $6;
           break label$9;
          }
          setTempRet0($3 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$119 : {
          label$120 : {
           label$121 : {
            label$122 : {
             label$123 : {
              label$124 : {
               if (!$7) {
                break label$124
               }
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $7 = invoke_iii(2 | 0, $6 | 0, 1347 | 0) | 0;
               $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $4 = -1;
               label$125 : {
                if (!$2) {
                 break label$125
                }
                $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$3) {
                 break label$125
                }
                label$126 : {
                 $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($4) {
                  break label$126
                 }
                 emscripten_longjmp($2 | 0, $3 | 0);
                 abort();
                }
                setTempRet0($3 | 0);
               }
               $2 = getTempRet0() | 0;
               if (($4 | 0) == (1 | 0)) {
                break label$5
               }
               if ($7) {
                break label$123
               }
              }
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
              $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $3 = -1;
              if (!$2) {
               break label$121
              }
              $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
              if (!$4) {
               break label$121
              }
              $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
              if ($3) {
               break label$122
              }
              emscripten_longjmp($2 | 0, $4 | 0);
              abort();
             }
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $7 = invoke_iii(2 | 0, $6 | 0, 1351 | 0) | 0;
             $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $4 = -1;
             if (!$2) {
              break label$119
             }
             $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
             if (!$3) {
              break label$119
             }
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$120
             }
             emscripten_longjmp($2 | 0, $3 | 0);
             abort();
            }
            setTempRet0($4 | 0);
           }
           $4 = 1;
           $2 = getTempRet0() | 0;
           if (($3 | 0) == (1 | 0)) {
            break label$5
           }
           $3 = 0;
           HEAP32[(0 + 30704 | 0) >> 2] = $6;
           break label$9;
          }
          setTempRet0($3 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$127 : {
          label$128 : {
           label$129 : {
            label$130 : {
             label$131 : {
              label$132 : {
               if (!$7) {
                break label$132
               }
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $7 = invoke_iii(2 | 0, $6 | 0, 1359 | 0) | 0;
               $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $4 = -1;
               label$133 : {
                if (!$2) {
                 break label$133
                }
                $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$3) {
                 break label$133
                }
                label$134 : {
                 $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($4) {
                  break label$134
                 }
                 emscripten_longjmp($2 | 0, $3 | 0);
                 abort();
                }
                setTempRet0($3 | 0);
               }
               $2 = getTempRet0() | 0;
               if (($4 | 0) == (1 | 0)) {
                break label$5
               }
               if ($7) {
                break label$131
               }
              }
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
              $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $3 = -1;
              if (!$2) {
               break label$129
              }
              $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
              if (!$4) {
               break label$129
              }
              $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
              if ($3) {
               break label$130
              }
              emscripten_longjmp($2 | 0, $4 | 0);
              abort();
             }
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $7 = invoke_iii(2 | 0, $6 | 0, 1363 | 0) | 0;
             $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $4 = -1;
             if (!$2) {
              break label$127
             }
             $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
             if (!$3) {
              break label$127
             }
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$128
             }
             emscripten_longjmp($2 | 0, $3 | 0);
             abort();
            }
            setTempRet0($4 | 0);
           }
           $4 = 1;
           $2 = getTempRet0() | 0;
           if (($3 | 0) == (1 | 0)) {
            break label$5
           }
           $3 = 0;
           HEAP32[(0 + 30708 | 0) >> 2] = $6;
           break label$9;
          }
          setTempRet0($3 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$135 : {
          label$136 : {
           label$137 : {
            label$138 : {
             label$139 : {
              label$140 : {
               if (!$7) {
                break label$140
               }
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $7 = invoke_iii(2 | 0, $6 | 0, 1371 | 0) | 0;
               $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $4 = -1;
               label$141 : {
                if (!$2) {
                 break label$141
                }
                $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$3) {
                 break label$141
                }
                label$142 : {
                 $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($4) {
                  break label$142
                 }
                 emscripten_longjmp($2 | 0, $3 | 0);
                 abort();
                }
                setTempRet0($3 | 0);
               }
               $2 = getTempRet0() | 0;
               if (($4 | 0) == (1 | 0)) {
                break label$5
               }
               if ($7) {
                break label$139
               }
              }
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
              $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $3 = -1;
              if (!$2) {
               break label$137
              }
              $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
              if (!$4) {
               break label$137
              }
              $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
              if ($3) {
               break label$138
              }
              emscripten_longjmp($2 | 0, $4 | 0);
              abort();
             }
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $7 = invoke_iii(2 | 0, $6 | 0, 1375 | 0) | 0;
             $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $4 = -1;
             if (!$2) {
              break label$135
             }
             $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
             if (!$3) {
              break label$135
             }
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$136
             }
             emscripten_longjmp($2 | 0, $3 | 0);
             abort();
            }
            setTempRet0($4 | 0);
           }
           $4 = 1;
           $2 = getTempRet0() | 0;
           if (($3 | 0) == (1 | 0)) {
            break label$5
           }
           $3 = 0;
           HEAP32[(0 + 30712 | 0) >> 2] = $6;
           break label$9;
          }
          setTempRet0($3 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$143 : {
          label$144 : {
           label$145 : {
            label$146 : {
             label$147 : {
              label$148 : {
               if (!$7) {
                break label$148
               }
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $7 = invoke_iii(2 | 0, $6 | 0, 1383 | 0) | 0;
               $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $4 = -1;
               label$149 : {
                if (!$2) {
                 break label$149
                }
                $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$3) {
                 break label$149
                }
                label$150 : {
                 $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($4) {
                  break label$150
                 }
                 emscripten_longjmp($2 | 0, $3 | 0);
                 abort();
                }
                setTempRet0($3 | 0);
               }
               $2 = getTempRet0() | 0;
               if (($4 | 0) == (1 | 0)) {
                break label$5
               }
               if ($7) {
                break label$147
               }
              }
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
              $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $3 = -1;
              if (!$2) {
               break label$145
              }
              $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
              if (!$4) {
               break label$145
              }
              $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
              if ($3) {
               break label$146
              }
              emscripten_longjmp($2 | 0, $4 | 0);
              abort();
             }
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $7 = invoke_iii(2 | 0, $6 | 0, 1388 | 0) | 0;
             $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $4 = -1;
             if (!$2) {
              break label$143
             }
             $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
             if (!$3) {
              break label$143
             }
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$144
             }
             emscripten_longjmp($2 | 0, $3 | 0);
             abort();
            }
            setTempRet0($4 | 0);
           }
           $4 = 1;
           $2 = getTempRet0() | 0;
           if (($3 | 0) == (1 | 0)) {
            break label$5
           }
           $3 = 0;
           HEAP32[(0 + 30716 | 0) >> 2] = $6;
           break label$9;
          }
          setTempRet0($3 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$151 : {
          label$152 : {
           label$153 : {
            label$154 : {
             label$155 : {
              label$156 : {
               if (!$7) {
                break label$156
               }
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $7 = invoke_iii(2 | 0, $6 | 0, 1396 | 0) | 0;
               $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
               HEAP32[(0 + 87856 | 0) >> 2] = 0;
               $4 = -1;
               label$157 : {
                if (!$2) {
                 break label$157
                }
                $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$3) {
                 break label$157
                }
                label$158 : {
                 $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($4) {
                  break label$158
                 }
                 emscripten_longjmp($2 | 0, $3 | 0);
                 abort();
                }
                setTempRet0($3 | 0);
               }
               $2 = getTempRet0() | 0;
               if (($4 | 0) == (1 | 0)) {
                break label$5
               }
               if ($7) {
                break label$155
               }
              }
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
              $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
              HEAP32[(0 + 87856 | 0) >> 2] = 0;
              $3 = -1;
              if (!$2) {
               break label$153
              }
              $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
              if (!$4) {
               break label$153
              }
              $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
              if ($3) {
               break label$154
              }
              emscripten_longjmp($2 | 0, $4 | 0);
              abort();
             }
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $7 = invoke_iii(2 | 0, $6 | 0, 1401 | 0) | 0;
             $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
             HEAP32[(0 + 87856 | 0) >> 2] = 0;
             $4 = -1;
             if (!$2) {
              break label$151
             }
             $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
             if (!$3) {
              break label$151
             }
             $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
             if ($4) {
              break label$152
             }
             emscripten_longjmp($2 | 0, $3 | 0);
             abort();
            }
            setTempRet0($4 | 0);
           }
           $4 = 1;
           $2 = getTempRet0() | 0;
           if (($3 | 0) == (1 | 0)) {
            break label$5
           }
           $3 = 0;
           HEAP32[(0 + 30720 | 0) >> 2] = $6;
           break label$9;
          }
          setTempRet0($3 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         label$159 : {
          label$160 : {
           label$161 : {
            label$162 : {
             label$163 : {
              label$164 : {
               label$165 : {
                label$166 : {
                 label$167 : {
                  if (!$7) {
                   break label$167
                  }
                  HEAP32[(0 + 87856 | 0) >> 2] = 0;
                  $7 = invoke_iii(2 | 0, $6 | 0, 1409 | 0) | 0;
                  $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                  HEAP32[(0 + 87856 | 0) >> 2] = 0;
                  $4 = -1;
                  label$168 : {
                   if (!$2) {
                    break label$168
                   }
                   $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                   if (!$3) {
                    break label$168
                   }
                   label$169 : {
                    $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                    if ($4) {
                     break label$169
                    }
                    emscripten_longjmp($2 | 0, $3 | 0);
                    abort();
                   }
                   setTempRet0($3 | 0);
                  }
                  $2 = getTempRet0() | 0;
                  if (($4 | 0) == (1 | 0)) {
                   break label$5
                  }
                  if ($7) {
                   break label$166
                  }
                 }
                 HEAP32[(0 + 87856 | 0) >> 2] = 0;
                 $6 = invoke_ii(3 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
                 $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                 HEAP32[(0 + 87856 | 0) >> 2] = 0;
                 $3 = -1;
                 if (!$2) {
                  break label$164
                 }
                 $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                 if (!$4) {
                  break label$164
                 }
                 $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($3) {
                  break label$165
                 }
                 emscripten_longjmp($2 | 0, $4 | 0);
                 abort();
                }
                label$170 : {
                 if ((HEAPU8[$6 >> 0] | 0 | 0) == (45 | 0)) {
                  break label$170
                 }
                 HEAP32[(0 + 50460 | 0) >> 2] = $0 + 64 | 0;
                 HEAP32[(0 + 87856 | 0) >> 2] = 0;
                 invoke_vii(4 | 0, (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[(0 + 30688 | 0) >> 2] | 0, wasm2js_i32$2 = HEAPU8[(0 + 50456 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, 1 | 0);
                 $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                 HEAP32[(0 + 87856 | 0) >> 2] = 0;
                 $4 = -1;
                 if (!$2) {
                  break label$162
                 }
                 $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                 if (!$3) {
                  break label$162
                 }
                 $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                 if ($4) {
                  break label$163
                 }
                 emscripten_longjmp($2 | 0, $3 | 0);
                 abort();
                }
                HEAP32[(0 + 87856 | 0) >> 2] = 0;
                $7 = invoke_iii(2 | 0, $6 | 0, 1414 | 0) | 0;
                $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                HEAP32[(0 + 87856 | 0) >> 2] = 0;
                $4 = -1;
                if (!$2) {
                 break label$160
                }
                $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                if (!$3) {
                 break label$160
                }
                $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                if ($4) {
                 break label$161
                }
                emscripten_longjmp($2 | 0, $3 | 0);
                abort();
               }
               setTempRet0($4 | 0);
              }
              $4 = 1;
              $2 = getTempRet0() | 0;
              if (($3 | 0) == (1 | 0)) {
               break label$5
              }
              $3 = 0;
              HEAP32[(0 + 30724 | 0) >> 2] = $6;
              break label$9;
             }
             setTempRet0($3 | 0);
            }
            $2 = getTempRet0() | 0;
            if (($4 | 0) != (1 | 0)) {
             break label$159
            }
            break label$5;
           }
           setTempRet0($3 | 0);
          }
          $2 = getTempRet0() | 0;
          if (($4 | 0) == (1 | 0)) {
           break label$5
          }
          label$171 : {
           if ($7) {
            break label$171
           }
           $4 = 1;
           $3 = 0;
           HEAP8[(0 + 50433 | 0) >> 0] = 1;
           break label$9;
          }
          HEAP32[(0 + 87856 | 0) >> 2] = 0;
          $7 = invoke_iii(2 | 0, $6 | 0, 1424 | 0) | 0;
          $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
          HEAP32[(0 + 87856 | 0) >> 2] = 0;
          $4 = -1;
          label$172 : {
           if (!$2) {
            break label$172
           }
           $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
           if (!$3) {
            break label$172
           }
           label$173 : {
            $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
            if ($4) {
             break label$173
            }
            emscripten_longjmp($2 | 0, $3 | 0);
            abort();
           }
           setTempRet0($3 | 0);
          }
          $2 = getTempRet0() | 0;
          if (($4 | 0) == (1 | 0)) {
           break label$5
          }
          label$174 : {
           if ($7) {
            break label$174
           }
           $4 = 1;
           $3 = 0;
           HEAP8[(0 + 50464 | 0) >> 0] = 1;
           break label$9;
          }
          HEAP32[(0 + 87856 | 0) >> 2] = 0;
          $7 = invoke_iii(2 | 0, $6 | 0, 1430 | 0) | 0;
          $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
          HEAP32[(0 + 87856 | 0) >> 2] = 0;
          $4 = -1;
          label$175 : {
           if (!$2) {
            break label$175
           }
           $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
           if (!$3) {
            break label$175
           }
           label$176 : {
            $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
            if ($4) {
             break label$176
            }
            emscripten_longjmp($2 | 0, $3 | 0);
            abort();
           }
           setTempRet0($3 | 0);
          }
          $2 = getTempRet0() | 0;
          if (($4 | 0) == (1 | 0)) {
           break label$5
          }
          label$177 : {
           if ($7) {
            break label$177
           }
           $4 = 1;
           $3 = 0;
           HEAP8[(0 + 50465 | 0) >> 0] = 1;
           break label$9;
          }
          HEAP32[($0 + 16 | 0) >> 2] = $6;
          $4 = 0;
          HEAP32[(0 + 87856 | 0) >> 2] = 0;
          invoke_vii(5 | 0, 1441 | 0, $0 + 16 | 0 | 0);
          $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
          HEAP32[(0 + 87856 | 0) >> 2] = 0;
          $6 = -1;
          label$178 : {
           if (!$2) {
            break label$178
           }
           $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
           if (!$3) {
            break label$178
           }
           label$179 : {
            $6 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
            if ($6) {
             break label$179
            }
            emscripten_longjmp($2 | 0, $3 | 0);
            abort();
           }
           setTempRet0($3 | 0);
          }
          $2 = getTempRet0() | 0;
          $3 = 0;
          if (($6 | 0) != (1 | 0)) {
           break label$9
          }
          break label$5;
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         invoke_vii(6 | 0, 0 | 0, HEAP32[(0 + 50460 | 0) >> 2] | 0 | 0);
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $4 = -1;
         label$180 : {
          if (!$2) {
           break label$180
          }
          $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$3) {
           break label$180
          }
          label$181 : {
           $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($4) {
            break label$181
           }
           emscripten_longjmp($2 | 0, $3 | 0);
           abort();
          }
          setTempRet0($3 | 0);
         }
         $2 = getTempRet0() | 0;
         if (($4 | 0) == (1 | 0)) {
          break label$5
         }
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $3 = invoke_ii(7 | 0, HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) | 0;
         $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
         HEAP32[(0 + 87856 | 0) >> 2] = 0;
         $6 = -1;
         label$182 : {
          if (!$2) {
           break label$182
          }
          $4 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
          if (!$4) {
           break label$182
          }
          label$183 : {
           $6 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
           if ($6) {
            break label$183
           }
           emscripten_longjmp($2 | 0, $4 | 0);
           abort();
          }
          setTempRet0($4 | 0);
         }
         $4 = 1;
         $2 = getTempRet0() | 0;
         if (($6 | 0) != (1 | 0)) {
          break label$9
         }
         break label$5;
        }
        $4 = 1;
        $3 = 0;
        HEAP8[(0 + 50456 | 0) >> 0] = 1;
        break label$9;
       }
       $3 = 0;
      }
      HEAP8[($3 + 50456 | 0) >> 0] = $3;
      $4 = 1;
     }
     label$184 : {
      if ($4) {
       break label$184
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      invoke_vii(5 | 0, 1474 | 0, 0 | 0);
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$185 : {
       if (!$2) {
        break label$185
       }
       $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$6) {
        break label$185
       }
       label$186 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
        if ($4) {
         break label$186
        }
        emscripten_longjmp($2 | 0, $6 | 0);
        abort();
       }
       setTempRet0($6 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       break label$5
      }
     }
     label$187 : {
      label$188 : {
       label$189 : {
        label$190 : {
         label$191 : {
          label$192 : {
           label$193 : {
            label$194 : {
             label$195 : {
              label$196 : {
               label$197 : {
                label$198 : {
                 label$199 : {
                  label$200 : {
                   if ($3) {
                    break label$200
                   }
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   invoke_vii(4 | 0, (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[(0 + 30688 | 0) >> 2] | 0, wasm2js_i32$2 = HEAPU8[(0 + 50456 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, 1 | 0);
                   $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   $4 = -1;
                   if (!$2) {
                    break label$198
                   }
                   $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                   if (!$3) {
                    break label$198
                   }
                   $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                   if ($4) {
                    break label$199
                   }
                   emscripten_longjmp($2 | 0, $3 | 0);
                   abort();
                  }
                  label$201 : {
                   if (!(HEAPU8[(0 + 50433 | 0) >> 0] | 0)) {
                    break label$201
                   }
                   $2 = HEAP32[(HEAP32[(0 + 50460 | 0) >> 2] | 0) >> 2] | 0;
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   $4 = invoke_ii(8 | 0, $2 | 0) | 0;
                   $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   $3 = -1;
                   if (!$2) {
                    break label$196
                   }
                   $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                   if (!$6) {
                    break label$196
                   }
                   $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                   if ($3) {
                    break label$197
                   }
                   emscripten_longjmp($2 | 0, $6 | 0);
                   abort();
                  }
                  label$202 : {
                   if (!(HEAPU8[(0 + 50464 | 0) >> 0] | 0)) {
                    break label$202
                   }
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   invoke_vi(9 | 0, 0 | 0);
                   $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   $4 = -1;
                   if (!$2) {
                    break label$194
                   }
                   $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                   if (!$3) {
                    break label$194
                   }
                   $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                   if ($4) {
                    break label$195
                   }
                   emscripten_longjmp($2 | 0, $3 | 0);
                   abort();
                  }
                  label$203 : {
                   if (!(HEAPU8[(0 + 50465 | 0) >> 0] | 0)) {
                    break label$203
                   }
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   invoke_vi(9 | 0, 1 | 0);
                   $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                   HEAP32[(0 + 87856 | 0) >> 2] = 0;
                   $4 = -1;
                   if (!$2) {
                    break label$192
                   }
                   $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                   if (!$3) {
                    break label$192
                   }
                   $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                   if ($4) {
                    break label$193
                   }
                   emscripten_longjmp($2 | 0, $3 | 0);
                   abort();
                  }
                  HEAP32[(0 + 87856 | 0) >> 2] = 0;
                  invoke_v(10 | 0);
                  $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
                  HEAP32[(0 + 87856 | 0) >> 2] = 0;
                  $4 = -1;
                  if (!$2) {
                   break label$190
                  }
                  $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
                  if (!$3) {
                   break label$190
                  }
                  $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
                  if ($4) {
                   break label$191
                  }
                  emscripten_longjmp($2 | 0, $3 | 0);
                  abort();
                 }
                 setTempRet0($3 | 0);
                }
                $2 = getTempRet0() | 0;
                if (($4 | 0) != (1 | 0)) {
                 break label$187
                }
                break label$5;
               }
               setTempRet0($6 | 0);
              }
              $2 = getTempRet0() | 0;
              if (($3 | 0) == (1 | 0)) {
               break label$5
              }
              break label$3;
             }
             setTempRet0($3 | 0);
            }
            $2 = getTempRet0() | 0;
            if (($4 | 0) != (1 | 0)) {
             break label$188
            }
            break label$5;
           }
           setTempRet0($3 | 0);
          }
          $2 = getTempRet0() | 0;
          if (($4 | 0) != (1 | 0)) {
           break label$189
          }
          break label$5;
         }
         setTempRet0($3 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        invoke_vii(6 | 0, 0 | 0, HEAP32[(0 + 50460 | 0) >> 2] | 0 | 0);
        $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
        HEAP32[(0 + 87856 | 0) >> 2] = 0;
        $4 = -1;
        label$204 : {
         if (!$2) {
          break label$204
         }
         $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
         if (!$3) {
          break label$204
         }
         label$205 : {
          $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
          if ($4) {
           break label$205
          }
          emscripten_longjmp($2 | 0, $3 | 0);
          abort();
         }
         setTempRet0($3 | 0);
        }
        $2 = getTempRet0() | 0;
        if (($4 | 0) == (1 | 0)) {
         break label$5
        }
        $2 = 0;
        $1 = saveSetjmp(50272 | 0, 1 | 0, $1 | 0, 4 | 0) | 0;
        $5 = getTempRet0() | 0;
        break label$5;
       }
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       invoke_vi(11 | 0, 1 | 0);
       $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       $4 = -1;
       label$206 : {
        if (!$2) {
         break label$206
        }
        $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
        if (!$3) {
         break label$206
        }
        label$207 : {
         $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
         if ($4) {
          break label$207
         }
         emscripten_longjmp($2 | 0, $3 | 0);
         abort();
        }
        setTempRet0($3 | 0);
       }
       $2 = getTempRet0() | 0;
       if (($4 | 0) == (1 | 0)) {
        break label$5
       }
       break label$4;
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      invoke_vi(11 | 0, 0 | 0);
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$208 : {
       if (!$2) {
        break label$208
       }
       $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$3) {
        break label$208
       }
       label$209 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
        if ($4) {
         break label$209
        }
        emscripten_longjmp($2 | 0, $3 | 0);
        abort();
       }
       setTempRet0($3 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       break label$5
      }
      break label$4;
     }
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     invoke_vii(6 | 0, 0 | 0, HEAP32[(0 + 50460 | 0) >> 2] | 0 | 0);
     $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     $4 = -1;
     label$210 : {
      if (!$2) {
       break label$210
      }
      $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
      if (!$3) {
       break label$210
      }
      label$211 : {
       $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
       if ($4) {
        break label$211
       }
       emscripten_longjmp($2 | 0, $3 | 0);
       abort();
      }
      setTempRet0($3 | 0);
     }
     $2 = getTempRet0() | 0;
     if (($4 | 0) == (1 | 0)) {
      break label$5
     }
     $4 = 0;
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     invoke_v(12 | 0);
     $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     $3 = -1;
     label$212 : {
      if (!$2) {
       break label$212
      }
      $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
      if (!$6) {
       break label$212
      }
      label$213 : {
       $3 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, 4 | 0) | 0;
       if ($3) {
        break label$213
       }
       emscripten_longjmp($2 | 0, $6 | 0);
       abort();
      }
      setTempRet0($6 | 0);
     }
     $2 = getTempRet0() | 0;
     if (($3 | 0) != (1 | 0)) {
      break label$3
     }
    }
    label$214 : while (1) {
     label$215 : {
      if ($2) {
       break label$215
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $3 = invoke_i(13 | 0) | 0;
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$216 : {
       if (!$2) {
        break label$216
       }
       $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$6) {
        break label$216
       }
       label$217 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0;
        if ($4) {
         break label$217
        }
        emscripten_longjmp($2 | 0, $6 | 0);
        abort();
       }
       setTempRet0($6 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       continue label$214
      }
      label$218 : {
       if (!$3) {
        break label$218
       }
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($0 + 48 | 0) >> 2] = $2;
       HEAP32[($0 + 12 | 0) >> 2] = $2;
       invoke_viii(14 | 0, $0 + 12 | 0 | 0, 2269 | 0, 0 | 0);
       $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       $4 = -1;
       label$219 : {
        if (!$2) {
         break label$219
        }
        $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
        if (!$6) {
         break label$219
        }
        label$220 : {
         $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0;
         if ($4) {
          break label$220
         }
         emscripten_longjmp($2 | 0, $6 | 0);
         abort();
        }
        setTempRet0($6 | 0);
       }
       $2 = getTempRet0() | 0;
       if (($4 | 0) == (1 | 0)) {
        continue label$214
       }
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($0 + 40 | 0) >> 2] = $2;
       HEAP32[($0 + 8 | 0) >> 2] = $2;
       invoke_viii(14 | 0, $0 + 8 | 0 | 0, $3 | 0, 0 | 0);
       $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       $4 = -1;
       label$221 : {
        if (!$2) {
         break label$221
        }
        $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
        if (!$6) {
         break label$221
        }
        label$222 : {
         $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0;
         if ($4) {
          break label$222
         }
         emscripten_longjmp($2 | 0, $6 | 0);
         abort();
        }
        setTempRet0($6 | 0);
       }
       $2 = getTempRet0() | 0;
       if (($4 | 0) == (1 | 0)) {
        continue label$214
       }
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($0 + 32 | 0) >> 2] = $2;
       HEAP32[($0 + 4 | 0) >> 2] = $2;
       invoke_viii(14 | 0, $0 + 4 | 0 | 0, 2307 | 0, 0 | 0);
       $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
       HEAP32[(0 + 87856 | 0) >> 2] = 0;
       $4 = -1;
       label$223 : {
        if (!$2) {
         break label$223
        }
        $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
        if (!$6) {
         break label$223
        }
        label$224 : {
         $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0;
         if ($4) {
          break label$224
         }
         emscripten_longjmp($2 | 0, $6 | 0);
         abort();
        }
        setTempRet0($6 | 0);
       }
       $2 = getTempRet0() | 0;
       if (($4 | 0) == (1 | 0)) {
        continue label$214
       }
       dlfree($3 | 0);
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $3 = invoke_ii(15 | 0, 2309 | 0) | 0;
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$225 : {
       if (!$2) {
        break label$225
       }
       $6 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$6) {
        break label$225
       }
       label$226 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0;
        if ($4) {
         break label$226
        }
        emscripten_longjmp($2 | 0, $6 | 0);
        abort();
       }
       setTempRet0($6 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       continue label$214
      }
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      invoke_iiiiii(16 | 0, $3 | 0, 2147483647 | 0, 0 | 0, 0 | 0, $0 + 55 | 0 | 0) | 0;
      $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
      HEAP32[(0 + 87856 | 0) >> 2] = 0;
      $4 = -1;
      label$227 : {
       if (!$2) {
        break label$227
       }
       $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
       if (!$3) {
        break label$227
       }
       label$228 : {
        $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0;
        if ($4) {
         break label$228
        }
        emscripten_longjmp($2 | 0, $3 | 0);
        abort();
       }
       setTempRet0($3 | 0);
      }
      $2 = getTempRet0() | 0;
      if (($4 | 0) == (1 | 0)) {
       continue label$214
      }
     }
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     invoke_v(17 | 0);
     $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
     HEAP32[(0 + 87856 | 0) >> 2] = 0;
     $4 = -1;
     label$229 : {
      if (!$2) {
       break label$229
      }
      $3 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
      if (!$3) {
       break label$229
      }
      label$230 : {
       $4 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $1 | 0, $5 | 0) | 0;
       if ($4) {
        break label$230
       }
       emscripten_longjmp($2 | 0, $3 | 0);
       abort();
      }
      setTempRet0($3 | 0);
     }
     $2 = getTempRet0() | 0;
     if (($4 | 0) == (1 | 0)) {
      continue label$214
     }
     break label$214;
    };
   }
   $4 = HEAP32[(0 + 50452 | 0) >> 2] | 0;
  }
  dlfree($1 | 0);
  __stack_pointer = $0 + 64 | 0;
  return $4 | 0;
 }
 
 function error_28char__2c_20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  vfprintf(HEAP32[(0 + 28204 | 0) >> 2] | 0 | 0, $0 | 0, $1 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function write_assembled_code_28char__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $5 = 0;
  $1 = __stack_pointer - 64 | 0;
  __stack_pointer = $1;
  $2 = 1;
  label$1 : {
   if (HEAPU8[(0 + 84770 | 0) >> 0] | 0) {
    break label$1
   }
   $3 = strcpy(xmalloc_28int_29((strlen($0 | 0) | 0) + 5 | 0 | 0) | 0 | 0, $0 | 0) | 0;
   $0 = $3 + (strlen($3 | 0) | 0) | 0;
   $6 = 0;
   $7 = HEAPU8[($6 + 4351 | 0) >> 0] | 0 | ((HEAPU8[($6 + 4352 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6 + 4353 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6 + 4354 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$0 >> 0] = $7;
   HEAP8[($0 + 1 | 0) >> 0] = $7 >>> 8 | 0;
   HEAP8[($0 + 2 | 0) >> 0] = $7 >>> 16 | 0;
   HEAP8[($0 + 3 | 0) >> 0] = $7 >>> 24 | 0;
   HEAP8[($0 + 4 | 0) >> 0] = HEAPU8[(0 + 4355 | 0) >> 0] | 0;
   label$2 : {
    $0 = fopen($3 | 0, 4356 | 0) | 0;
    if ($0) {
     break label$2
    }
    perror($3 | 0);
    break label$1;
   }
   user_kernel_text_segment_28bool_29(0 | 0);
   $2 = find_symbol_address_28char__29(3851 | 0) | 0;
   $4 = current_text_pc_28_29() | 0;
   HEAP32[($1 + 52 | 0) >> 2] = $4;
   HEAP32[($1 + 48 | 0) >> 2] = $2;
   fiprintf($0 | 0, 4359 | 0, $1 + 48 | 0 | 0) | 0;
   label$3 : {
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$3
    }
    $5 = $4 + -4 | 0;
    label$4 : while (1) {
     $3 = inst_encode_28inst_s__29(read_mem_inst_28unsigned_20int_29($2 | 0) | 0 | 0) | 0;
     HEAP32[($1 + 36 | 0) >> 2] = ($2 | 0) == ($5 | 0) ? 4397 : 4394;
     HEAP32[($1 + 32 | 0) >> 2] = $3;
     fiprintf($0 | 0, 4387 | 0, $1 + 32 | 0 | 0) | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$4
     }
     break label$4;
    };
   }
   fputc(10 | 0, $0 | 0) | 0;
   user_kernel_data_segment_28bool_29(0 | 0);
   $2 = HEAPU8[(0 + 50428 | 0) >> 0] | 0;
   label$5 : {
    $3 = current_data_pc_28_29() | 0;
    $2 = !$2 << 28 | 0;
    if ($3 >>> 0 <= $2 >>> 0) {
     break label$5
    }
    HEAP32[($1 + 16 | 0) >> 2] = $2;
    HEAP32[($1 + 20 | 0) >> 2] = $3;
    fiprintf($0 | 0, 4398 | 0, $1 + 16 | 0 | 0) | 0;
    $4 = $3 + -4 | 0;
    label$6 : while (1) {
     HEAP32[$1 >> 2] = read_mem_word_28unsigned_20int_29($2 | 0) | 0;
     HEAP32[($1 + 4 | 0) >> 2] = ($2 | 0) == ($4 | 0) ? 4397 : 4394;
     fiprintf($0 | 0, 4387 | 0, $1 | 0) | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
    fputc(10 | 0, $0 | 0) | 0;
   }
   fclose($0 | 0) | 0;
   $2 = 0;
  }
  __stack_pointer = $1 + 64 | 0;
  return $2 | 0;
 }
 
 function dump_data_seg_28bool_29($0) {
  $0 = $0 | 0;
  ss_clear_28str_stm__29(50600 | 0);
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    format_data_segs_28str_stm__29(50600 | 0);
    break label$1;
   }
   ss_printf_28str_stm__2c_20char__2c_20____29(50600 | 0, 4450 | 0, 0 | 0);
   format_mem_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29(50600 | 0, 268435456 | 0, HEAP32[(0 + 51884 | 0) >> 2] | 0 | 0);
  }
  $0 = fopen(4457 | 0, 4466 | 0) | 0;
  fputs(ss_to_string_28str_stm__29(50600 | 0) | 0 | 0, $0 | 0) | 0;
  fclose($0 | 0) | 0;
 }
 
 function console_to_program_28_29() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $18 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $2$hi = 0;
  $0 = __stack_pointer - 64 | 0;
  __stack_pointer = $0;
  label$1 : {
   if (!(HEAPU8[(0 + 50448 | 0) >> 0] | 0)) {
    break label$1
   }
   if ((HEAPU8[(0 + 50468 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   tcgetattr(HEAP32[(0 + 50444 | 0) >> 2] | 0 | 0, 50540 | 0) | 0;
   HEAP32[($0 + 56 | 0) >> 2] = HEAP32[(0 + 50596 | 0) >> 2] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 50588 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 50592 | 0) >> 2] | 0;
   $18 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 48 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $18;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 50580 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 50584 | 0) >> 2] | 0;
   $21 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 40 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $21;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 50572 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 50576 | 0) >> 2] | 0;
   $24 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 32 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $24;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 50564 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 50568 | 0) >> 2] | 0;
   $27 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $27;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 50556 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 50560 | 0) >> 2] | 0;
   $30 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $30;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1 = $0 + 8 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 50548 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 50552 | 0) >> 2] | 0;
   $2 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $1;
   HEAP32[i64toi32_i32$1 >> 2] = $2;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 50540 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 50544 | 0) >> 2] | 0;
   $3 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[i64toi32_i32$0 >> 2] = $3;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = 5;
   HEAP32[i64toi32_i32$0 >> 2] = $3 & -5632 | 0 | 261 | 0;
   i64toi32_i32$1 = $2$hi;
   HEAP32[$1 >> 2] = $2 & -433 | 0 | 176 | 0;
   HEAP16[(i64toi32_i32$0 + 22 | 0) >> 1] = 257;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = 0;
   tcsetattr(HEAP32[(0 + 50444 | 0) >> 2] | 0 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
   HEAP8[(0 + 50468 | 0) >> 0] = 1;
  }
  __stack_pointer = $0 + 64 | 0;
 }
 
 function dump_text_seg_28bool_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  ss_clear_28str_stm__29(50616 | 0);
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $0 = 4194304;
    $1 = 51864;
    $2 = 4468;
    break label$1;
   }
   format_insts_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29(50616 | 0, 4194304 | 0, HEAP32[(0 + 51864 | 0) >> 2] | 0 | 0);
   $0 = -2147483648;
   $1 = 51912;
   $2 = 3905;
  }
  ss_printf_28str_stm__2c_20char__2c_20____29(50616 | 0, $2 | 0, 0 | 0);
  format_insts_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29(50616 | 0, $0 | 0, HEAP32[$1 >> 2] | 0 | 0);
  $0 = fopen(4489 | 0, 4466 | 0) | 0;
  fputs(ss_to_string_28str_stm__29(50616 | 0) | 0 | 0, $0 | 0) | 0;
  fclose($0 | 0) | 0;
 }
 
 function top_level_28_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  signal(2 | 0, 18 | 0) | 0;
  initialize_scanner_28_IO_FILE__29(HEAP32[(0 + 28780 | 0) >> 2] | 0 | 0);
  initialize_parser_28char__29(2325 | 0);
  $1 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $1;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  write_output_28port_2c_20char__2c_20____29($0 + 4 | 0 | 0, 2317 | 0, 0 | 0);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function write_output_28port_2c_20char__2c_20____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   $2 = HEAPU8[(0 + 50468 | 0) >> 0] | 0;
   if (!$2) {
    break label$1
   }
   console_to_spim_28_29();
  }
  label$2 : {
   label$3 : {
    if (!$0) {
     break label$3
    }
    vfprintf($0 | 0, $1 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
    fflush($0 | 0) | 0;
    break label$2;
   }
   $0 = HEAP32[(0 + 28200 | 0) >> 2] | 0;
   vfprintf($0 | 0, $1 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
   fflush($0 | 0) | 0;
  }
  label$4 : {
   if (!$2) {
    break label$4
   }
   console_to_program_28_29();
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function console_to_spim_28_29() {
  label$1 : {
   if (!(HEAPU8[(0 + 50448 | 0) >> 0] | 0)) {
    break label$1
   }
   if (!((HEAPU8[(0 + 50468 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   tcsetattr(HEAP32[(0 + 50444 | 0) >> 2] | 0 | 0, 0 | 0, 50540 | 0) | 0;
  }
  HEAP8[(0 + 50468 | 0) >> 0] = 0;
 }
 
 function control_c_seen_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  console_to_spim_28_29();
  $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $2;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  write_output_28port_2c_20char__2c_20____29($1 + 4 | 0 | 0, 4426 | 0, 0 | 0);
  emscripten_longjmp(50272 | 0, 1 | 0);
  abort();
 }
 
 function js_spim_top_level($0) {
  $0 = $0 | 0;
  var $2 = 0, $6 = 0, $7 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = dlmalloc(40 | 0) | 0;
  HEAP32[$2 >> 2] = 0;
  $3 = saveSetjmp(50272 | 0, 1 | 0, $2 | 0, 4 | 0) | 0;
  $4 = getTempRet0() | 0;
  $2 = 0;
  label$1 : while (1) {
   $5 = 0;
   label$2 : {
    if ($2) {
     break label$2
    }
    HEAP32[(0 + 87856 | 0) >> 2] = 0;
    $5 = invoke_ii(19 | 0, $0 | 0) | 0;
    $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
    HEAP32[(0 + 87856 | 0) >> 2] = 0;
    $6 = -1;
    label$3 : {
     if (!$2) {
      break label$3
     }
     $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
     if (!$7) {
      break label$3
     }
     label$4 : {
      $6 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $3 | 0, $4 | 0) | 0;
      if ($6) {
       break label$4
      }
      emscripten_longjmp($2 | 0, $7 | 0);
      abort();
     }
     setTempRet0($7 | 0);
    }
    $2 = getTempRet0() | 0;
    if (($6 | 0) == (1 | 0)) {
     continue label$1
    }
   }
   HEAP32[(0 + 87856 | 0) >> 2] = 0;
   invoke_ii(20 | 0, HEAP32[(0 + 28200 | 0) >> 2] | 0 | 0) | 0;
   $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
   HEAP32[(0 + 87856 | 0) >> 2] = 0;
   $6 = -1;
   label$5 : {
    if (!$2) {
     break label$5
    }
    $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
    if (!$7) {
     break label$5
    }
    label$6 : {
     $6 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $3 | 0, $4 | 0) | 0;
     if ($6) {
      break label$6
     }
     emscripten_longjmp($2 | 0, $7 | 0);
     abort();
    }
    setTempRet0($7 | 0);
   }
   $2 = getTempRet0() | 0;
   if (($6 | 0) == (1 | 0)) {
    continue label$1
   }
   HEAP32[(0 + 87856 | 0) >> 2] = 0;
   invoke_ii(20 | 0, HEAP32[(0 + 28204 | 0) >> 2] | 0 | 0) | 0;
   $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
   HEAP32[(0 + 87856 | 0) >> 2] = 0;
   $6 = -1;
   label$7 : {
    if (!$2) {
     break label$7
    }
    $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
    if (!$7) {
     break label$7
    }
    label$8 : {
     $6 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $3 | 0, $4 | 0) | 0;
     if ($6) {
      break label$8
     }
     emscripten_longjmp($2 | 0, $7 | 0);
     abort();
    }
    setTempRet0($7 | 0);
   }
   $2 = getTempRet0() | 0;
   if (($6 | 0) == (1 | 0)) {
    continue label$1
   }
   label$9 : {
    if ($5) {
     break label$9
    }
    HEAP32[(0 + 87856 | 0) >> 2] = 0;
    $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
    HEAP32[($1 + 8 | 0) >> 2] = $2;
    HEAP32[($1 + 4 | 0) >> 2] = $2;
    invoke_viii(14 | 0, $1 + 4 | 0 | 0, 2317 | 0, 0 | 0);
    $2 = HEAP32[(0 + 87856 | 0) >> 2] | 0;
    HEAP32[(0 + 87856 | 0) >> 2] = 0;
    $6 = -1;
    label$10 : {
     if (!$2) {
      break label$10
     }
     $7 = HEAP32[(0 + 87860 | 0) >> 2] | 0;
     if (!$7) {
      break label$10
     }
     label$11 : {
      $6 = testSetjmp(HEAP32[$2 >> 2] | 0 | 0, $3 | 0, $4 | 0) | 0;
      if ($6) {
       break label$11
      }
      emscripten_longjmp($2 | 0, $7 | 0);
      abort();
     }
     setTempRet0($7 | 0);
    }
    $2 = getTempRet0() | 0;
    if (($6 | 0) == (1 | 0)) {
     continue label$1
    }
   }
   break label$1;
  };
  dlfree($3 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $5 | 0;
 }
 
 function parse_spim_command_28bool_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0, $4 = 0, $6 = 0, $5 = 0, $7 = 0, $10 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 528 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $2 = HEAP32[(0 + 30692 | 0) >> 2] | 0;
    break label$1;
   }
   $2 = read_assembly_command_28_29() | 0;
  }
  $3 = 1;
  label$3 : {
   label$4 : {
    switch ($2 + -1 | 0 | 0) {
    case 0:
     console_to_spim_28_29();
     exit(0 | 0);
     abort();
    case 1:
     label$22 : {
      label$23 : {
       if (!$0) {
        break label$23
       }
       $3 = HEAP32[(0 + 50472 | 0) >> 2] | 0;
       break label$22;
      }
      $3 = read_token_28_29() | 0;
     }
     label$24 : {
      if ($0) {
       break label$24
      }
      flush_to_newline_28_29();
     }
     label$25 : {
      label$26 : {
       if (($3 | 0) != (264 | 0)) {
        break label$26
       }
       read_assembly_file_28char__29(HEAP32[(0 + 84776 | 0) >> 2] | 0 | 0) | 0;
       pop_scanner_28_29();
       break label$25;
      }
      error_28char__2c_20____29(2342 | 0, 0 | 0);
     }
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 2;
     break label$3;
    case 2:
     label$27 : {
      label$28 : {
       if (!$0) {
        break label$28
       }
       $0 = HEAP32[(0 + 50476 | 0) >> 2] | 0;
       break label$27;
      }
      $0 = get_opt_int_28_29() | 0;
     }
     HEAP32[(0 + 50476 | 0) >> 2] = $0;
     label$29 : {
      if ($0) {
       break label$29
      }
      HEAP32[(0 + 50476 | 0) >> 2] = starting_address_28_29() | 0;
     }
     initialize_run_stack_28int_2c_20char___29(0 | 0, HEAP32[(0 + 50460 | 0) >> 2] | 0 | 0);
     console_to_program_28_29();
     label$30 : {
      if (!(HEAP32[(0 + 50476 | 0) >> 2] | 0)) {
       break label$30
      }
      label$31 : {
       $0 = undefined_symbol_string_28_29() | 0;
       if (!$0) {
        break label$31
       }
       $3 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($1 + 520 | 0) >> 2] = $3;
       HEAP32[($1 + 28 | 0) >> 2] = $3;
       write_output_28port_2c_20char__2c_20____29($1 + 28 | 0 | 0, 2269 | 0, 0 | 0);
       $3 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($1 + 512 | 0) >> 2] = $3;
       HEAP32[($1 + 24 | 0) >> 2] = $3;
       write_output_28port_2c_20char__2c_20____29($1 + 24 | 0 | 0, $0 | 0, 0 | 0);
       $3 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($1 + 504 | 0) >> 2] = $3;
       HEAP32[($1 + 20 | 0) >> 2] = $3;
       write_output_28port_2c_20char__2c_20____29($1 + 20 | 0 | 0, 2307 | 0, 0 | 0);
       dlfree($0 | 0);
      }
      if (!(run_program_28unsigned_20int_2c_20int_2c_20bool_2c_20bool_2c_20bool__29(HEAP32[(0 + 50476 | 0) >> 2] | 0 | 0, 2147483647 | 0, 0 | 0, 0 | 0, $1 + 252 | 0 | 0) | 0)) {
       break label$30
      }
      $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
      HEAP32[($1 + 496 | 0) >> 2] = $0;
      HEAP32[($1 + 16 | 0) >> 2] = $0;
      HEAP32[$1 >> 2] = HEAP32[(0 + 50808 | 0) >> 2] | 0;
      write_output_28port_2c_20char__2c_20____29($1 + 16 | 0 | 0, 2374 | 0, $1 | 0);
     }
     console_to_spim_28_29();
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 3;
     break label$3;
    case 12:
     $3 = 0;
     label$32 : {
      if (!(HEAP32[(0 + 50808 | 0) >> 2] | 0)) {
       break label$32
      }
      console_to_program_28_29();
      label$33 : {
       if (!(run_program_28unsigned_20int_2c_20int_2c_20bool_2c_20bool_2c_20bool__29(HEAP32[(0 + 50808 | 0) >> 2] | 0 | 0, 2147483647 | 0, 0 | 0, 1 | 0, $1 + 252 | 0 | 0) | 0)) {
        break label$33
       }
       $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($1 + 488 | 0) >> 2] = $0;
       HEAP32[($1 + 44 | 0) >> 2] = $0;
       HEAP32[($1 + 32 | 0) >> 2] = HEAP32[(0 + 50808 | 0) >> 2] | 0;
       write_output_28port_2c_20char__2c_20____29($1 + 44 | 0 | 0, 2374 | 0, $1 + 32 | 0 | 0);
      }
      console_to_spim_28_29();
     }
     HEAP32[(0 + 30692 | 0) >> 2] = 13;
     break label$3;
    case 3:
     label$34 : {
      label$35 : {
       if (!$0) {
        break label$35
       }
       $0 = HEAP32[(0 + 50480 | 0) >> 2] | 0;
       break label$34;
      }
      $0 = get_opt_int_28_29() | 0;
     }
     HEAP32[(0 + 50480 | 0) >> 2] = $0;
     label$36 : {
      $0 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
      if ($0) {
       break label$36
      }
      $0 = starting_address_28_29() | 0;
     }
     label$37 : {
      if (HEAP32[(0 + 50480 | 0) >> 2] | 0) {
       break label$37
      }
      HEAP32[(0 + 50480 | 0) >> 2] = 1;
     }
     label$38 : {
      if (!$0) {
       break label$38
      }
      console_to_program_28_29();
      label$39 : {
       if (!(run_program_28unsigned_20int_2c_20int_2c_20bool_2c_20bool_2c_20bool__29($0 | 0, HEAP32[(0 + 50480 | 0) >> 2] | 0 | 0, 1 | 0, 1 | 0, $1 + 252 | 0 | 0) | 0)) {
        break label$39
       }
       $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
       HEAP32[($1 + 480 | 0) >> 2] = $0;
       HEAP32[($1 + 60 | 0) >> 2] = $0;
       HEAP32[($1 + 48 | 0) >> 2] = HEAP32[(0 + 50808 | 0) >> 2] | 0;
       write_output_28port_2c_20char__2c_20____29($1 + 60 | 0 | 0, 2374 | 0, $1 + 48 | 0 | 0);
      }
      console_to_spim_28_29();
     }
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 4;
     break label$3;
    case 4:
     label$40 : {
      label$41 : {
       if (!$0) {
        break label$41
       }
       $2 = HEAP32[(0 + 50472 | 0) >> 2] | 0;
       break label$40;
      }
      $2 = read_token_28_29() | 0;
     }
     label$42 : {
      label$43 : {
       switch ($2 + -260 | 0 | 0) {
       case 2:
        $3 = (wasm2js_i32$0 = (HEAP32[(0 + 50484 | 0) >> 2] | 0) + 1 | 0, wasm2js_i32$1 = HEAP32[(0 + 84776 | 0) >> 2] | 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
        HEAP32[(0 + 50484 | 0) >> 2] = $3;
        print_reg_28int_29($3 | 0);
        break label$42;
       case 3:
        $3 = (wasm2js_i32$0 = (HEAP32[(0 + 50484 | 0) >> 2] | 0) + 2 | 0, wasm2js_i32$1 = HEAP32[(0 + 84776 | 0) >> 2] | 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
        HEAP32[(0 + 50484 | 0) >> 2] = $3;
        print_fp_reg_28int_29($3 | 0);
        break label$42;
       case 0:
        $3 = (wasm2js_i32$0 = (HEAP32[(0 + 50484 | 0) >> 2] | 0) + 4 | 0, wasm2js_i32$1 = HEAP32[(0 + 84776 | 0) >> 2] | 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
        HEAP32[(0 + 50484 | 0) >> 2] = $3;
        print_mem_28unsigned_20int_29($3 | 0);
        break label$42;
       case 1:
        if (print_reg_from_string_28char__29(HEAP32[(0 + 84776 | 0) >> 2] | 0 | 0) | 0) {
         break label$42
        }
        label$48 : {
         label$49 : {
          if (!$0) {
           break label$49
          }
          $3 = (HEAP32[(0 + 50484 | 0) >> 2] | 0) + 4 | 0;
          break label$48;
         }
         $3 = find_symbol_address_28char__29(HEAP32[(0 + 84776 | 0) >> 2] | 0 | 0) | 0;
        }
        HEAP32[(0 + 50484 | 0) >> 2] = $3;
        label$50 : {
         if (!$3) {
          break label$50
         }
         print_mem_28unsigned_20int_29($3 | 0);
         break label$42;
        }
        HEAP32[($1 + 64 | 0) >> 2] = HEAP32[(0 + 84776 | 0) >> 2] | 0;
        error_28char__2c_20____29(2408 | 0, $1 + 64 | 0 | 0);
        break label$42;
       default:
        break label$43;
       };
      }
      error_28char__2c_20____29(2427 | 0, 0 | 0);
     }
     label$51 : {
      if ($0) {
       break label$51
      }
      flush_to_newline_28_29();
     }
     $3 = 0;
     HEAP32[(0 + 50472 | 0) >> 2] = $2;
     HEAP32[(0 + 30692 | 0) >> 2] = 5;
     break label$3;
    case 5:
     print_symbols_28_29();
     label$52 : {
      if ($0) {
       break label$52
      }
      flush_to_newline_28_29();
     }
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 11;
     break label$3;
    case 6:
     label$53 : {
      label$54 : {
       if (!$0) {
        break label$54
       }
       $2 = HEAP32[(0 + 50472 | 0) >> 2] | 0;
       break label$53;
      }
      $2 = read_token_28_29() | 0;
     }
     $3 = 0;
     label$55 : {
      if (($2 | 0) != (261 | 0)) {
       break label$55
      }
      $3 = !(strcmp(HEAP32[(0 + 84776 | 0) >> 2] | 0 | 0, 2440 | 0) | 0);
     }
     print_all_regs_28int_29($3 | 0);
     label$56 : {
      if ($0) {
       break label$56
      }
      flush_to_newline_28_29();
     }
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 11;
     break label$3;
    case 7:
     flush_to_newline_28_29();
     $3 = 0;
     initialize_world_28char__2c_20bool_29((wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[(0 + 30688 | 0) >> 2] | 0, wasm2js_i32$2 = HEAPU8[(0 + 50456 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, 1 | 0);
     initialize_run_stack_28int_2c_20char___29(0 | 0, HEAP32[(0 + 50460 | 0) >> 2] | 0 | 0);
     write_startup_message_28_29();
     HEAP32[(0 + 30692 | 0) >> 2] = 11;
     break label$3;
    case 8:
     yyparse_28_29() | 0;
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 9;
     break label$3;
    case 10:
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 11;
     break label$3;
    case 11:
     label$57 : {
      if ($0) {
       break label$57
      }
      flush_to_newline_28_29();
     }
     $3 = 0;
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 472 | 0) >> 2] = $0;
     HEAP32[($1 + 188 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 188 | 0 | 0, 2444 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 464 | 0) >> 2] = $0;
     HEAP32[($1 + 184 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 184 | 0 | 0, 2474 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 456 | 0) >> 2] = $0;
     HEAP32[($1 + 180 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 180 | 0 | 0, 2503 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 448 | 0) >> 2] = $0;
     HEAP32[($1 + 176 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 176 | 0 | 0, 2532 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 440 | 0) >> 2] = $0;
     HEAP32[($1 + 172 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 172 | 0 | 0, 2561 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 432 | 0) >> 2] = $0;
     HEAP32[($1 + 168 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 168 | 0 | 0, 2624 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 424 | 0) >> 2] = $0;
     HEAP32[($1 + 164 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 164 | 0 | 0, 2653 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 416 | 0) >> 2] = $0;
     HEAP32[($1 + 160 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 160 | 0 | 0, 2708 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 408 | 0) >> 2] = $0;
     HEAP32[($1 + 156 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 156 | 0 | 0, 2769 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 400 | 0) >> 2] = $0;
     HEAP32[($1 + 152 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 152 | 0 | 0, 2826 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 392 | 0) >> 2] = $0;
     HEAP32[($1 + 148 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 148 | 0 | 0, 2856 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 384 | 0) >> 2] = $0;
     HEAP32[($1 + 144 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 144 | 0 | 0, 2902 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 376 | 0) >> 2] = $0;
     HEAP32[($1 + 140 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 140 | 0 | 0, 2953 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 368 | 0) >> 2] = $0;
     HEAP32[($1 + 136 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 136 | 0 | 0, 2996 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 360 | 0) >> 2] = $0;
     HEAP32[($1 + 132 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 132 | 0 | 0, 3040 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 352 | 0) >> 2] = $0;
     HEAP32[($1 + 128 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 128 | 0 | 0, 3095 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 344 | 0) >> 2] = $0;
     HEAP32[($1 + 124 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 124 | 0 | 0, 3143 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 336 | 0) >> 2] = $0;
     HEAP32[($1 + 120 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 120 | 0 | 0, 3198 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 328 | 0) >> 2] = $0;
     HEAP32[($1 + 116 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 116 | 0 | 0, 3250 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 320 | 0) >> 2] = $0;
     HEAP32[($1 + 112 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 112 | 0 | 0, 3280 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 312 | 0) >> 2] = $0;
     HEAP32[($1 + 108 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 108 | 0 | 0, 3360 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 304 | 0) >> 2] = $0;
     HEAP32[($1 + 104 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 104 | 0 | 0, 3443 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 296 | 0) >> 2] = $0;
     HEAP32[($1 + 100 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 100 | 0 | 0, 3481 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 288 | 0) >> 2] = $0;
     HEAP32[($1 + 96 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 96 | 0 | 0, 3519 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 280 | 0) >> 2] = $0;
     HEAP32[($1 + 92 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 92 | 0 | 0, 3573 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 272 | 0) >> 2] = $0;
     HEAP32[($1 + 88 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 88 | 0 | 0, 3618 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 264 | 0) >> 2] = $0;
     HEAP32[($1 + 84 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 84 | 0 | 0, 3643 | 0, 0 | 0);
     $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 256 | 0) >> 2] = $0;
     HEAP32[($1 + 80 | 0) >> 2] = $0;
     write_output_28port_2c_20char__2c_20____29($1 + 80 | 0 | 0, 3701 | 0, 0 | 0);
     HEAP32[(0 + 30692 | 0) >> 2] = 12;
     break label$3;
    case 13:
    case 14:
     label$58 : {
      label$59 : {
       if (!$0) {
        break label$59
       }
       $3 = HEAP32[(0 + 50472 | 0) >> 2] | 0;
       break label$58;
      }
      $3 = read_token_28_29() | 0;
     }
     label$60 : {
      if ($0) {
       break label$60
      }
      flush_to_newline_28_29();
     }
     label$61 : {
      label$62 : {
       switch ($3 + -260 | 0 | 0) {
       case 0:
        HEAP32[(0 + 50488 | 0) >> 2] = (wasm2js_i32$0 = (HEAP32[(0 + 50488 | 0) >> 2] | 0) + 4 | 0, wasm2js_i32$1 = HEAP32[(0 + 84776 | 0) >> 2] | 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
        break label$61;
       case 1:
        label$65 : {
         label$66 : {
          if (!$0) {
           break label$66
          }
          $0 = (HEAP32[(0 + 50488 | 0) >> 2] | 0) + 4 | 0;
          break label$65;
         }
         $0 = find_symbol_address_28char__29(HEAP32[(0 + 84776 | 0) >> 2] | 0 | 0) | 0;
        }
        HEAP32[(0 + 50488 | 0) >> 2] = $0;
        break label$61;
       default:
        break label$62;
       };
      }
      error_28char__2c_20____29(3756 | 0, 0 | 0);
     }
     $0 = HEAP32[(0 + 50488 | 0) >> 2] | 0;
     label$67 : {
      label$68 : {
       if (($2 | 0) != (14 | 0)) {
        break label$68
       }
       add_breakpoint_28unsigned_20int_29($0 | 0);
       break label$67;
      }
      delete_breakpoint_28unsigned_20int_29($0 | 0);
     }
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = $2;
     break label$3;
    case 15:
     label$69 : {
      if ($0) {
       break label$69
      }
      flush_to_newline_28_29();
     }
     list_breakpoints_28_29();
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 16;
     break label$3;
    case 16:
    case 17:
     label$70 : {
      label$71 : {
       if (!$0) {
        break label$71
       }
       $0 = HEAP32[(0 + 50472 | 0) >> 2] | 0;
       break label$70;
      }
      $0 = read_token_28_29() | 0;
     }
     $4 = 3795;
     label$72 : {
      switch ($0 + -259 | 0 | 0) {
      default:
       HEAP32[($1 + 192 | 0) >> 2] = ($2 | 0) == (18 | 0) ? 3831 : 3836;
       $3 = 0;
       fiprintf(HEAP32[(0 + 28204 | 0) >> 2] | 0 | 0, 3805 | 0, $1 + 192 | 0 | 0) | 0;
       break label$3;
      case 5:
       $4 = HEAP32[(0 + 84776 | 0) >> 2] | 0;
       break;
      case 0:
       break label$72;
      };
     }
     label$75 : {
      $5 = fopen($4 | 0, 3847 | 0) | 0;
      if ($5) {
       break label$75
      }
      perror($4 | 0);
      $3 = 0;
      break label$3;
     }
     $3 = 0;
     user_kernel_text_segment_28bool_29(0 | 0);
     $6 = 0;
     label$76 : {
      $7 = find_symbol_address_28char__29(3851 | 0) | 0;
      $8 = current_text_pc_28_29() | 0;
      if ($7 >>> 0 >= $8 >>> 0) {
       break label$76
      }
      $6 = 0;
      $9 = ($2 | 0) != (18 | 0);
      $0 = $7;
      label$77 : while (1) {
       $10 = inst_encode_28inst_s__29(read_mem_inst_28unsigned_20int_29($0 | 0) | 0 | 0) | 0;
       label$78 : {
        if ($9) {
         break label$78
        }
        $10 = htonl($10 | 0) | 0;
       }
       HEAP32[($1 + 252 | 0) >> 2] = $10;
       fwrite($1 + 252 | 0 | 0, 1 | 0, 4 | 0, $5 | 0) | 0;
       $6 = $6 + 1 | 0;
       $0 = $0 + 4 | 0;
       if ($0 >>> 0 < $8 >>> 0) {
        continue label$77
       }
       break label$77;
      };
     }
     fclose($5 | 0) | 0;
     HEAP32[($1 + 216 | 0) >> 2] = $4;
     HEAP32[($1 + 212 | 0) >> 2] = $7;
     HEAP32[($1 + 208 | 0) >> 2] = $6;
     fiprintf(HEAP32[(0 + 28204 | 0) >> 2] | 0 | 0, 3858 | 0, $1 + 208 | 0 | 0) | 0;
     HEAP32[(0 + 30692 | 0) >> 2] = $2;
     break label$3;
    case 18:
     label$79 : {
      if ($0) {
       break label$79
      }
      flush_to_newline_28_29();
     }
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 19;
     ss_clear_28str_stm__29(50492 | 0);
     format_insts_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29(50492 | 0, 4194304 | 0, HEAP32[(0 + 51864 | 0) >> 2] | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29(50492 | 0, 3905 | 0, 0 | 0);
     format_insts_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29(50492 | 0, -2147483648 | 0, HEAP32[(0 + 51912 | 0) >> 2] | 0 | 0);
     HEAP32[($1 + 248 | 0) >> 2] = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     $0 = ss_to_string_28str_stm__29(50492 | 0) | 0;
     HEAP32[($1 + 232 | 0) >> 2] = HEAP32[($1 + 248 | 0) >> 2] | 0;
     write_output_28port_2c_20char__2c_20____29($1 + 232 | 0 | 0, $0 | 0, 0 | 0);
     break label$3;
    case 19:
     label$80 : {
      if ($0) {
       break label$80
      }
      flush_to_newline_28_29();
     }
     $3 = 0;
     HEAP32[(0 + 30692 | 0) >> 2] = 20;
     ss_clear_28str_stm__29(50508 | 0);
     format_data_segs_28str_stm__29(50508 | 0);
     HEAP32[($1 + 240 | 0) >> 2] = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     $0 = ss_to_string_28str_stm__29(50508 | 0) | 0;
     HEAP32[($1 + 236 | 0) >> 2] = HEAP32[($1 + 240 | 0) >> 2] | 0;
     write_output_28port_2c_20char__2c_20____29($1 + 236 | 0 | 0, $0 | 0, 0 | 0);
     break label$3;
    case 9:
     break label$3;
    default:
     break label$4;
    };
   }
   label$81 : while (1) {
    if ((read_token_28_29() | 0 | 0) != (259 | 0)) {
     continue label$81
    }
    break label$81;
   };
   $3 = 0;
   error_28char__2c_20____29(3915 | 0, 0 | 0);
  }
  __stack_pointer = $1 + 528 | 0;
  return $3 | 0;
 }
 
 function read_assembly_command_28_29() {
  var $0 = 0, $1 = 0;
  $0 = 10;
  label$1 : {
   label$2 : {
    switch ((read_token_28_29() | 0) + -259 | 0 | 0) {
    default:
     return 0 | 0;
    case 0:
     break label$1;
    case 2:
     break label$2;
    };
   }
   $0 = 1;
   $1 = HEAP32[(0 + 84776 | 0) >> 2] | 0;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3937 | 0, 2 | 0) | 0) {
    break label$1
   }
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3942 | 0, 2 | 0) | 0) {
    break label$1
   }
   $0 = 5;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3947 | 0, 1 | 0) | 0) {
    break label$1
   }
   $0 = 6;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3953 | 0, 7 | 0) | 0) {
    break label$1
   }
   $0 = 7;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3967 | 0, 7 | 0) | 0) {
    break label$1
   }
   $0 = 3;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3982 | 0, 2 | 0) | 0) {
    break label$1
   }
   $0 = 2;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3986 | 0, 2 | 0) | 0) {
    break label$1
   }
   $0 = 2;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3991 | 0, 2 | 0) | 0) {
    break label$1
   }
   $0 = 8;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3996 | 0, 6 | 0) | 0) {
    break label$1
   }
   $0 = 4;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4009 | 0, 1 | 0) | 0) {
    break label$1
   }
   $0 = 12;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4014 | 0, 1 | 0) | 0) {
    break label$1
   }
   $0 = 13;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4019 | 0, 1 | 0) | 0) {
    break label$1
   }
   $0 = 14;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4028 | 0, 2 | 0) | 0) {
    break label$1
   }
   $0 = 15;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4039 | 0, 1 | 0) | 0) {
    break label$1
   }
   $0 = 16;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4046 | 0, 2 | 0) | 0) {
    break label$1
   }
   $0 = 17;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 3836 | 0, 5 | 0) | 0) {
    break label$1
   }
   $0 = 19;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4051 | 0, 10 | 0) | 0) {
    break label$1
   }
   $0 = 20;
   if (str_prefix_28char__2c_20char__2c_20int_29($1 | 0, 4062 | 0, 10 | 0) | 0) {
    break label$1
   }
   $0 = HEAPU8[$1 >> 0] | 0;
   $0 = ($0 | 0) == (63 | 0) ? 12 : ($0 | 0) == (46 | 0) ? 9 : 0;
  }
  return $0 | 0;
 }
 
 function read_token_28_29() {
  var $0 = 0;
  label$1 : {
   $0 = yylex_28_29() | 0;
   if ($0) {
    break label$1
   }
   console_to_spim_28_29();
   exit(0 | 0);
   abort();
  }
  return $0 | 0;
 }
 
 function flush_to_newline_28_29() {
  label$1 : while (1) {
   if ((read_token_28_29() | 0 | 0) != (259 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function get_opt_int_28_29() {
  label$1 : {
   switch ((read_token_28_29() | 0) + -259 | 0 | 0) {
   case 1:
    flush_to_newline_28_29();
    return HEAP32[(0 + 84776 | 0) >> 2] | 0 | 0;
   default:
    flush_to_newline_28_29();
    break;
   case 0:
    break label$1;
   };
  }
  return 0 | 0;
 }
 
 function print_reg_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($1 + 24 | 0) >> 2] = $2;
  HEAP32[($1 + 20 | 0) >> 2] = $2;
  HEAP32[$1 >> 2] = $0;
  $0 = HEAP32[(50672 + ($0 << 2 | 0) | 0) >> 2] | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $0;
  HEAP32[($1 + 8 | 0) >> 2] = $0;
  write_output_28port_2c_20char__2c_20____29($1 + 20 | 0 | 0, 4073 | 0, $1 | 0);
  __stack_pointer = $1 + 32 | 0;
 }
 
 function print_fp_reg_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = Math_fround(0);
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  label$1 : {
   if ($0 & 1 | 0) {
    break label$1
   }
   $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
   HEAP32[($1 + 72 | 0) >> 2] = $2;
   $3 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + ((($0 | 0) / (2 | 0) | 0) << 3 | 0) | 0) >> 3];
   HEAP32[($1 + 32 | 0) >> 2] = $0;
   HEAP32[($1 + 60 | 0) >> 2] = $2;
   HEAPF64[($1 + 40 | 0) >> 3] = $3;
   write_output_28port_2c_20char__2c_20____29($1 + 60 | 0 | 0, 4095 | 0, $1 + 32 | 0 | 0);
  }
  $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($1 + 64 | 0) >> 2] = $2;
  $4 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2]);
  HEAP32[$1 >> 2] = $0;
  HEAP32[($1 + 28 | 0) >> 2] = $2;
  HEAPF64[($1 + 8 | 0) >> 3] = +$4;
  write_output_28port_2c_20char__2c_20____29($1 + 28 | 0 | 0, 4120 | 0, $1 | 0);
  __stack_pointer = $1 + 80 | 0;
 }
 
 function print_reg_from_string_28char__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 304 | 0;
  __stack_pointer = $1;
  $2 = $1 + 192 | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   label$2 : while (1) {
    HEAP8[$2 >> 0] = tolower(($3 << 24 | 0) >> 24 | 0 | 0) | 0;
    $2 = $2 + 1 | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $0 = $0 + 1 | 0;
    if (($2 - ($1 + 192 | 0) | 0 | 0) < (100 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[$2 >> 0] = 0;
  $2 = 1;
  label$3 : {
   label$4 : {
    $0 = (HEAPU8[($1 + 192 | 0) >> 0] | 0 | 0) == (36 | 0) ? $1 + 192 | 0 | 1 | 0 : $1 + 192 | 0;
    if (strcmp($0 | 0, 4145 | 0) | 0) {
     break label$4
    }
    $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
    HEAP32[($1 + 184 | 0) >> 2] = $0;
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    $0 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
    HEAP32[$1 >> 2] = $0;
    HEAP32[($1 + 4 | 0) >> 2] = $0;
    write_output_28port_2c_20char__2c_20____29($1 + 12 | 0 | 0, 4148 | 0, $1 | 0);
    break label$3;
   }
   label$5 : {
    label$6 : {
     if (strcmp($0 | 0, 4166 | 0) | 0) {
      break label$6
     }
     $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 176 | 0) >> 2] = $2;
     HEAP32[($1 + 28 | 0) >> 2] = $2;
     $2 = HEAP32[(0 + 50800 | 0) >> 2] | 0;
     HEAP32[($1 + 16 | 0) >> 2] = $2;
     HEAP32[($1 + 20 | 0) >> 2] = $2;
     write_output_28port_2c_20char__2c_20____29($1 + 28 | 0 | 0, 4169 | 0, $1 + 16 | 0 | 0);
     break label$5;
    }
    label$7 : {
     if (strcmp($0 | 0, 4187 | 0) | 0) {
      break label$7
     }
     $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 168 | 0) >> 2] = $2;
     HEAP32[($1 + 44 | 0) >> 2] = $2;
     $2 = HEAP32[(0 + 50804 | 0) >> 2] | 0;
     HEAP32[($1 + 32 | 0) >> 2] = $2;
     HEAP32[($1 + 36 | 0) >> 2] = $2;
     write_output_28port_2c_20char__2c_20____29($1 + 44 | 0 | 0, 4190 | 0, $1 + 32 | 0 | 0);
     break label$5;
    }
    label$8 : {
     if (strcmp($0 | 0, 4208 | 0) | 0) {
      break label$8
     }
     $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 160 | 0) >> 2] = $2;
     HEAP32[($1 + 60 | 0) >> 2] = $2;
     $2 = HEAP32[(51344 + 252 | 0) >> 2] | 0;
     HEAP32[($1 + 48 | 0) >> 2] = $2;
     HEAP32[($1 + 52 | 0) >> 2] = $2;
     write_output_28port_2c_20char__2c_20____29($1 + 60 | 0 | 0, 4215 | 0, $1 + 48 | 0 | 0);
     break label$5;
    }
    label$9 : {
     if (strcmp($0 | 0, 4235 | 0) | 0) {
      break label$9
     }
     $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 152 | 0) >> 2] = $2;
     HEAP32[($1 + 76 | 0) >> 2] = $2;
     $2 = HEAP32[(51344 + 52 | 0) >> 2] | 0;
     HEAP32[($1 + 64 | 0) >> 2] = $2;
     HEAP32[($1 + 68 | 0) >> 2] = $2;
     write_output_28port_2c_20char__2c_20____29($1 + 76 | 0 | 0, 4241 | 0, $1 + 64 | 0 | 0);
     break label$5;
    }
    label$10 : {
     if (strcmp($0 | 0, 4262 | 0) | 0) {
      break label$10
     }
     $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 144 | 0) >> 2] = $2;
     HEAP32[($1 + 92 | 0) >> 2] = $2;
     $2 = HEAP32[(51344 + 56 | 0) >> 2] | 0;
     HEAP32[($1 + 80 | 0) >> 2] = $2;
     HEAP32[($1 + 84 | 0) >> 2] = $2;
     write_output_28port_2c_20char__2c_20____29($1 + 92 | 0 | 0, 4266 | 0, $1 + 80 | 0 | 0);
     break label$5;
    }
    label$11 : {
     if (strcmp($0 | 0, 4285 | 0) | 0) {
      break label$11
     }
     $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($1 + 136 | 0) >> 2] = $2;
     HEAP32[($1 + 108 | 0) >> 2] = $2;
     $2 = HEAP32[(51344 + 48 | 0) >> 2] | 0;
     HEAP32[($1 + 96 | 0) >> 2] = $2;
     HEAP32[($1 + 100 | 0) >> 2] = $2;
     write_output_28port_2c_20char__2c_20____29($1 + 108 | 0 | 0, 4292 | 0, $1 + 96 | 0 | 0);
     break label$5;
    }
    $2 = 0;
    if (strcmp($0 | 0, 4314 | 0) | 0) {
     break label$3
    }
    $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
    HEAP32[($1 + 128 | 0) >> 2] = $2;
    HEAP32[($1 + 124 | 0) >> 2] = $2;
    $2 = HEAP32[(51344 + 32 | 0) >> 2] | 0;
    HEAP32[($1 + 112 | 0) >> 2] = $2;
    HEAP32[($1 + 116 | 0) >> 2] = $2;
    write_output_28port_2c_20char__2c_20____29($1 + 124 | 0 | 0, 4323 | 0, $1 + 112 | 0 | 0);
   }
   $2 = 1;
  }
  __stack_pointer = $1 + 304 | 0;
  return $2 | 0;
 }
 
 function print_all_regs_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  ss_clear_28str_stm__29(50524 | 0);
  format_registers_28str_stm__2c_20int_2c_20int_29(50524 | 0, $0 | 0, $0 | 0);
  HEAP32[($1 + 8 | 0) >> 2] = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[$1 >> 2] = ss_to_string_28str_stm__29(50524 | 0) | 0;
  HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  write_output_28port_2c_20char__2c_20____29($1 + 4 | 0 | 0, 4347 | 0, $1 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function fatal_error_28char__2c_20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $1 + 4 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $3;
  vfprintf(HEAP32[(0 + 28204 | 0) >> 2] | 0 | 0, HEAP32[$1 >> 2] | 0 | 0, $3 | 0) | 0;
  exit(-1 | 0);
  abort();
 }
 
 function run_error_28char__2c_20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  console_to_spim_28_29();
  vfprintf(HEAP32[(0 + 28204 | 0) >> 2] | 0 | 0, $0 | 0, HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) | 0;
  emscripten_longjmp(50272 | 0, 1 | 0);
  abort();
 }
 
 function read_input_28char__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   $3 = HEAPU8[(0 + 50468 | 0) >> 0] | 0;
   if (!$3) {
    break label$1
   }
   console_to_spim_28_29();
  }
  label$2 : {
   label$3 : while (1) {
    if (($1 | 0) < (2 | 0)) {
     break label$2
    }
    $4 = 0;
    label$4 : {
     if ((read(HEAP32[(0 + 50444 | 0) >> 2] | 0 | 0, $2 + 15 | 0 | 0, 1 | 0) | 0 | 0) < (1 | 0)) {
      break label$4
     }
     HEAP8[$0 >> 0] = HEAPU8[($2 + 15 | 0) >> 0] | 0;
     $1 = $1 + -1 | 0;
     $0 = $0 + 1 | 0;
     $4 = (HEAPU8[($2 + 15 | 0) >> 0] | 0 | 0) != (10 | 0);
    }
    if ($4) {
     continue label$3
    }
    break label$3;
   };
  }
  label$5 : {
   if (($1 | 0) < (1 | 0)) {
    break label$5
   }
   HEAP8[$0 >> 0] = 0;
  }
  label$6 : {
   if (!$3) {
    break label$6
   }
   console_to_program_28_29();
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function console_input_available_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  $1 = 0;
  label$1 : {
   if (!(HEAPU8[(0 + 50448 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP32[($0 + 8 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = 0;
   memset($0 + 16 | 0 | 0, 0 | 0, 128 | 0) | 0;
   $1 = HEAP32[(0 + 50444 | 0) >> 2] | 0;
   $2 = ($0 + 16 | 0) + (($1 >>> 3 | 0) & 536870908 | 0) | 0;
   HEAP32[$2 >> 2] = 1 << ($1 & 31 | 0) | 0 | (HEAP32[$2 >> 2] | 0) | 0;
   $1 = select(1024 | 0, $0 + 16 | 0 | 0, 0 | 0, 0 | 0, $0 + 8 | 0 | 0) | 0;
  }
  __stack_pointer = $0 + 144 | 0;
  return $1 | 0;
 }
 
 function get_console_char_28_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  read(HEAP32[(0 + 50444 | 0) >> 2] | 0 | 0, $0 + 15 | 0 | 0, 1 | 0) | 0;
  label$1 : {
   $1 = HEAPU8[($0 + 15 | 0) >> 0] | 0;
   if (($1 | 0) != (3 | 0)) {
    break label$1
   }
   control_c_seen_28int_29(0 | 0);
   abort();
  }
  __stack_pointer = $0 + 16 | 0;
  return ($1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function put_console_char_28char_29($0) {
  $0 = $0 | 0;
  putc($0 | 0, HEAP32[(0 + 50440 | 0) >> 2] | 0 | 0) | 0;
  fflush(HEAP32[(0 + 50440 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function str_prefix_28char__2c_20char__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAPU8[$0 >> 0] | 0;
  $4 = !$3;
  label$1 : {
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ((HEAPU8[$1 >> 0] | 0) & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = $2 + -1 | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    $4 = !$3;
    if (!$3) {
     break label$1
    }
    $0 = $0 + 1 | 0;
    $5 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $1 = $1 + 1 | 0;
    if (($3 | 0) == ($5 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($2 | 0) < (1 | 0) & $4 | 0 | 0;
 }
 
 function initialize_world_28char__2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $5 = 0, $4 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   if (HEAP32[(0 + 50816 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 50812 | 0) >> 2] = xmalloc_28int_29(128 | 0) | 0;
  }
  make_memory_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[(0 + 30696 | 0) >> 2] | 0 | 0, HEAP32[(0 + 30700 | 0) >> 2] | 0 | 0, HEAP32[(0 + 30704 | 0) >> 2] | 0 | 0, HEAP32[(0 + 30708 | 0) >> 2] | 0 | 0, HEAP32[(0 + 30712 | 0) >> 2] | 0 | 0, HEAP32[(0 + 30716 | 0) >> 2] | 0 | 0, HEAP32[(0 + 30720 | 0) >> 2] | 0 | 0, HEAP32[(0 + 30724 | 0) >> 2] | 0 | 0);
  initialize_registers_28_29();
  initialize_inst_tables_28_29();
  initialize_symbol_table_28_29();
  k_text_begins_at_point_28unsigned_20int_29(-2147483648 | 0);
  k_data_begins_at_point_28unsigned_20int_29(-1879048192 | 0);
  data_begins_at_point_28unsigned_20int_29(268435456 | 0);
  text_begins_at_point_28unsigned_20int_29(4194304 | 0);
  label$2 : {
   if (!$0) {
    break label$2
   }
   $3 = HEAPU8[(0 + 50431 | 0) >> 0] | 0;
   HEAP8[(0 + 50431 | 0) >> 0] = 1;
   $4 = HEAPU8[(0 + 50428 | 0) >> 0] | 0;
   HEAP8[(0 + 50428 | 0) >> 0] = 0;
   label$3 : {
    $5 = __strdup($0 | 0) | 0;
    if ($5) {
     break label$3
    }
    fatal_error_28char__2c_20____29(4498 | 0, 0 | 0);
   }
   label$4 : {
    $0 = strtok($5 | 0, 4532 | 0) | 0;
    if (!$0) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      if (read_assembly_file_28char__29($0 | 0) | 0) {
       break label$6
      }
      HEAP32[($2 + 16 | 0) >> 2] = $0;
      fatal_error_28char__2c_20____29(4534 | 0, $2 + 16 | 0 | 0);
     }
     label$7 : {
      if (!$1) {
       break label$7
      }
      HEAP32[$2 >> 2] = $0;
      $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = $0;
      HEAP32[($2 + 12 | 0) >> 2] = $0;
      write_output_28port_2c_20char__2c_20____29($2 + 12 | 0 | 0, 4569 | 0, $2 | 0);
     }
     $0 = strtok(0 | 0, 4532 | 0) | 0;
     if ($0) {
      continue label$5
     }
     break label$5;
    };
   }
   dlfree($5 | 0);
   HEAP8[(0 + 50431 | 0) >> 0] = $3;
   HEAP8[(0 + 50428 | 0) >> 0] = $4;
   if ($4 & 255 | 0) {
    break label$2
   }
   make_label_global_28char__29(4581 | 0) | 0;
   record_label_28char__2c_20unsigned_20int_2c_20int_29(4581 | 0, 0 | 0, 0 | 0) | 0;
  }
  initialize_scanner_28_IO_FILE__29(HEAP32[(0 + 28780 | 0) >> 2] | 0 | 0);
  delete_all_breakpoints_28_29();
  __stack_pointer = $2 + 32 | 0;
 }
 
 function xmalloc_28int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   $0 = dlmalloc($0 | 0) | 0;
   if ($0) {
    break label$1
   }
   fatal_error_28char__2c_20____29(4979 | 0, 0 | 0);
  }
  return $0 | 0;
 }
 
 function initialize_registers_28_29() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0 = 0;
  memset(HEAP32[(0 + 50812 | 0) >> 2] | 0 | 0, 0 | 0, 128 | 0) | 0;
  $0 = HEAP32[(0 + 50812 | 0) >> 2] | 0;
  HEAP32[(0 + 50816 | 0) >> 2] = $0;
  HEAP32[(0 + 50820 | 0) >> 2] = $0;
  HEAP32[((memset(50672 | 0, 0 | 0, 128 | 0) | 0) + 116 | 0) >> 2] = 2147479548;
  HEAP32[(51344 + 252 | 0) >> 2] = 0;
  HEAP32[(51344 + 128 | 0) >> 2] = 38912;
  HEAP32[(51344 + 64 | 0) >> 2] = 0;
  i64toi32_i32$1 = 51344;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 51344;
  i64toi32_i32$0 = 805371664;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = 51344;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 50804 | 0) >> 2] = 0;
  HEAP32[(0 + 50800 | 0) >> 2] = 0;
  HEAP32[(0 + 50808 | 0) >> 2] = 0;
 }
 
 function read_assembly_file_28char__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = fopen($0 | 0, 4776 | 0) | 0;
    if ($2) {
     break label$2
    }
    HEAP32[$1 >> 2] = $0;
    error_28char__2c_20____29(4779 | 0, $1 | 0);
    break label$1;
   }
   initialize_scanner_28_IO_FILE__29($2 | 0);
   initialize_parser_28char__29($0 | 0);
   label$3 : while (1) {
    if (!(yyparse_28_29() | 0)) {
     continue label$3
    }
    break label$3;
   };
   fclose($2 | 0) | 0;
   flush_local_labels_28int_29((HEAPU8[(0 + 84770 | 0) >> 0] | 0) ^ 1 | 0 | 0);
   end_of_assembly_file_28_29();
  }
  __stack_pointer = $1 + 16 | 0;
  return ($2 | 0) != (0 | 0) | 0;
 }
 
 function delete_all_breakpoints_28_29() {
  var $0 = 0, $1 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 50636 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   label$2 : while (1) {
    $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    dlfree($0 | 0);
    $0 = $1;
    if ($0) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[(0 + 50636 | 0) >> 2] = 0;
 }
 
 function write_startup_message_28_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 64 | 0;
  __stack_pointer = $0;
  HEAP32[($0 + 16 | 0) >> 2] = 4595;
  $1 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($0 + 56 | 0) >> 2] = $1;
  HEAP32[($0 + 20 | 0) >> 2] = $1;
  write_output_28port_2c_20char__2c_20____29($0 + 20 | 0 | 0, 4586 | 0, $0 + 16 | 0 | 0);
  $1 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($0 + 48 | 0) >> 2] = $1;
  HEAP32[($0 + 12 | 0) >> 2] = $1;
  write_output_28port_2c_20char__2c_20____29($0 + 12 | 0 | 0, 4625 | 0, 0 | 0);
  $1 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($0 + 40 | 0) >> 2] = $1;
  HEAP32[($0 + 8 | 0) >> 2] = $1;
  write_output_28port_2c_20char__2c_20____29($0 + 8 | 0 | 0, 4662 | 0, 0 | 0);
  $1 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($0 + 32 | 0) >> 2] = $1;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  write_output_28port_2c_20char__2c_20____29($0 + 4 | 0 | 0, 4684 | 0, 0 | 0);
  $1 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($0 + 24 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $1;
  write_output_28port_2c_20char__2c_20____29($0 | 0, 4726 | 0, 0 | 0);
  __stack_pointer = $0 + 64 | 0;
 }
 
 function starting_address_28_29() {
  return find_symbol_address_28char__29(4803 | 0) | 0 | 0;
 }
 
 function str_copy_28char__29($0) {
  $0 = $0 | 0;
  return strcpy(xmalloc_28int_29((strlen($0 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $0 | 0) | 0 | 0;
 }
 
 function initialize_run_stack_28int_2c_20char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $6 = 0, $2 = 0;
  $2 = __stack_pointer - 4e4 | 0;
  __stack_pointer = $2;
  HEAP32[(50672 + 116 | 0) >> 2] = 2147483647;
  $3 = 0;
  $4 = 0;
  label$1 : {
   $5 = HEAP32[(0 + 87848 | 0) >> 2] | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   if (!$6) {
    break label$1
   }
   $4 = 0;
   label$2 : while (1) {
    HEAP32[($2 + ($4 << 2 | 0) | 0) >> 2] = copy_str_to_stack_28char__29($6 | 0) | 0;
    $4 = $4 + 1 | 0;
    $6 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    $5 = $5 + 4 | 0;
    if ($6) {
     continue label$2
    }
    break label$2;
   };
  }
  $5 = $4;
  label$3 : {
   if (($0 | 0) <= (0 | 0)) {
    break label$3
   }
   $5 = $4;
   label$4 : while (1) {
    HEAP32[($2 + ($5 << 2 | 0) | 0) >> 2] = copy_str_to_stack_28char__29(HEAP32[($1 + ($3 << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
    $5 = $5 + 1 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[(50672 + 116 | 0) >> 2] = ((HEAP32[(50672 + 116 | 0) >> 2] | 0) + -4 | 0) & -8 | 0;
  copy_int_to_stack_28int_29(0 | 0) | 0;
  label$5 : {
   if (($4 | 0) < (1 | 0)) {
    break label$5
   }
   $3 = $4;
   label$6 : while (1) {
    $6 = $3 + -1 | 0;
    HEAP32[(50672 + 24 | 0) >> 2] = copy_int_to_stack_28int_29(HEAP32[($2 + ($6 << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
    $1 = ($3 | 0) > (1 | 0);
    $3 = $6;
    if ($1) {
     continue label$6
    }
    break label$6;
   };
  }
  copy_int_to_stack_28int_29(0 | 0) | 0;
  label$7 : {
   if (($5 | 0) <= ($4 | 0)) {
    break label$7
   }
   label$8 : while (1) {
    $5 = $5 + -1 | 0;
    HEAP32[(50672 + 20 | 0) >> 2] = copy_int_to_stack_28int_29(HEAP32[($2 + ($5 << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
    if (($5 | 0) > ($4 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  HEAP32[(50672 + 16 | 0) >> 2] = $0;
  set_mem_word_28unsigned_20int_2c_20int_29(HEAP32[(50672 + 116 | 0) >> 2] | 0 | 0, $0 | 0);
  __stack_pointer = $2 + 4e4 | 0;
 }
 
 function copy_str_to_stack_28char__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = strlen($0 | 0) | 0;
   if (($1 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    set_mem_byte_28unsigned_20int_2c_20int_29(HEAP32[(50672 + 116 | 0) >> 2] | 0 | 0, HEAP8[($0 + $1 | 0) >> 0] | 0 | 0);
    HEAP32[(50672 + 116 | 0) >> 2] = (HEAP32[(50672 + 116 | 0) >> 2] | 0) + -1 | 0;
    $2 = ($1 | 0) > (0 | 0);
    $1 = $1 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return (HEAP32[(50672 + 116 | 0) >> 2] | 0) + 1 | 0 | 0;
 }
 
 function copy_int_to_stack_28int_29($0) {
  $0 = $0 | 0;
  set_mem_word_28unsigned_20int_2c_20int_29(HEAP32[(50672 + 116 | 0) >> 2] | 0 | 0, $0 | 0);
  $0 = HEAP32[(50672 + 116 | 0) >> 2] | 0;
  HEAP32[(50672 + 116 | 0) >> 2] = $0 + -4 | 0;
  return $0 | 0;
 }
 
 function run_program_28unsigned_20int_2c_20int_2c_20bool_2c_20bool_2c_20bool__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$3) {
    break label$1
   }
   if (!(inst_is_breakpoint_28unsigned_20int_29($0 | 0) | 0)) {
    break label$1
   }
   $3 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
   $0 = $3 ? $3 : $0;
   delete_breakpoint_28unsigned_20int_29($0 | 0);
   HEAP32[(0 + 50632 | 0) >> 2] = 0;
   HEAP8[$4 >> 0] = run_spim_28unsigned_20int_2c_20int_2c_20bool_29($0 | 0, 1 | 0, $2 | 0) | 0;
   add_breakpoint_28unsigned_20int_29($0 | 0);
   $1 = $1 + -1 | 0;
   $0 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
  }
  $3 = 0;
  HEAP32[(0 + 50632 | 0) >> 2] = 0;
  HEAP8[$4 >> 0] = run_spim_28unsigned_20int_2c_20int_2c_20bool_29($0 | 0, $1 | 0, $2 | 0) | 0;
  label$2 : {
   if (!(HEAP32[(0 + 50632 | 0) >> 2] | 0)) {
    break label$2
   }
   if (((HEAP32[(51344 + 52 | 0) >> 2] | 0) & 124 | 0 | 0) != (36 | 0)) {
    break label$2
   }
   HEAP32[(51344 + 48 | 0) >> 2] = (HEAP32[(51344 + 48 | 0) >> 2] | 0) & -3 | 0;
   $3 = 1;
  }
  return $3 | 0;
 }
 
 function delete_breakpoint_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[(0 + 50636 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    break label$1;
   }
   $4 = 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      if ((HEAP32[$3 >> 2] | 0 | 0) != ($0 | 0)) {
       break label$5
      }
      set_mem_inst_28unsigned_20int_2c_20inst_s__29($0 | 0, HEAP32[($3 + 4 | 0) >> 2] | 0 | 0);
      HEAP32[($2 ? $2 + 8 | 0 : 50636) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
      $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
      dlfree($3 | 0);
      $4 = 1;
      break label$4;
     }
     $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     $2 = $3;
    }
    $3 = $5;
    if ($3) {
     continue label$3
    }
    break label$3;
   };
  }
  label$6 : {
   if ($4) {
    break label$6
   }
   HEAP32[$1 >> 2] = $0;
   error_28char__2c_20____29(4902 | 0, $1 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function add_breakpoint_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = xmalloc_28int_29(12 | 0) | 0;
  $3 = HEAP32[(0 + 50636 | 0) >> 2] | 0;
  HEAP32[$2 >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $3;
  $3 = set_breakpoint_28unsigned_20int_29($0 | 0) | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $3;
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    HEAP32[(0 + 50636 | 0) >> 2] = $2;
    break label$1;
   }
   HEAP32[$1 >> 2] = $0;
   error_28char__2c_20____29((HEAP32[(0 + 50632 | 0) >> 2] | 0 ? 4811 : 4854) | 0, $1 | 0);
   dlfree($2 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function list_breakpoints_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[(0 + 50636 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    label$3 : while (1) {
     $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($0 + 40 | 0) >> 2] = $2;
     HEAP32[($0 + 16 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
     HEAP32[($0 + 28 | 0) >> 2] = $2;
     write_output_28port_2c_20char__2c_20____29($0 + 28 | 0 | 0, 4937 | 0, $0 + 16 | 0 | 0);
     $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     if ($1) {
      continue label$3
     }
     break label$1;
    };
   }
   $1 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
   HEAP32[($0 + 32 | 0) >> 2] = $1;
   HEAP32[($0 + 12 | 0) >> 2] = $1;
   write_output_28port_2c_20char__2c_20____29($0 + 12 | 0 | 0, 4959 | 0, 0 | 0);
  }
  __stack_pointer = $0 + 48 | 0;
 }
 
 function map_string_to_name_val_val_28name_val_val__2c_20int_2c_20char__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $8 = 0, $9 = 0, $7 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $10 = 0;
  $3 = $1 + -1 | 0;
  $4 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($4 | 0) <= ($3 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   $5 = ($3 + $4 | 0 | 0) / (2 | 0) | 0;
   $6 = $0 + Math_imul($5, 12) | 0;
   $1 = HEAP32[$6 >> 2] | 0;
   $7 = HEAPU8[$1 >> 0] | 0;
   label$3 : {
    $8 = HEAPU8[$2 >> 0] | 0;
    if (!$8) {
     break label$3
    }
    $9 = $2;
    if (($8 | 0) != ($7 & 255 | 0 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     $7 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
     $8 = HEAPU8[($9 + 1 | 0) >> 0] | 0;
     if (!$8) {
      break label$3
     }
     $1 = $1 + 1 | 0;
     $9 = $9 + 1 | 0;
     if (($8 | 0) == ($7 & 255 | 0 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   label$5 : {
    label$6 : {
     $1 = ($7 | $8 | 0) & 255 | 0;
     if ($1) {
      break label$6
     }
     $10 = $6;
     break label$5;
    }
    $9 = (($8 << 24 | 0) >> 24 | 0 | 0) > (($7 << 24 | 0) >> 24 | 0 | 0);
    $3 = $9 ? $3 : $5 + -1 | 0;
    $4 = $9 ? $5 + 1 | 0 : $4;
   }
   if ($1) {
    continue label$1
   }
   break label$1;
  };
  return $10 | 0;
 }
 
 function map_int_to_name_val_val_28name_val_val__2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = $1 + -1 | 0;
  $3 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($3 | 0) <= ($1 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    label$4 : {
     $4 = ($1 + $3 | 0 | 0) / (2 | 0) | 0;
     $5 = $0 + Math_imul($4, 12) | 0;
     $6 = HEAP32[($5 + 4 | 0) >> 2] | 0;
     $7 = ($6 | 0) != ($2 | 0);
     if ($7) {
      break label$4
     }
     $8 = $5;
     break label$3;
    }
    $5 = ($6 | 0) < ($2 | 0);
    $1 = $5 ? $1 : $4 + -1 | 0;
    $3 = $5 ? $4 + 1 | 0 : $3;
   }
   if ($7) {
    continue label$1
   }
   break label$1;
  };
  return $8 | 0;
 }
 
 function zmalloc_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = dlmalloc($0 | 0) | 0;
   if ($1) {
    break label$1
   }
   fatal_error_28char__2c_20____29(4979 | 0, 0 | 0);
  }
  return memset($1 | 0, 0 | 0, $0 | 0) | 0 | 0;
 }
 
 function run_spim_28unsigned_20int_2c_20int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $7 = 0, $8 = 0, $12 = 0.0, $9 = 0, $11 = Math_fround(0), $13 = 0.0, $10 = 0, $3 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $4 = 0, $5 = 0, $14 = Math_fround(0), i64toi32_i32$2 = 0, $15 = 0, $15$hi = 0, i64toi32_i32$3 = 0, $25 = 0, $940 = 0, $968 = 0, $3198 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[(0 + 50808 | 0) >> 2] = $0;
  $0 = 1;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $4 = (wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAPU8[(0 + 50448 | 0) >> 0] | 0 ? 100 : $1, wasm2js_i32$2 = HEAPU8[(0 + 50428 | 0) >> 0] | 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $5 = ($4 | 0) < ($1 | 0) ? $4 : $1;
   label$2 : while (1) {
    label$3 : {
     if (HEAPU8[(0 + 50428 | 0) >> 0] | 0) {
      break label$3
     }
     if (!((HEAPU8[(0 + 50448 | 0) >> 0] | 0) & 255 | 0)) {
      break label$3
     }
     check_memory_mapped_IO_28_29();
    }
    label$4 : {
     $0 = HEAP32[(51344 + 48 | 0) >> 2] | 0;
     if (($0 & 3 | 0 | 0) != (1 | 0)) {
      break label$4
     }
     if (!(($0 & (HEAP32[(51344 + 52 | 0) >> 2] | 0) | 0) & 65280 | 0)) {
      break label$4
     }
     raise_exception_28int_29(0 | 0);
     handle_exception_28_29();
    }
    $6 = 0;
    HEAP8[(0 + 50640 | 0) >> 0] = 0;
    label$5 : {
     if (($5 | 0) < (1 | 0)) {
      break label$5
     }
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          $7 = HEAPU8[(0 + 50640 | 0) >> 0] | 0;
          if ($7) {
           break label$10
          }
          HEAP32[(0 + 50632 | 0) >> 2] = 0;
          HEAP32[(0 + 50672 | 0) >> 2] = 0;
          $0 = read_mem_inst_28unsigned_20int_29(HEAP32[(0 + 50808 | 0) >> 2] | 0 | 0) | 0;
          label$11 : {
           if (!(HEAP32[(0 + 50632 | 0) >> 2] | 0)) {
            break label$11
           }
           HEAP32[(0 + 50632 | 0) >> 2] = 0;
           break label$8;
          }
          label$12 : {
           if ($0) {
            break label$12
           }
           $0 = 0;
           HEAP32[$3 >> 2] = HEAP32[(0 + 50808 | 0) >> 2] | 0;
           run_error_28char__2c_20____29(5019 | 0, $3 | 0);
           break label$1;
          }
          label$13 : {
           $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
           if (!$8) {
            break label$13
           }
           $8 = HEAP32[($8 + 4 | 0) >> 2] | 0;
           if (!$8) {
            break label$13
           }
           if (HEAP32[($8 + 4 | 0) >> 2] | 0) {
            break label$13
           }
           $0 = 0;
           $6 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
           HEAP32[($3 + 36 | 0) >> 2] = inst_to_string_28unsigned_20int_29($6 | 0) | 0;
           HEAP32[($3 + 32 | 0) >> 2] = $6;
           run_error_28char__2c_20____29(5065 | 0, $3 + 32 | 0 | 0);
           break label$1;
          }
          label$14 : {
           if (!$2) {
            break label$14
           }
           print_inst_28unsigned_20int_29(HEAP32[(0 + 50808 | 0) >> 2] | 0 | 0);
          }
          label$15 : {
           $8 = HEAPU8[(0 + 50430 | 0) >> 0] | 0;
           if (!$8) {
            break label$15
           }
           label$16 : {
            $9 = HEAP32[(0 + 50652 | 0) >> 2] | 0;
            if (!$9) {
             break label$16
            }
            HEAP32[$9 >> 2] = HEAP32[(0 + 50656 | 0) >> 2] | 0;
           }
           HEAP32[(0 + 50652 | 0) >> 2] = HEAP32[(0 + 50644 | 0) >> 2] | 0;
           HEAP32[(0 + 50656 | 0) >> 2] = HEAP32[(0 + 50648 | 0) >> 2] | 0;
           HEAP32[(0 + 50644 | 0) >> 2] = 0;
          }
          label$17 : {
           label$18 : {
            label$19 : {
             label$20 : {
              label$21 : {
               label$22 : {
                label$23 : {
                 label$24 : {
                  label$25 : {
                   label$26 : {
                    label$27 : {
                     label$28 : {
                      label$29 : {
                       label$30 : {
                        label$31 : {
                         label$32 : {
                          label$33 : {
                           label$34 : {
                            label$35 : {
                             label$36 : {
                              label$37 : {
                               label$38 : {
                                label$39 : {
                                 label$40 : {
                                  label$41 : {
                                   label$42 : {
                                    label$43 : {
                                     label$44 : {
                                      label$45 : {
                                       label$46 : {
                                        label$47 : {
                                         label$48 : {
                                          label$49 : {
                                           label$50 : {
                                            label$51 : {
                                             label$52 : {
                                              label$53 : {
                                               label$54 : {
                                                label$55 : {
                                                 label$56 : {
                                                  label$57 : {
                                                   label$58 : {
                                                    label$59 : {
                                                     label$60 : {
                                                      label$61 : {
                                                       label$62 : {
                                                        label$63 : {
                                                         label$64 : {
                                                          label$65 : {
                                                           label$66 : {
                                                            label$67 : {
                                                             label$68 : {
                                                              label$69 : {
                                                               label$70 : {
                                                                label$71 : {
                                                                 label$72 : {
                                                                  label$73 : {
                                                                   label$74 : {
                                                                    label$75 : {
                                                                     label$76 : {
                                                                      label$77 : {
                                                                       label$78 : {
                                                                        label$79 : {
                                                                         label$80 : {
                                                                          label$81 : {
                                                                           label$82 : {
                                                                            label$83 : {
                                                                             label$84 : {
                                                                              label$85 : {
                                                                               label$86 : {
                                                                                label$87 : {
                                                                                 label$88 : {
                                                                                  label$89 : {
                                                                                   label$90 : {
                                                                                    label$91 : {
                                                                                     label$92 : {
                                                                                      label$93 : {
                                                                                       label$94 : {
                                                                                        label$95 : {
                                                                                         label$96 : {
                                                                                          label$97 : {
                                                                                           label$98 : {
                                                                                            label$99 : {
                                                                                             label$100 : {
                                                                                              label$101 : {
                                                                                               label$102 : {
                                                                                                label$103 : {
                                                                                                 label$104 : {
                                                                                                  label$105 : {
                                                                                                   label$106 : {
                                                                                                    label$107 : {
                                                                                                     label$108 : {
                                                                                                      label$109 : {
                                                                                                       label$110 : {
                                                                                                        label$111 : {
                                                                                                         label$112 : {
                                                                                                          label$113 : {
                                                                                                           label$114 : {
                                                                                                            label$115 : {
                                                                                                             label$116 : {
                                                                                                              label$117 : {
                                                                                                               label$118 : {
                                                                                                                label$119 : {
                                                                                                                 label$120 : {
                                                                                                                  label$121 : {
                                                                                                                   label$122 : {
                                                                                                                    label$123 : {
                                                                                                                     label$124 : {
                                                                                                                      label$125 : {
                                                                                                                       label$126 : {
                                                                                                                        label$127 : {
                                                                                                                         label$128 : {
                                                                                                                          label$129 : {
                                                                                                                           label$130 : {
                                                                                                                            label$131 : {
                                                                                                                             label$132 : {
                                                                                                                              label$133 : {
                                                                                                                               label$134 : {
                                                                                                                                label$135 : {
                                                                                                                                 label$136 : {
                                                                                                                                  label$137 : {
                                                                                                                                   label$138 : {
                                                                                                                                    label$139 : {
                                                                                                                                     label$140 : {
                                                                                                                                      label$141 : {
                                                                                                                                       label$142 : {
                                                                                                                                        label$143 : {
                                                                                                                                         label$144 : {
                                                                                                                                          label$145 : {
                                                                                                                                           label$146 : {
                                                                                                                                            label$147 : {
                                                                                                                                             label$148 : {
                                                                                                                                              label$149 : {
                                                                                                                                               label$150 : {
                                                                                                                                                label$151 : {
                                                                                                                                                 label$152 : {
                                                                                                                                                  label$153 : {
                                                                                                                                                   label$154 : {
                                                                                                                                                    label$155 : {
                                                                                                                                                     label$156 : {
                                                                                                                                                      label$157 : {
                                                                                                                                                       label$158 : {
                                                                                                                                                        label$159 : {
                                                                                                                                                         label$160 : {
                                                                                                                                                          label$161 : {
                                                                                                                                                           label$162 : {
                                                                                                                                                            label$163 : {
                                                                                                                                                             label$164 : {
                                                                                                                                                              label$165 : {
                                                                                                                                                               label$166 : {
                                                                                                                                                                label$167 : {
                                                                                                                                                                 label$168 : {
                                                                                                                                                                  label$169 : {
                                                                                                                                                                   label$170 : {
                                                                                                                                                                    label$171 : {
                                                                                                                                                                     label$172 : {
                                                                                                                                                                      label$173 : {
                                                                                                                                                                       label$174 : {
                                                                                                                                                                        label$175 : {
                                                                                                                                                                         $9 = HEAP16[$0 >> 1] | 0;
                                                                                                                                                                         switch ($9 + -266 | 0 | 0) {
                                                                                                                                                                         case 243:
                                                                                                                                                                          break label$100;
                                                                                                                                                                         case 242:
                                                                                                                                                                          break label$101;
                                                                                                                                                                         case 241:
                                                                                                                                                                          break label$102;
                                                                                                                                                                         case 240:
                                                                                                                                                                          break label$103;
                                                                                                                                                                         case 239:
                                                                                                                                                                          break label$104;
                                                                                                                                                                         case 235:
                                                                                                                                                                          break label$105;
                                                                                                                                                                         case 232:
                                                                                                                                                                          break label$106;
                                                                                                                                                                         case 231:
                                                                                                                                                                          break label$107;
                                                                                                                                                                         case 222:
                                                                                                                                                                          break label$108;
                                                                                                                                                                         case 210:
                                                                                                                                                                          break label$109;
                                                                                                                                                                         case 209:
                                                                                                                                                                          break label$110;
                                                                                                                                                                         case 208:
                                                                                                                                                                          break label$111;
                                                                                                                                                                         case 198:
                                                                                                                                                                          break label$112;
                                                                                                                                                                         case 197:
                                                                                                                                                                          break label$113;
                                                                                                                                                                         case 196:
                                                                                                                                                                          break label$114;
                                                                                                                                                                         case 192:
                                                                                                                                                                          break label$115;
                                                                                                                                                                         case 191:
                                                                                                                                                                          break label$116;
                                                                                                                                                                         case 188:
                                                                                                                                                                          break label$117;
                                                                                                                                                                         case 186:
                                                                                                                                                                          break label$118;
                                                                                                                                                                         case 182:
                                                                                                                                                                         case 185:
                                                                                                                                                                          break label$119;
                                                                                                                                                                         case 178:
                                                                                                                                                                          break label$120;
                                                                                                                                                                         case 170:
                                                                                                                                                                          break label$121;
                                                                                                                                                                         case 161:
                                                                                                                                                                          break label$122;
                                                                                                                                                                         case 160:
                                                                                                                                                                          break label$123;
                                                                                                                                                                         case 157:
                                                                                                                                                                          break label$124;
                                                                                                                                                                         case 155:
                                                                                                                                                                          break label$125;
                                                                                                                                                                         case 151:
                                                                                                                                                                         case 154:
                                                                                                                                                                          break label$126;
                                                                                                                                                                         case 148:
                                                                                                                                                                          break label$127;
                                                                                                                                                                         case 147:
                                                                                                                                                                          break label$128;
                                                                                                                                                                         case 146:
                                                                                                                                                                          break label$129;
                                                                                                                                                                         case 137:
                                                                                                                                                                          break label$130;
                                                                                                                                                                         case 144:
                                                                                                                                                                          break label$131;
                                                                                                                                                                         case 142:
                                                                                                                                                                          break label$132;
                                                                                                                                                                         case 141:
                                                                                                                                                                          break label$133;
                                                                                                                                                                         case 140:
                                                                                                                                                                          break label$134;
                                                                                                                                                                         case 139:
                                                                                                                                                                          break label$135;
                                                                                                                                                                         case 135:
                                                                                                                                                                          break label$136;
                                                                                                                                                                         case 134:
                                                                                                                                                                          break label$137;
                                                                                                                                                                         case 133:
                                                                                                                                                                          break label$138;
                                                                                                                                                                         case 131:
                                                                                                                                                                          break label$139;
                                                                                                                                                                         case 129:
                                                                                                                                                                          break label$140;
                                                                                                                                                                         case 128:
                                                                                                                                                                          break label$141;
                                                                                                                                                                         case 121:
                                                                                                                                                                          break label$142;
                                                                                                                                                                         case 118:
                                                                                                                                                                          break label$143;
                                                                                                                                                                         case 116:
                                                                                                                                                                          break label$144;
                                                                                                                                                                         case 99:
                                                                                                                                                                          break label$145;
                                                                                                                                                                         case 97:
                                                                                                                                                                          break label$146;
                                                                                                                                                                         case 96:
                                                                                                                                                                          break label$147;
                                                                                                                                                                         case 95:
                                                                                                                                                                          break label$148;
                                                                                                                                                                         case 94:
                                                                                                                                                                          break label$149;
                                                                                                                                                                         case 93:
                                                                                                                                                                          break label$150;
                                                                                                                                                                         case 91:
                                                                                                                                                                          break label$151;
                                                                                                                                                                         case 37:
                                                                                                                                                                          break label$152;
                                                                                                                                                                         case 36:
                                                                                                                                                                          break label$153;
                                                                                                                                                                         case 35:
                                                                                                                                                                          break label$154;
                                                                                                                                                                         case 33:
                                                                                                                                                                          break label$155;
                                                                                                                                                                         case 32:
                                                                                                                                                                          break label$156;
                                                                                                                                                                         case 34:
                                                                                                                                                                          break label$157;
                                                                                                                                                                         case 31:
                                                                                                                                                                          break label$158;
                                                                                                                                                                         case 30:
                                                                                                                                                                          break label$159;
                                                                                                                                                                         case 29:
                                                                                                                                                                          break label$160;
                                                                                                                                                                         case 28:
                                                                                                                                                                          break label$161;
                                                                                                                                                                         case 27:
                                                                                                                                                                          break label$162;
                                                                                                                                                                         case 25:
                                                                                                                                                                          break label$163;
                                                                                                                                                                         case 24:
                                                                                                                                                                          break label$164;
                                                                                                                                                                         case 26:
                                                                                                                                                                          break label$165;
                                                                                                                                                                         case 23:
                                                                                                                                                                          break label$166;
                                                                                                                                                                         case 22:
                                                                                                                                                                          break label$167;
                                                                                                                                                                         case 21:
                                                                                                                                                                          break label$168;
                                                                                                                                                                         case 17:
                                                                                                                                                                         case 18:
                                                                                                                                                                         case 19:
                                                                                                                                                                         case 20:
                                                                                                                                                                          break label$169;
                                                                                                                                                                         case 267:
                                                                                                                                                                          break label$17;
                                                                                                                                                                         case 12:
                                                                                                                                                                          break label$170;
                                                                                                                                                                         case 11:
                                                                                                                                                                          break label$171;
                                                                                                                                                                         case 9:
                                                                                                                                                                          break label$172;
                                                                                                                                                                         case 8:
                                                                                                                                                                          break label$173;
                                                                                                                                                                         case 7:
                                                                                                                                                                          break label$174;
                                                                                                                                                                         case 4:
                                                                                                                                                                          break label$175;
                                                                                                                                                                         case 287:
                                                                                                                                                                          break label$19;
                                                                                                                                                                         case 286:
                                                                                                                                                                          break label$20;
                                                                                                                                                                         case 260:
                                                                                                                                                                          break label$21;
                                                                                                                                                                         case 253:
                                                                                                                                                                          break label$22;
                                                                                                                                                                         case 256:
                                                                                                                                                                          break label$23;
                                                                                                                                                                         case 247:
                                                                                                                                                                          break label$24;
                                                                                                                                                                         case 246:
                                                                                                                                                                          break label$25;
                                                                                                                                                                         case 234:
                                                                                                                                                                          break label$26;
                                                                                                                                                                         case 228:
                                                                                                                                                                          break label$27;
                                                                                                                                                                         case 227:
                                                                                                                                                                          break label$28;
                                                                                                                                                                         case 199:
                                                                                                                                                                          break label$29;
                                                                                                                                                                         case 201:
                                                                                                                                                                          break label$30;
                                                                                                                                                                         case 193:
                                                                                                                                                                          break label$31;
                                                                                                                                                                         case 195:
                                                                                                                                                                          break label$32;
                                                                                                                                                                         case 187:
                                                                                                                                                                          break label$33;
                                                                                                                                                                         case 180:
                                                                                                                                                                          break label$34;
                                                                                                                                                                         case 177:
                                                                                                                                                                          break label$35;
                                                                                                                                                                         case 176:
                                                                                                                                                                          break label$36;
                                                                                                                                                                         case 173:
                                                                                                                                                                          break label$37;
                                                                                                                                                                         case 174:
                                                                                                                                                                          break label$38;
                                                                                                                                                                         case 172:
                                                                                                                                                                          break label$39;
                                                                                                                                                                         case 169:
                                                                                                                                                                          break label$40;
                                                                                                                                                                         case 168:
                                                                                                                                                                          break label$41;
                                                                                                                                                                         case 165:
                                                                                                                                                                          break label$42;
                                                                                                                                                                         case 166:
                                                                                                                                                                          break label$43;
                                                                                                                                                                         case 162:
                                                                                                                                                                          break label$44;
                                                                                                                                                                         case 164:
                                                                                                                                                                          break label$45;
                                                                                                                                                                         case 156:
                                                                                                                                                                          break label$46;
                                                                                                                                                                         case 145:
                                                                                                                                                                          break label$47;
                                                                                                                                                                         case 136:
                                                                                                                                                                          break label$48;
                                                                                                                                                                         case 126:
                                                                                                                                                                          break label$49;
                                                                                                                                                                         case 125:
                                                                                                                                                                          break label$50;
                                                                                                                                                                         case 115:
                                                                                                                                                                          break label$51;
                                                                                                                                                                         case 117:
                                                                                                                                                                          break label$52;
                                                                                                                                                                         case 112:
                                                                                                                                                                          break label$53;
                                                                                                                                                                         case 111:
                                                                                                                                                                          break label$54;
                                                                                                                                                                         case 110:
                                                                                                                                                                          break label$55;
                                                                                                                                                                         case 106:
                                                                                                                                                                          break label$56;
                                                                                                                                                                         case 102:
                                                                                                                                                                          break label$57;
                                                                                                                                                                         case 101:
                                                                                                                                                                          break label$58;
                                                                                                                                                                         case 90:
                                                                                                                                                                          break label$59;
                                                                                                                                                                         case 89:
                                                                                                                                                                          break label$60;
                                                                                                                                                                         case 98:
                                                                                                                                                                          break label$61;
                                                                                                                                                                         case 92:
                                                                                                                                                                          break label$62;
                                                                                                                                                                         case 38:
                                                                                                                                                                         case 41:
                                                                                                                                                                         case 44:
                                                                                                                                                                         case 47:
                                                                                                                                                                         case 50:
                                                                                                                                                                         case 53:
                                                                                                                                                                         case 56:
                                                                                                                                                                         case 59:
                                                                                                                                                                         case 62:
                                                                                                                                                                         case 65:
                                                                                                                                                                         case 68:
                                                                                                                                                                         case 71:
                                                                                                                                                                         case 74:
                                                                                                                                                                         case 77:
                                                                                                                                                                         case 80:
                                                                                                                                                                         case 83:
                                                                                                                                                                          break label$63;
                                                                                                                                                                         case 40:
                                                                                                                                                                         case 43:
                                                                                                                                                                         case 46:
                                                                                                                                                                         case 49:
                                                                                                                                                                         case 52:
                                                                                                                                                                         case 55:
                                                                                                                                                                         case 58:
                                                                                                                                                                         case 61:
                                                                                                                                                                         case 64:
                                                                                                                                                                         case 67:
                                                                                                                                                                         case 70:
                                                                                                                                                                         case 73:
                                                                                                                                                                         case 76:
                                                                                                                                                                         case 79:
                                                                                                                                                                         case 82:
                                                                                                                                                                         case 85:
                                                                                                                                                                          break label$64;
                                                                                                                                                                         case 13:
                                                                                                                                                                         case 14:
                                                                                                                                                                         case 15:
                                                                                                                                                                         case 16:
                                                                                                                                                                          break label$65;
                                                                                                                                                                         case 3:
                                                                                                                                                                          break label$66;
                                                                                                                                                                         case 6:
                                                                                                                                                                          break label$67;
                                                                                                                                                                         case 0:
                                                                                                                                                                          break label$68;
                                                                                                                                                                         case 2:
                                                                                                                                                                          break label$69;
                                                                                                                                                                         case 291:
                                                                                                                                                                          break label$70;
                                                                                                                                                                         case 290:
                                                                                                                                                                          break label$71;
                                                                                                                                                                         case 283:
                                                                                                                                                                          break label$72;
                                                                                                                                                                         case 282:
                                                                                                                                                                          break label$73;
                                                                                                                                                                         case 281:
                                                                                                                                                                          break label$74;
                                                                                                                                                                         case 280:
                                                                                                                                                                          break label$75;
                                                                                                                                                                         case 279:
                                                                                                                                                                          break label$76;
                                                                                                                                                                         case 278:
                                                                                                                                                                          break label$77;
                                                                                                                                                                         case 277:
                                                                                                                                                                          break label$78;
                                                                                                                                                                         case 276:
                                                                                                                                                                          break label$79;
                                                                                                                                                                         case 275:
                                                                                                                                                                          break label$80;
                                                                                                                                                                         case 274:
                                                                                                                                                                          break label$81;
                                                                                                                                                                         case 273:
                                                                                                                                                                          break label$82;
                                                                                                                                                                         case 272:
                                                                                                                                                                          break label$83;
                                                                                                                                                                         case 271:
                                                                                                                                                                          break label$84;
                                                                                                                                                                         case 270:
                                                                                                                                                                          break label$85;
                                                                                                                                                                         case 269:
                                                                                                                                                                          break label$86;
                                                                                                                                                                         case 268:
                                                                                                                                                                          break label$87;
                                                                                                                                                                         case 263:
                                                                                                                                                                          break label$88;
                                                                                                                                                                         case 262:
                                                                                                                                                                          break label$89;
                                                                                                                                                                         case 86:
                                                                                                                                                                         case 214:
                                                                                                                                                                         case 265:
                                                                                                                                                                          break label$9;
                                                                                                                                                                         case 261:
                                                                                                                                                                          break label$90;
                                                                                                                                                                         case 259:
                                                                                                                                                                          break label$91;
                                                                                                                                                                         case 257:
                                                                                                                                                                          break label$92;
                                                                                                                                                                         case 254:
                                                                                                                                                                          break label$93;
                                                                                                                                                                         case 251:
                                                                                                                                                                          break label$94;
                                                                                                                                                                         case 250:
                                                                                                                                                                          break label$95;
                                                                                                                                                                         case 249:
                                                                                                                                                                          break label$96;
                                                                                                                                                                         case 248:
                                                                                                                                                                          break label$97;
                                                                                                                                                                         case 245:
                                                                                                                                                                          break label$98;
                                                                                                                                                                         case 244:
                                                                                                                                                                          break label$99;
                                                                                                                                                                         default:
                                                                                                                                                                          break label$18;
                                                                                                                                                                         };
                                                                                                                                                                        }
                                                                                                                                                                        $8 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                                                        $9 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                                                        $7 = $8 + $9 | 0;
                                                                                                                                                                        label$176 : {
                                                                                                                                                                         $9 = $9 & -2147483648 | 0;
                                                                                                                                                                         if (($9 | 0) != ($8 & -2147483648 | 0 | 0)) {
                                                                                                                                                                          break label$176
                                                                                                                                                                         }
                                                                                                                                                                         if (($9 | 0) == ($7 & -2147483648 | 0 | 0)) {
                                                                                                                                                                          break label$176
                                                                                                                                                                         }
                                                                                                                                                                         raise_exception_28int_29(12 | 0);
                                                                                                                                                                         break label$9;
                                                                                                                                                                        }
                                                                                                                                                                        HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                                                                                                        break label$9;
                                                                                                                                                                       }
                                                                                                                                                                       $8 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                                                       $9 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                                       $7 = $8 + $9 | 0;
                                                                                                                                                                       label$177 : {
                                                                                                                                                                        $8 = $8 & -2147483648 | 0;
                                                                                                                                                                        if (($8 | 0) != ($9 & -2147483648 | 0 | 0)) {
                                                                                                                                                                         break label$177
                                                                                                                                                                        }
                                                                                                                                                                        if (($8 | 0) == ($7 & -2147483648 | 0 | 0)) {
                                                                                                                                                                         break label$177
                                                                                                                                                                        }
                                                                                                                                                                        raise_exception_28int_29(12 | 0);
                                                                                                                                                                        break label$9;
                                                                                                                                                                       }
                                                                                                                                                                       HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                                                                                                       break label$9;
                                                                                                                                                                      }
                                                                                                                                                                      HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                                                                                                                                      break label$9;
                                                                                                                                                                     }
                                                                                                                                                                     HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
                                                                                                                                                                     break label$9;
                                                                                                                                                                    }
                                                                                                                                                                    HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) & (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
                                                                                                                                                                    break label$9;
                                                                                                                                                                   }
                                                                                                                                                                   HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) & (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                                                                                                                                   break label$9;
                                                                                                                                                                  }
                                                                                                                                                                  raise_exception_28int_29(11 | 0);
                                                                                                                                                                  break label$9;
                                                                                                                                                                 }
                                                                                                                                                                 if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                                                                                                                  break label$9
                                                                                                                                                                 }
                                                                                                                                                                 $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                                 $7 = $0 << 2 | 0;
                                                                                                                                                                 $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                                 $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                                 $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                                 $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                                 label$178 : {
                                                                                                                                                                  if (!$7) {
                                                                                                                                                                   break label$178
                                                                                                                                                                  }
                                                                                                                                                                  HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                                  run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                                  HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                                 }
                                                                                                                                                                 HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                                 break label$9;
                                                                                                                                                                }
                                                                                                                                                                $7 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                                label$179 : {
                                                                                                                                                                 if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                                                                                                                  break label$179
                                                                                                                                                                 }
                                                                                                                                                                 $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                                 $8 = $0 << 2 | 0;
                                                                                                                                                                 $0 = ($0 & 8192 | 0 ? $8 | -65536 | 0 : $8) + $7 | 0;
                                                                                                                                                                 $8 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                                 $0 = $8 ? $0 + 4 | 0 : $0;
                                                                                                                                                                 label$180 : {
                                                                                                                                                                  if (!$8) {
                                                                                                                                                                   break label$180
                                                                                                                                                                  }
                                                                                                                                                                  HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                                  run_spim_28unsigned_20int_2c_20int_2c_20bool_29($7 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                                  HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                                 }
                                                                                                                                                                 HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                                 break label$9;
                                                                                                                                                                }
                                                                                                                                                                HEAP32[(0 + 50808 | 0) >> 2] = $7 + 4 | 0;
                                                                                                                                                                break label$9;
                                                                                                                                                               }
                                                                                                                                                               if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                                                                                                                                                                break label$9
                                                                                                                                                               }
                                                                                                                                                               $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                               $7 = $0 << 2 | 0;
                                                                                                                                                               $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                               $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                               $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                               $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                               label$181 : {
                                                                                                                                                                if (!$7) {
                                                                                                                                                                 break label$181
                                                                                                                                                                }
                                                                                                                                                                HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                                run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                                HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                               }
                                                                                                                                                               HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                               break label$9;
                                                                                                                                                              }
                                                                                                                                                              label$182 : {
                                                                                                                                                               if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                                                                                                                                                                break label$182
                                                                                                                                                               }
                                                                                                                                                               $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                               $7 = $0 << 2 | 0;
                                                                                                                                                               $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                               $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                               $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                               $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                               label$183 : {
                                                                                                                                                                if (!$7) {
                                                                                                                                                                 break label$183
                                                                                                                                                                }
                                                                                                                                                                HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                                run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                                HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                               }
                                                                                                                                                               HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                               break label$9;
                                                                                                                                                              }
                                                                                                                                                              HEAP32[(0 + 50808 | 0) >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0;
                                                                                                                                                              break label$9;
                                                                                                                                                             }
                                                                                                                                                             $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                             $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                             HEAP32[(50672 + 124 | 0) >> 2] = ($7 ? 8 : 4) + $8 | 0;
                                                                                                                                                             if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                                                                                                                                                              break label$9
                                                                                                                                                             }
                                                                                                                                                             $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                             $9 = $0 << 2 | 0;
                                                                                                                                                             $0 = ($0 & 8192 | 0 ? $9 | -65536 | 0 : $9) + $8 | 0;
                                                                                                                                                             $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                             label$184 : {
                                                                                                                                                              if (!$7) {
                                                                                                                                                               break label$184
                                                                                                                                                              }
                                                                                                                                                              HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                              run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                              HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                             }
                                                                                                                                                             HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                             break label$9;
                                                                                                                                                            }
                                                                                                                                                            $8 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                            $7 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                            HEAP32[(50672 + 124 | 0) >> 2] = ($8 ? 8 : 4) + $7 | 0;
                                                                                                                                                            label$185 : {
                                                                                                                                                             if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (0 | 0)) {
                                                                                                                                                              break label$185
                                                                                                                                                             }
                                                                                                                                                             $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                             $9 = $0 << 2 | 0;
                                                                                                                                                             $0 = ($0 & 8192 | 0 ? $9 | -65536 | 0 : $9) + $7 | 0;
                                                                                                                                                             $0 = $8 ? $0 + 4 | 0 : $0;
                                                                                                                                                             label$186 : {
                                                                                                                                                              if (!$8) {
                                                                                                                                                               break label$186
                                                                                                                                                              }
                                                                                                                                                              HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                              run_spim_28unsigned_20int_2c_20int_2c_20bool_29($7 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                              HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                             }
                                                                                                                                                             HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                             break label$9;
                                                                                                                                                            }
                                                                                                                                                            HEAP32[(0 + 50808 | 0) >> 2] = $7 + 4 | 0;
                                                                                                                                                            break label$9;
                                                                                                                                                           }
                                                                                                                                                           if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (1 | 0)) {
                                                                                                                                                            break label$9
                                                                                                                                                           }
                                                                                                                                                           $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                           $7 = $0 << 2 | 0;
                                                                                                                                                           $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                           $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                           $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                           $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                           label$187 : {
                                                                                                                                                            if (!$7) {
                                                                                                                                                             break label$187
                                                                                                                                                            }
                                                                                                                                                            HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                            run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                            HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                           }
                                                                                                                                                           HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                           break label$9;
                                                                                                                                                          }
                                                                                                                                                          label$188 : {
                                                                                                                                                           if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (1 | 0)) {
                                                                                                                                                            break label$188
                                                                                                                                                           }
                                                                                                                                                           $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                           $7 = $0 << 2 | 0;
                                                                                                                                                           $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                           $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                           $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                           $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                           label$189 : {
                                                                                                                                                            if (!$7) {
                                                                                                                                                             break label$189
                                                                                                                                                            }
                                                                                                                                                            HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                            run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                            HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                           }
                                                                                                                                                           HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                           break label$9;
                                                                                                                                                          }
                                                                                                                                                          HEAP32[(0 + 50808 | 0) >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0;
                                                                                                                                                          break label$9;
                                                                                                                                                         }
                                                                                                                                                         if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (0 | 0)) {
                                                                                                                                                          break label$9
                                                                                                                                                         }
                                                                                                                                                         $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                         $7 = $0 << 2 | 0;
                                                                                                                                                         $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                         $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                         $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                         $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                         label$190 : {
                                                                                                                                                          if (!$7) {
                                                                                                                                                           break label$190
                                                                                                                                                          }
                                                                                                                                                          HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                          run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                          HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                         }
                                                                                                                                                         HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                         break label$9;
                                                                                                                                                        }
                                                                                                                                                        label$191 : {
                                                                                                                                                         if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (0 | 0)) {
                                                                                                                                                          break label$191
                                                                                                                                                         }
                                                                                                                                                         $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                         $7 = $0 << 2 | 0;
                                                                                                                                                         $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                         $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                         $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                         $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                         label$192 : {
                                                                                                                                                          if (!$7) {
                                                                                                                                                           break label$192
                                                                                                                                                          }
                                                                                                                                                          HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                          run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                          HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                         }
                                                                                                                                                         HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                         break label$9;
                                                                                                                                                        }
                                                                                                                                                        HEAP32[(0 + 50808 | 0) >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0;
                                                                                                                                                        break label$9;
                                                                                                                                                       }
                                                                                                                                                       if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                                                                                                                                                        break label$9
                                                                                                                                                       }
                                                                                                                                                       $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                       $7 = $0 << 2 | 0;
                                                                                                                                                       $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                       $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                       $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                       $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                       label$193 : {
                                                                                                                                                        if (!$7) {
                                                                                                                                                         break label$193
                                                                                                                                                        }
                                                                                                                                                        HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                        run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                        HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                       }
                                                                                                                                                       HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                       break label$9;
                                                                                                                                                      }
                                                                                                                                                      label$194 : {
                                                                                                                                                       if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                                                                                                                                                        break label$194
                                                                                                                                                       }
                                                                                                                                                       $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                       $7 = $0 << 2 | 0;
                                                                                                                                                       $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                       $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                       $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                       $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                       label$195 : {
                                                                                                                                                        if (!$7) {
                                                                                                                                                         break label$195
                                                                                                                                                        }
                                                                                                                                                        HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                        run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                        HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                       }
                                                                                                                                                       HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                       break label$9;
                                                                                                                                                      }
                                                                                                                                                      HEAP32[(0 + 50808 | 0) >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0;
                                                                                                                                                      break label$9;
                                                                                                                                                     }
                                                                                                                                                     $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                     $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                     HEAP32[(50672 + 124 | 0) >> 2] = ($7 ? 8 : 4) + $8 | 0;
                                                                                                                                                     if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                                                                                                                                                      break label$9
                                                                                                                                                     }
                                                                                                                                                     $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                     $9 = $0 << 2 | 0;
                                                                                                                                                     $0 = ($0 & 8192 | 0 ? $9 | -65536 | 0 : $9) + $8 | 0;
                                                                                                                                                     $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                     label$196 : {
                                                                                                                                                      if (!$7) {
                                                                                                                                                       break label$196
                                                                                                                                                      }
                                                                                                                                                      HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                      run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                      HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                     }
                                                                                                                                                     HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                     break label$9;
                                                                                                                                                    }
                                                                                                                                                    $8 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                    $7 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                    HEAP32[(50672 + 124 | 0) >> 2] = ($8 ? 8 : 4) + $7 | 0;
                                                                                                                                                    label$197 : {
                                                                                                                                                     if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                                                                                                                                                      break label$197
                                                                                                                                                     }
                                                                                                                                                     $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                     $9 = $0 << 2 | 0;
                                                                                                                                                     $0 = ($0 & 8192 | 0 ? $9 | -65536 | 0 : $9) + $7 | 0;
                                                                                                                                                     $0 = $8 ? $0 + 4 | 0 : $0;
                                                                                                                                                     label$198 : {
                                                                                                                                                      if (!$8) {
                                                                                                                                                       break label$198
                                                                                                                                                      }
                                                                                                                                                      HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                      run_spim_28unsigned_20int_2c_20int_2c_20bool_29($7 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                      HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                     }
                                                                                                                                                     HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                     break label$9;
                                                                                                                                                    }
                                                                                                                                                    HEAP32[(0 + 50808 | 0) >> 2] = $7 + 4 | 0;
                                                                                                                                                    break label$9;
                                                                                                                                                   }
                                                                                                                                                   if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                                                                                                    break label$9
                                                                                                                                                   }
                                                                                                                                                   $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                   $7 = $0 << 2 | 0;
                                                                                                                                                   $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                   $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                                                                                                                   $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                   $0 = $7 ? $0 + 4 | 0 : $0;
                                                                                                                                                   label$199 : {
                                                                                                                                                    if (!$7) {
                                                                                                                                                     break label$199
                                                                                                                                                    }
                                                                                                                                                    HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                    run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                    HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                   }
                                                                                                                                                   HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                   break label$9;
                                                                                                                                                  }
                                                                                                                                                  $7 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                                  label$200 : {
                                                                                                                                                   if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                                                                                                    break label$200
                                                                                                                                                   }
                                                                                                                                                   $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                                                                                                                   $8 = $0 << 2 | 0;
                                                                                                                                                   $0 = ($0 & 8192 | 0 ? $8 | -65536 | 0 : $8) + $7 | 0;
                                                                                                                                                   $8 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                                   $0 = $8 ? $0 + 4 | 0 : $0;
                                                                                                                                                   label$201 : {
                                                                                                                                                    if (!$8) {
                                                                                                                                                     break label$201
                                                                                                                                                    }
                                                                                                                                                    HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                                    run_spim_28unsigned_20int_2c_20int_2c_20bool_29($7 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                                    HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                                   }
                                                                                                                                                   HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                                   break label$9;
                                                                                                                                                  }
                                                                                                                                                  HEAP32[(0 + 50808 | 0) >> 2] = $7 + 4 | 0;
                                                                                                                                                  break label$9;
                                                                                                                                                 }
                                                                                                                                                 $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                                                                                                                                 raise_exception_28int_29(9 | 0);
                                                                                                                                                 $0 = 1;
                                                                                                                                                 if (($7 | 0) != (1 | 0)) {
                                                                                                                                                  break label$9
                                                                                                                                                 }
                                                                                                                                                 break label$1;
                                                                                                                                                }
                                                                                                                                                HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50832 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                                break label$9;
                                                                                                                                               }
                                                                                                                                               raise_exception_28int_29(11 | 0);
                                                                                                                                               break label$9;
                                                                                                                                              }
                                                                                                                                              $10 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                              $8 = 31;
                                                                                                                                              label$202 : {
                                                                                                                                               label$203 : while (1) {
                                                                                                                                                label$204 : {
                                                                                                                                                 $7 = $8;
                                                                                                                                                 if (($10 >>> $7 | 0) & 1 | 0) {
                                                                                                                                                  break label$204
                                                                                                                                                 }
                                                                                                                                                 $9 = $7;
                                                                                                                                                 break label$202;
                                                                                                                                                }
                                                                                                                                                $9 = -1;
                                                                                                                                                $8 = $7 + -1 | 0;
                                                                                                                                                if ($7) {
                                                                                                                                                 continue label$203
                                                                                                                                                }
                                                                                                                                                break label$203;
                                                                                                                                               };
                                                                                                                                              }
                                                                                                                                              HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = 31 - $9 | 0;
                                                                                                                                              break label$9;
                                                                                                                                             }
                                                                                                                                             $9 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                             $8 = 31;
                                                                                                                                             label$205 : {
                                                                                                                                              label$206 : while (1) {
                                                                                                                                               label$207 : {
                                                                                                                                                $7 = $8;
                                                                                                                                                if (!(($9 >>> $7 | 0) & 1 | 0)) {
                                                                                                                                                 break label$207
                                                                                                                                                }
                                                                                                                                                $10 = $7;
                                                                                                                                                break label$205;
                                                                                                                                               }
                                                                                                                                               $10 = -1;
                                                                                                                                               $8 = $7 + -1 | 0;
                                                                                                                                               if ($7) {
                                                                                                                                                continue label$206
                                                                                                                                               }
                                                                                                                                               break label$206;
                                                                                                                                              };
                                                                                                                                             }
                                                                                                                                             HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = 31 - $10 | 0;
                                                                                                                                             break label$9;
                                                                                                                                            }
                                                                                                                                            raise_exception_28int_29(11 | 0);
                                                                                                                                            break label$9;
                                                                                                                                           }
                                                                                                                                           HEAP32[(50832 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                           break label$9;
                                                                                                                                          }
                                                                                                                                          raise_exception_28int_29(11 | 0);
                                                                                                                                          break label$9;
                                                                                                                                         }
                                                                                                                                         $7 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                         if (!$7) {
                                                                                                                                          break label$9
                                                                                                                                         }
                                                                                                                                         $0 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                         label$208 : {
                                                                                                                                          if (($7 | 0) != (-1 | 0)) {
                                                                                                                                           break label$208
                                                                                                                                          }
                                                                                                                                          if (($0 | 0) == (-2147483648 | 0)) {
                                                                                                                                           break label$9
                                                                                                                                          }
                                                                                                                                         }
                                                                                                                                         $8 = ($0 | 0) / ($7 | 0) | 0;
                                                                                                                                         HEAP32[(0 + 50804 | 0) >> 2] = $8;
                                                                                                                                         HEAP32[(0 + 50800 | 0) >> 2] = $0 - Math_imul($8, $7) | 0;
                                                                                                                                         break label$9;
                                                                                                                                        }
                                                                                                                                        $7 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                        if (!$7) {
                                                                                                                                         break label$9
                                                                                                                                        }
                                                                                                                                        $0 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                        label$209 : {
                                                                                                                                         if (($7 | 0) != (-1 | 0)) {
                                                                                                                                          break label$209
                                                                                                                                         }
                                                                                                                                         if (($0 | 0) == (-2147483648 | 0)) {
                                                                                                                                          break label$9
                                                                                                                                         }
                                                                                                                                        }
                                                                                                                                        $8 = ($0 >>> 0) / ($7 >>> 0) | 0;
                                                                                                                                        HEAP32[(0 + 50804 | 0) >> 2] = $8;
                                                                                                                                        HEAP32[(0 + 50800 | 0) >> 2] = $0 - Math_imul($8, $7) | 0;
                                                                                                                                        break label$9;
                                                                                                                                       }
                                                                                                                                       HEAP32[(51344 + 48 | 0) >> 2] = (HEAP32[(51344 + 48 | 0) >> 2] | 0) & -3 | 0;
                                                                                                                                       label$210 : {
                                                                                                                                        if (!(HEAPU8[(0 + 50429 | 0) >> 0] | 0)) {
                                                                                                                                         break label$210
                                                                                                                                        }
                                                                                                                                        HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                        run_spim_28unsigned_20int_2c_20int_2c_20bool_29((HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                        HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                       }
                                                                                                                                       HEAP32[(0 + 50808 | 0) >> 2] = (HEAP32[(51344 + 56 | 0) >> 2] | 0) + -4 | 0;
                                                                                                                                       break label$9;
                                                                                                                                      }
                                                                                                                                      label$211 : {
                                                                                                                                       if (!(HEAPU8[(0 + 50429 | 0) >> 0] | 0)) {
                                                                                                                                        break label$211
                                                                                                                                       }
                                                                                                                                       HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                       run_spim_28unsigned_20int_2c_20int_2c_20bool_29((HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                       HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                      }
                                                                                                                                      HEAP32[(0 + 50808 | 0) >> 2] = ((HEAP32[($0 + 4 | 0) >> 2] | 0) << 2 | 0 | ((HEAP32[(0 + 50808 | 0) >> 2] | 0) & -268435456 | 0) | 0) + -4 | 0;
                                                                                                                                      break label$9;
                                                                                                                                     }
                                                                                                                                     $7 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                                                                                                     $940 = $7 + 8 | 0;
                                                                                                                                     $8 = $7 + 4 | 0;
                                                                                                                                     $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                     HEAP32[(50672 + 124 | 0) >> 2] = $7 ? $940 : $8;
                                                                                                                                     label$212 : {
                                                                                                                                      if (!$7) {
                                                                                                                                       break label$212
                                                                                                                                      }
                                                                                                                                      HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                      run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                      HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                     }
                                                                                                                                     HEAP32[(0 + 50808 | 0) >> 2] = ((HEAP32[($0 + 4 | 0) >> 2] | 0) << 2 | 0 | ((HEAP32[(0 + 50808 | 0) >> 2] | 0) & -268435456 | 0) | 0) + -4 | 0;
                                                                                                                                     break label$9;
                                                                                                                                    }
                                                                                                                                    $7 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                    $968 = 50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                                    $0 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                                                                                                    HEAP32[$968 >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) + ($0 ? 8 : 4) | 0;
                                                                                                                                    label$213 : {
                                                                                                                                     if (!$0) {
                                                                                                                                      break label$213
                                                                                                                                     }
                                                                                                                                     HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                     run_spim_28unsigned_20int_2c_20int_2c_20bool_29((HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                     HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                    }
                                                                                                                                    HEAP32[(0 + 50808 | 0) >> 2] = $7 + -4 | 0;
                                                                                                                                    break label$9;
                                                                                                                                   }
                                                                                                                                   $0 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                                   label$214 : {
                                                                                                                                    if (!(HEAPU8[(0 + 50429 | 0) >> 0] | 0)) {
                                                                                                                                     break label$214
                                                                                                                                    }
                                                                                                                                    HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                                                                                                    run_spim_28unsigned_20int_2c_20int_2c_20bool_29((HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                                                                                                    HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                                                                                                   }
                                                                                                                                   HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                                                                                                   break label$9;
                                                                                                                                  }
                                                                                                                                  label$215 : {
                                                                                                                                   if (!$8) {
                                                                                                                                    break label$215
                                                                                                                                   }
                                                                                                                                   HEAP32[(0 + 50644 | 0) >> 2] = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                                   HEAP32[(0 + 50648 | 0) >> 2] = read_mem_byte_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                                   break label$9;
                                                                                                                                  }
                                                                                                                                  $7 = read_mem_byte_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                                  HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                                                                  break label$9;
                                                                                                                                 }
                                                                                                                                 label$216 : {
                                                                                                                                  if (!$8) {
                                                                                                                                   break label$216
                                                                                                                                  }
                                                                                                                                  HEAP32[(0 + 50644 | 0) >> 2] = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                                  HEAP32[(0 + 50648 | 0) >> 2] = (read_mem_byte_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0) & 255 | 0;
                                                                                                                                  break label$9;
                                                                                                                                 }
                                                                                                                                 $7 = read_mem_byte_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                                 HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7 & 255 | 0;
                                                                                                                                 break label$9;
                                                                                                                                }
                                                                                                                                label$217 : {
                                                                                                                                 if (!$8) {
                                                                                                                                  break label$217
                                                                                                                                 }
                                                                                                                                 HEAP32[(0 + 50644 | 0) >> 2] = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                                 HEAP32[(0 + 50648 | 0) >> 2] = read_mem_half_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                                 break label$9;
                                                                                                                                }
                                                                                                                                $7 = read_mem_half_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                                HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                                                                break label$9;
                                                                                                                               }
                                                                                                                               label$218 : {
                                                                                                                                if (!$8) {
                                                                                                                                 break label$218
                                                                                                                                }
                                                                                                                                HEAP32[(0 + 50644 | 0) >> 2] = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                                HEAP32[(0 + 50648 | 0) >> 2] = (read_mem_half_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0) & 65535 | 0;
                                                                                                                                break label$9;
                                                                                                                               }
                                                                                                                               $7 = read_mem_half_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                               HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7 & 65535 | 0;
                                                                                                                               break label$9;
                                                                                                                              }
                                                                                                                              label$219 : {
                                                                                                                               if (!$8) {
                                                                                                                                break label$219
                                                                                                                               }
                                                                                                                               HEAP32[(0 + 50644 | 0) >> 2] = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                               HEAP32[(0 + 50648 | 0) >> 2] = read_mem_word_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                               break label$9;
                                                                                                                              }
                                                                                                                              $7 = read_mem_word_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                              HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                                                              break label$9;
                                                                                                                             }
                                                                                                                             HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAPU16[($0 + 6 | 0) >> 1] | 0) << 16 | 0;
                                                                                                                             break label$9;
                                                                                                                            }
                                                                                                                            label$220 : {
                                                                                                                             if (!$8) {
                                                                                                                              break label$220
                                                                                                                             }
                                                                                                                             HEAP32[(0 + 50644 | 0) >> 2] = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                             HEAP32[(0 + 50648 | 0) >> 2] = read_mem_word_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                             break label$9;
                                                                                                                            }
                                                                                                                            $7 = read_mem_word_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                                                                                                            HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                                                            break label$9;
                                                                                                                           }
                                                                                                                           raise_exception_28int_29(11 | 0);
                                                                                                                           break label$9;
                                                                                                                          }
                                                                                                                          raise_exception_28int_29(11 | 0);
                                                                                                                          break label$9;
                                                                                                                         }
                                                                                                                         $9 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                         $8 = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                                                                                         $7 = read_mem_word_28unsigned_20int_29($8 & -4 | 0 | 0) | 0;
                                                                                                                         label$221 : {
                                                                                                                          if (HEAP32[(0 + 50632 | 0) >> 2] | 0) {
                                                                                                                           break label$221
                                                                                                                          }
                                                                                                                          label$222 : {
                                                                                                                           switch ($8 & 3 | 0 | 0) {
                                                                                                                           case 0:
                                                                                                                            $7 = $7 << 24 | 0 | ($9 & 16777215 | 0) | 0;
                                                                                                                            break label$221;
                                                                                                                           case 1:
                                                                                                                            $7 = $7 << 16 | 0 | ($9 & 65535 | 0) | 0;
                                                                                                                            break label$221;
                                                                                                                           case 2:
                                                                                                                            break label$222;
                                                                                                                           default:
                                                                                                                            break label$221;
                                                                                                                           };
                                                                                                                          }
                                                                                                                          $7 = $7 << 8 | 0 | ($9 & 255 | 0) | 0;
                                                                                                                         }
                                                                                                                         $0 = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                         label$225 : {
                                                                                                                          if (!(HEAPU8[(0 + 50430 | 0) >> 0] | 0)) {
                                                                                                                           break label$225
                                                                                                                          }
                                                                                                                          HEAP32[(0 + 50648 | 0) >> 2] = $7;
                                                                                                                          HEAP32[(0 + 50644 | 0) >> 2] = $0;
                                                                                                                          break label$9;
                                                                                                                         }
                                                                                                                         HEAP32[$0 >> 2] = $7;
                                                                                                                         break label$9;
                                                                                                                        }
                                                                                                                        $9 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                        $8 = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                                                                                        $7 = read_mem_word_28unsigned_20int_29($8 & -4 | 0 | 0) | 0;
                                                                                                                        label$226 : {
                                                                                                                         if (HEAP32[(0 + 50632 | 0) >> 2] | 0) {
                                                                                                                          break label$226
                                                                                                                         }
                                                                                                                         label$227 : {
                                                                                                                          switch (($8 & 3 | 0) + -1 | 0 | 0) {
                                                                                                                          case 0:
                                                                                                                           $7 = $7 >>> 8 | 0 | ($9 & -16777216 | 0) | 0;
                                                                                                                           break label$226;
                                                                                                                          case 1:
                                                                                                                           $7 = $7 >>> 16 | 0 | ($9 & -65536 | 0) | 0;
                                                                                                                           break label$226;
                                                                                                                          case 2:
                                                                                                                           break label$227;
                                                                                                                          default:
                                                                                                                           break label$226;
                                                                                                                          };
                                                                                                                         }
                                                                                                                         $7 = $7 >>> 24 | 0 | ($9 & -256 | 0) | 0;
                                                                                                                        }
                                                                                                                        $0 = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                                                        label$230 : {
                                                                                                                         if (!(HEAPU8[(0 + 50430 | 0) >> 0] | 0)) {
                                                                                                                          break label$230
                                                                                                                         }
                                                                                                                         HEAP32[(0 + 50648 | 0) >> 2] = $7;
                                                                                                                         HEAP32[(0 + 50644 | 0) >> 2] = $0;
                                                                                                                         break label$9;
                                                                                                                        }
                                                                                                                        HEAP32[$0 >> 2] = $7;
                                                                                                                        break label$9;
                                                                                                                       }
                                                                                                                       $7 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                       $10 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                       $8 = HEAP32[(0 + 50800 | 0) >> 2] | 0;
                                                                                                                       $0 = HEAP32[(0 + 50804 | 0) >> 2] | 0;
                                                                                                                       label$231 : {
                                                                                                                        label$232 : {
                                                                                                                         if (($9 | 0) != (417 | 0)) {
                                                                                                                          break label$232
                                                                                                                         }
                                                                                                                         signed_multiply_28int_2c_20int_29($7 | 0, $10 | 0);
                                                                                                                         break label$231;
                                                                                                                        }
                                                                                                                        unsigned_multiply_28int_2c_20int_29($7 | 0, $10 | 0);
                                                                                                                       }
                                                                                                                       $9 = HEAP32[(0 + 50804 | 0) >> 2] | 0;
                                                                                                                       $7 = $9 + $0 | 0;
                                                                                                                       HEAP32[(0 + 50804 | 0) >> 2] = $7;
                                                                                                                       HEAP32[(0 + 50800 | 0) >> 2] = ((HEAP32[(0 + 50800 | 0) >> 2] | 0) + $8 | 0) + ($7 >>> 0 < $9 >>> 0 | $7 >>> 0 < $0 >>> 0 | 0) | 0;
                                                                                                                       break label$9;
                                                                                                                      }
                                                                                                                      HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(51344 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                      break label$9;
                                                                                                                     }
                                                                                                                     raise_exception_28int_29(11 | 0);
                                                                                                                     break label$9;
                                                                                                                    }
                                                                                                                    HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(0 + 50800 | 0) >> 2] | 0;
                                                                                                                    break label$9;
                                                                                                                   }
                                                                                                                   HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(0 + 50804 | 0) >> 2] | 0;
                                                                                                                   break label$9;
                                                                                                                  }
                                                                                                                  if (!(HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0)) {
                                                                                                                   break label$9
                                                                                                                  }
                                                                                                                  HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                  break label$9;
                                                                                                                 }
                                                                                                                 if (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) {
                                                                                                                  break label$9
                                                                                                                 }
                                                                                                                 HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                 break label$9;
                                                                                                                }
                                                                                                                $8 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                $10 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                                $7 = HEAP32[(0 + 50800 | 0) >> 2] | 0;
                                                                                                                $0 = HEAP32[(0 + 50804 | 0) >> 2] | 0;
                                                                                                                label$233 : {
                                                                                                                 label$234 : {
                                                                                                                  if (($9 | 0) != (448 | 0)) {
                                                                                                                   break label$234
                                                                                                                  }
                                                                                                                  signed_multiply_28int_2c_20int_29($8 | 0, $10 | 0);
                                                                                                                  break label$233;
                                                                                                                 }
                                                                                                                 unsigned_multiply_28int_2c_20int_29($8 | 0, $10 | 0);
                                                                                                                }
                                                                                                                $8 = HEAP32[(0 + 50804 | 0) >> 2] | 0;
                                                                                                                HEAP32[(0 + 50804 | 0) >> 2] = $0 - $8 | 0;
                                                                                                                HEAP32[(0 + 50800 | 0) >> 2] = ($7 - ($0 >>> 0 < $8 >>> 0) | 0) - (HEAP32[(0 + 50800 | 0) >> 2] | 0) | 0;
                                                                                                                break label$9;
                                                                                                               }
                                                                                                               $7 = $0 + 6 | 0;
                                                                                                               HEAP32[(51344 + ((HEAPU8[$7 >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                               label$235 : {
                                                                                                                switch ((HEAPU8[$7 >> 0] | 0) + -11 | 0 | 0) {
                                                                                                                case 0:
                                                                                                                 HEAP32[(51344 + 52 | 0) >> 2] = (HEAP32[(51344 + 52 | 0) >> 2] | 0) & -32769 | 0;
                                                                                                                 break label$9;
                                                                                                                case 1:
                                                                                                                 HEAP32[(51344 + 48 | 0) >> 2] = (HEAP32[(51344 + 48 | 0) >> 2] | 0) & -1073676541 | 0 | 805306384 | 0;
                                                                                                                 break label$9;
                                                                                                                case 2:
                                                                                                                 HEAP32[(51344 + 52 | 0) >> 2] = (HEAP32[(51344 + 52 | 0) >> 2] | 0) & -2147418244 | 0;
                                                                                                                 break label$9;
                                                                                                                case 5:
                                                                                                                 break label$235;
                                                                                                                default:
                                                                                                                 break label$9;
                                                                                                                };
                                                                                                               }
                                                                                                               HEAP32[(51344 + 64 | 0) >> 2] = (HEAP32[(51344 + 64 | 0) >> 2] | 0) & 1033088 | 0;
                                                                                                               break label$9;
                                                                                                              }
                                                                                                              raise_exception_28int_29(11 | 0);
                                                                                                              break label$9;
                                                                                                             }
                                                                                                             HEAP32[(0 + 50800 | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                             break label$9;
                                                                                                            }
                                                                                                            HEAP32[(0 + 50804 | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                            break label$9;
                                                                                                           }
                                                                                                           signed_multiply_28int_2c_20int_29(HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                                                           HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(0 + 50804 | 0) >> 2] | 0;
                                                                                                           break label$9;
                                                                                                          }
                                                                                                          signed_multiply_28int_2c_20int_29(HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                                                          break label$9;
                                                                                                         }
                                                                                                         unsigned_multiply_28int_2c_20int_29(HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                                                         break label$9;
                                                                                                        }
                                                                                                        HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) ^ -1 | 0;
                                                                                                        break label$9;
                                                                                                       }
                                                                                                       HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
                                                                                                       break label$9;
                                                                                                      }
                                                                                                      HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                                                                      break label$9;
                                                                                                     }
                                                                                                     raise_exception_28int_29(10 | 0);
                                                                                                     break label$9;
                                                                                                    }
                                                                                                    set_mem_byte_28unsigned_20int_2c_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0, HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                                                    break label$9;
                                                                                                   }
                                                                                                   set_mem_word_28unsigned_20int_2c_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0, HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                                                   break label$9;
                                                                                                  }
                                                                                                  raise_exception_28int_29(11 | 0);
                                                                                                  break label$9;
                                                                                                 }
                                                                                                 set_mem_half_28unsigned_20int_2c_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0, HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                                                 break label$9;
                                                                                                }
                                                                                                label$239 : {
                                                                                                 $7 = HEAPU8[($0 + 7 | 0) >> 0] | 0;
                                                                                                 if ($7 >>> 0 > 31 >>> 0) {
                                                                                                  break label$239
                                                                                                 }
                                                                                                 HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) << $7 | 0;
                                                                                                 break label$9;
                                                                                                }
                                                                                                HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                                break label$9;
                                                                                               }
                                                                                               HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) << ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) & 31 | 0) | 0;
                                                                                               break label$9;
                                                                                              }
                                                                                              $7 = 50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                              label$240 : {
                                                                                               if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) >= (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                                                break label$240
                                                                                               }
                                                                                               HEAP32[$7 >> 2] = 1;
                                                                                               break label$9;
                                                                                              }
                                                                                              HEAP32[$7 >> 2] = 0;
                                                                                              break label$9;
                                                                                             }
                                                                                             $7 = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                             label$241 : {
                                                                                              if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) >= (HEAP16[($0 + 6 | 0) >> 1] | 0 | 0)) {
                                                                                               break label$241
                                                                                              }
                                                                                              HEAP32[$7 >> 2] = 1;
                                                                                              break label$9;
                                                                                             }
                                                                                             HEAP32[$7 >> 2] = 0;
                                                                                             break label$9;
                                                                                            }
                                                                                            $7 = 50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                            label$242 : {
                                                                                             if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 >= (HEAP16[($0 + 6 | 0) >> 1] | 0) >>> 0) {
                                                                                              break label$242
                                                                                             }
                                                                                             HEAP32[$7 >> 2] = 1;
                                                                                             break label$9;
                                                                                            }
                                                                                            HEAP32[$7 >> 2] = 0;
                                                                                            break label$9;
                                                                                           }
                                                                                           $7 = 50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                                                           label$243 : {
                                                                                            if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 >= (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0) {
                                                                                             break label$243
                                                                                            }
                                                                                            HEAP32[$7 >> 2] = 1;
                                                                                            break label$9;
                                                                                           }
                                                                                           HEAP32[$7 >> 2] = 0;
                                                                                           break label$9;
                                                                                          }
                                                                                          $7 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                          label$244 : {
                                                                                           $8 = HEAPU8[($0 + 7 | 0) >> 0] | 0;
                                                                                           if ($8 >>> 0 > 31 >>> 0) {
                                                                                            break label$244
                                                                                           }
                                                                                           HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7 >> $8 | 0;
                                                                                           break label$9;
                                                                                          }
                                                                                          HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                          break label$9;
                                                                                         }
                                                                                         HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >> ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) & 31 | 0) | 0;
                                                                                         break label$9;
                                                                                        }
                                                                                        $7 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                        label$245 : {
                                                                                         $8 = HEAPU8[($0 + 7 | 0) >> 0] | 0;
                                                                                         if ($8 >>> 0 > 31 >>> 0) {
                                                                                          break label$245
                                                                                         }
                                                                                         HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7 >>> $8 | 0;
                                                                                         break label$9;
                                                                                        }
                                                                                        HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                        break label$9;
                                                                                       }
                                                                                       HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) & 31 | 0) | 0;
                                                                                       break label$9;
                                                                                      }
                                                                                      $8 = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                      $9 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                      $7 = $8 - $9 | 0;
                                                                                      label$246 : {
                                                                                       $8 = $8 & -2147483648 | 0;
                                                                                       if (($8 | 0) == ($9 & -2147483648 | 0 | 0)) {
                                                                                        break label$246
                                                                                       }
                                                                                       if (($8 | 0) == ($7 & -2147483648 | 0 | 0)) {
                                                                                        break label$246
                                                                                       }
                                                                                       raise_exception_28int_29(12 | 0);
                                                                                       break label$9;
                                                                                      }
                                                                                      HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                                                                      break label$9;
                                                                                     }
                                                                                     HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) - (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
                                                                                     break label$9;
                                                                                    }
                                                                                    set_mem_word_28unsigned_20int_2c_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0, HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                                                    break label$9;
                                                                                   }
                                                                                   raise_exception_28int_29(11 | 0);
                                                                                   break label$9;
                                                                                  }
                                                                                  $7 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                  $0 = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                                                  $8 = $0 & -4 | 0;
                                                                                  $9 = read_mem_word_28unsigned_20int_29($8 | 0) | 0;
                                                                                  label$247 : {
                                                                                   switch ($0 & 3 | 0 | 0) {
                                                                                   default:
                                                                                    set_mem_word_28unsigned_20int_2c_20int_29($8 | 0, $9 & -256 | 0 | ($7 >>> 24 | 0) | 0 | 0);
                                                                                    break label$9;
                                                                                   case 1:
                                                                                    set_mem_word_28unsigned_20int_2c_20int_29($8 | 0, $9 & -65536 | 0 | ($7 >>> 16 | 0) | 0 | 0);
                                                                                    break label$9;
                                                                                   case 2:
                                                                                    $7 = $9 & -16777216 | 0 | ($7 >>> 8 | 0) | 0;
                                                                                    break;
                                                                                   case 3:
                                                                                    break label$247;
                                                                                   };
                                                                                  }
                                                                                  set_mem_word_28unsigned_20int_2c_20int_29($8 | 0, $7 | 0);
                                                                                  break label$9;
                                                                                 }
                                                                                 $7 = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                                                 $0 = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                                                 $8 = $0 & -4 | 0;
                                                                                 $9 = read_mem_word_28unsigned_20int_29($8 | 0) | 0;
                                                                                 label$251 : {
                                                                                  switch ($0 & 3 | 0 | 0) {
                                                                                  case 1:
                                                                                   set_mem_word_28unsigned_20int_2c_20int_29($8 | 0, $9 & 255 | 0 | ($7 << 8 | 0) | 0 | 0);
                                                                                   break label$9;
                                                                                  case 2:
                                                                                   set_mem_word_28unsigned_20int_2c_20int_29($8 | 0, $9 & 65535 | 0 | ($7 << 16 | 0) | 0 | 0);
                                                                                   break label$9;
                                                                                  case 3:
                                                                                   $7 = $9 & 16777215 | 0 | ($7 << 24 | 0) | 0;
                                                                                   break;
                                                                                  default:
                                                                                   break label$251;
                                                                                  };
                                                                                 }
                                                                                 set_mem_word_28unsigned_20int_2c_20int_29($8 | 0, $7 | 0);
                                                                                 break label$9;
                                                                                }
                                                                                if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                                 break label$9
                                                                                }
                                                                                raise_exception_28int_29(13 | 0);
                                                                                break label$9;
                                                                               }
                                                                               if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP16[($0 + 6 | 0) >> 1] | 0 | 0)) {
                                                                                break label$9
                                                                               }
                                                                               raise_exception_28int_29(13 | 0);
                                                                               break label$9;
                                                                              }
                                                                              if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                               break label$9
                                                                              }
                                                                              raise_exception_28int_29(13 | 0);
                                                                              break label$9;
                                                                             }
                                                                             if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) < (HEAP16[($0 + 6 | 0) >> 1] | 0 | 0)) {
                                                                              break label$9
                                                                             }
                                                                             raise_exception_28int_29(13 | 0);
                                                                             break label$9;
                                                                            }
                                                                            if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 < (HEAP16[($0 + 6 | 0) >> 1] | 0) >>> 0) {
                                                                             break label$9
                                                                            }
                                                                            raise_exception_28int_29(13 | 0);
                                                                            break label$9;
                                                                           }
                                                                           if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 < (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0) {
                                                                            break label$9
                                                                           }
                                                                           raise_exception_28int_29(13 | 0);
                                                                           break label$9;
                                                                          }
                                                                          raise_exception_28int_29(10 | 0);
                                                                          break label$9;
                                                                         }
                                                                         raise_exception_28int_29(10 | 0);
                                                                         break label$9;
                                                                        }
                                                                        raise_exception_28int_29(10 | 0);
                                                                        break label$9;
                                                                       }
                                                                       raise_exception_28int_29(10 | 0);
                                                                       break label$9;
                                                                      }
                                                                      if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) >= (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                       break label$9
                                                                      }
                                                                      raise_exception_28int_29(13 | 0);
                                                                      break label$9;
                                                                     }
                                                                     if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) >= (HEAP16[($0 + 6 | 0) >> 1] | 0 | 0)) {
                                                                      break label$9
                                                                     }
                                                                     raise_exception_28int_29(13 | 0);
                                                                     break label$9;
                                                                    }
                                                                    if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 >= (HEAP16[($0 + 6 | 0) >> 1] | 0) >>> 0) {
                                                                     break label$9
                                                                    }
                                                                    raise_exception_28int_29(13 | 0);
                                                                    break label$9;
                                                                   }
                                                                   if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 >= (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0) {
                                                                    break label$9
                                                                   }
                                                                   raise_exception_28int_29(13 | 0);
                                                                   break label$9;
                                                                  }
                                                                  if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0)) {
                                                                   break label$9
                                                                  }
                                                                  raise_exception_28int_29(13 | 0);
                                                                  break label$9;
                                                                 }
                                                                 if ((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP16[($0 + 6 | 0) >> 1] | 0 | 0)) {
                                                                  break label$9
                                                                 }
                                                                 raise_exception_28int_29(13 | 0);
                                                                 break label$9;
                                                                }
                                                                HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) ^ (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
                                                                break label$9;
                                                               }
                                                               HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) ^ (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0;
                                                               break label$9;
                                                              }
                                                              $11 = Math_fround(fabs_28float_29(Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]))));
                                                              HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $11;
                                                              break label$9;
                                                             }
                                                             label$255 : {
                                                              if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                                                               break label$255
                                                              }
                                                              run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                              break label$9;
                                                             }
                                                             label$256 : {
                                                              label$257 : {
                                                               $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                                               if (!($7 & 1 | 0)) {
                                                                break label$257
                                                               }
                                                               run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                               $12 = 0.0;
                                                               break label$256;
                                                              }
                                                              $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                                             }
                                                             HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = Math_abs($12);
                                                             break label$9;
                                                            }
                                                            $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                                                            HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]) + Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]));
                                                            break label$9;
                                                           }
                                                           label$258 : {
                                                            if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                                                             break label$258
                                                            }
                                                            run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                            break label$9;
                                                           }
                                                           label$259 : {
                                                            label$260 : {
                                                             $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                                             if (!($7 & 1 | 0)) {
                                                              break label$260
                                                             }
                                                             run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                             $12 = 0.0;
                                                             break label$259;
                                                            }
                                                            $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                                           }
                                                           label$261 : {
                                                            label$262 : {
                                                             $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                                                             if (!($7 & 1 | 0)) {
                                                              break label$262
                                                             }
                                                             run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                             $13 = 0.0;
                                                             break label$261;
                                                            }
                                                            $13 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                                           }
                                                           HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12 + $13;
                                                           break label$9;
                                                          }
                                                          label$263 : {
                                                           $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                                                           $8 = $7 >>> 2 | 0;
                                                           if (($7 & 1 | 0 | 0) == (!(($7 >>> 0 > 31 >>> 0 ? 8388608 : $8 ? 16777216 << $8 | 0 : 8388608) & (HEAP32[(51344 + 252 | 0) >> 2] | 0) | 0) | 0)) {
                                                            break label$263
                                                           }
                                                           $0 = HEAP16[($0 + 6 | 0) >> 1] | 0;
                                                           $7 = $0 << 2 | 0;
                                                           $8 = HEAP32[(0 + 50808 | 0) >> 2] | 0;
                                                           $0 = ($0 & 8192 | 0 ? $7 | -65536 | 0 : $7) + $8 | 0;
                                                           $7 = HEAPU8[(0 + 50429 | 0) >> 0] | 0;
                                                           $0 = $7 ? $0 + 4 | 0 : $0;
                                                           label$264 : {
                                                            if (!$7) {
                                                             break label$264
                                                            }
                                                            HEAP8[(0 + 50660 | 0) >> 0] = 1;
                                                            run_spim_28unsigned_20int_2c_20int_2c_20bool_29($8 + 4 | 0 | 0, 1 | 0, $2 | 0) | 0;
                                                            HEAP8[(0 + 50660 | 0) >> 0] = 0;
                                                           }
                                                           HEAP32[(0 + 50808 | 0) >> 2] = $0 + -4 | 0;
                                                           break label$9;
                                                          }
                                                          if (!($7 & 2 | 0)) {
                                                           break label$9
                                                          }
                                                          HEAP32[(0 + 50808 | 0) >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0;
                                                          break label$9;
                                                         }
                                                         $9 = (HEAPU8[($0 + 7 | 0) >> 0] | 0) >>> 2 | 0;
                                                         $7 = HEAPU8[($0 + 4 | 0) >> 0] | 0;
                                                         label$265 : {
                                                          $8 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                                                          $11 = Math_fround(HEAPF32[($8 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                                                          $14 = Math_fround(HEAPF32[($8 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                                                          if ($11 == $11 & $14 == $14 | 0) {
                                                           break label$265
                                                          }
                                                          label$266 : {
                                                           if (!($7 & 8 | 0)) {
                                                            break label$266
                                                           }
                                                           raise_exception_28int_29(15 | 0);
                                                           break label$9;
                                                          }
                                                          set_fpu_cc_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($7 | 0, $9 | 0, 0 | 0, 0 | 0, 1 | 0);
                                                          break label$9;
                                                         }
                                                         set_fpu_cc_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($7 | 0, $9 | 0, $11 < $14 | 0, $11 == $14 | 0, 0 | 0);
                                                         break label$9;
                                                        }
                                                        label$267 : {
                                                         label$268 : {
                                                          $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                                          if (!($7 & 1 | 0)) {
                                                           break label$268
                                                          }
                                                          run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                          $12 = 0.0;
                                                          break label$267;
                                                         }
                                                         $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                                        }
                                                        label$269 : {
                                                         label$270 : {
                                                          $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                                                          if (!($7 & 1 | 0)) {
                                                           break label$270
                                                          }
                                                          run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                          $13 = 0.0;
                                                          break label$269;
                                                         }
                                                         $13 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                                        }
                                                        $7 = (HEAPU8[($0 + 7 | 0) >> 0] | 0) >>> 2 | 0;
                                                        $0 = HEAPU8[($0 + 4 | 0) >> 0] | 0;
                                                        label$271 : {
                                                         if ($12 == $12 & $13 == $13 | 0) {
                                                          break label$271
                                                         }
                                                         label$272 : {
                                                          if (!($0 & 8 | 0)) {
                                                           break label$272
                                                          }
                                                          raise_exception_28int_29(15 | 0);
                                                          break label$9;
                                                         }
                                                         set_fpu_cc_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $7 | 0, 0 | 0, 0 | 0, 1 | 0);
                                                         break label$9;
                                                        }
                                                        set_fpu_cc_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $7 | 0, $12 < $13 | 0, $12 == $13 | 0, 0 | 0);
                                                        break label$9;
                                                       }
                                                       HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((51344 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) + 128 | 0) >> 2] | 0;
                                                       break label$9;
                                                      }
                                                      $7 = $0 + 6 | 0;
                                                      HEAP32[((51344 + ((HEAPU8[$7 >> 0] | 0) << 2 | 0) | 0) + 128 | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                                      if ((HEAPU8[$7 >> 0] | 0 | 0) != (31 | 0)) {
                                                       break label$9
                                                      }
                                                      if (!((HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) & 25165823 | 0)) {
                                                       break label$9
                                                      }
                                                      raise_exception_28int_29(15 | 0);
                                                      break label$9;
                                                     }
                                                     label$273 : {
                                                      label$274 : {
                                                       $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                                       if (!($7 & 1 | 0)) {
                                                        break label$274
                                                       }
                                                       run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                       $12 = 0.0;
                                                       break label$273;
                                                      }
                                                      $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                                     }
                                                     $0 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                     label$275 : {
                                                      $12 = Math_ceil($12);
                                                      if (!(Math_abs($12) < 2147483648.0)) {
                                                       break label$275
                                                      }
                                                      HEAP32[$0 >> 2] = ~~$12;
                                                      break label$9;
                                                     }
                                                     HEAP32[$0 >> 2] = -2147483648;
                                                     break label$9;
                                                    }
                                                    $7 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                                                    label$276 : {
                                                     $11 = Math_fround(Math_ceil(Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2])));
                                                     if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                                                      break label$276
                                                     }
                                                     HEAP32[$7 >> 2] = ~~$11;
                                                     break label$9;
                                                    }
                                                    HEAP32[$7 >> 2] = -2147483648;
                                                    break label$9;
                                                   }
                                                   label$277 : {
                                                    $7 = HEAPU8[($0 + 7 | 0) >> 0] | 0;
                                                    if (!($7 & 1 | 0)) {
                                                     break label$277
                                                    }
                                                    run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                    break label$9;
                                                   }
                                                   HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3] = +Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                                                   break label$9;
                                                  }
                                                  label$278 : {
                                                   $7 = HEAPU8[($0 + 7 | 0) >> 0] | 0;
                                                   if (!($7 & 1 | 0)) {
                                                    break label$278
                                                   }
                                                   run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                   break label$9;
                                                  }
                                                  HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3] = +(HEAP32[((HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                  break label$9;
                                                 }
                                                 label$279 : {
                                                  label$280 : {
                                                   $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                                   if (!($7 & 1 | 0)) {
                                                    break label$280
                                                   }
                                                   run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                   $12 = 0.0;
                                                   break label$279;
                                                  }
                                                  $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                                 }
                                                 HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround($12);
                                                 break label$9;
                                                }
                                                HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAP32[((HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                                                break label$9;
                                               }
                                               label$281 : {
                                                label$282 : {
                                                 $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                                 if (!($7 & 1 | 0)) {
                                                  break label$282
                                                 }
                                                 run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                                 $12 = 0.0;
                                                 break label$281;
                                                }
                                                $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                               }
                                               $0 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                                               label$283 : {
                                                if (!(Math_abs($12) < 2147483648.0)) {
                                                 break label$283
                                                }
                                                HEAP32[$0 >> 2] = ~~$12;
                                                break label$9;
                                               }
                                               HEAP32[$0 >> 2] = -2147483648;
                                               break label$9;
                                              }
                                              $7 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                                              label$284 : {
                                               $11 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                                               if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                                                break label$284
                                               }
                                               HEAP32[$7 >> 2] = ~~$11;
                                               break label$9;
                                              }
                                              HEAP32[$7 >> 2] = -2147483648;
                                              break label$9;
                                             }
                                             $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                                             HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]) / Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]));
                                             break label$9;
                                            }
                                            label$285 : {
                                             if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                                              break label$285
                                             }
                                             run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                             break label$9;
                                            }
                                            label$286 : {
                                             label$287 : {
                                              $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                              if (!($7 & 1 | 0)) {
                                               break label$287
                                              }
                                              run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                              $12 = 0.0;
                                              break label$286;
                                             }
                                             $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                            }
                                            label$288 : {
                                             label$289 : {
                                              $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                                              if (!($7 & 1 | 0)) {
                                               break label$289
                                              }
                                              run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                              $13 = 0.0;
                                              break label$288;
                                             }
                                             $13 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                            }
                                            HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12 / $13;
                                            break label$9;
                                           }
                                           label$290 : {
                                            label$291 : {
                                             $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                             if (!($7 & 1 | 0)) {
                                              break label$291
                                             }
                                             run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                             $12 = 0.0;
                                             break label$290;
                                            }
                                            $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                           }
                                           $0 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                                           label$292 : {
                                            $12 = Math_floor($12);
                                            if (!(Math_abs($12) < 2147483648.0)) {
                                             break label$292
                                            }
                                            HEAP32[$0 >> 2] = ~~$12;
                                            break label$9;
                                           }
                                           HEAP32[$0 >> 2] = -2147483648;
                                           break label$9;
                                          }
                                          $7 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                                          label$293 : {
                                           $11 = Math_fround(Math_floor(Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2])));
                                           if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
                                            break label$293
                                           }
                                           HEAP32[$7 >> 2] = ~~$11;
                                           break label$9;
                                          }
                                          HEAP32[$7 >> 2] = -2147483648;
                                          break label$9;
                                         }
                                         label$294 : {
                                          $7 = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0;
                                          if (!($7 & 3 | 0)) {
                                           break label$294
                                          }
                                          raise_exception_28int_29(4 | 0);
                                          HEAP32[(51344 + 32 | 0) >> 2] = $7;
                                         }
                                         label$295 : {
                                          label$296 : {
                                           if (!(HEAPU8[(0 + 50430 | 0) >> 0] | 0)) {
                                            break label$296
                                           }
                                           HEAP32[(0 + 50644 | 0) >> 2] = (HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                           HEAP32[(0 + 50648 | 0) >> 2] = read_mem_word_28unsigned_20int_29($7 | 0) | 0;
                                           break label$295;
                                          }
                                          $8 = read_mem_word_28unsigned_20int_29($7 | 0) | 0;
                                          HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $8;
                                         }
                                         label$297 : {
                                          if (!(HEAPU8[(0 + 50430 | 0) >> 0] | 0)) {
                                           break label$297
                                          }
                                          HEAP32[(0 + 50644 | 0) >> 2] = (((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) + (HEAP32[(0 + 50816 | 0) >> 2] | 0) | 0) + 4 | 0;
                                          HEAP32[(0 + 50648 | 0) >> 2] = read_mem_word_28unsigned_20int_29($7 + 4 | 0 | 0) | 0;
                                          break label$9;
                                         }
                                         $7 = read_mem_word_28unsigned_20int_29($7 + 4 | 0 | 0) | 0;
                                         HEAP32[((((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) + (HEAP32[(0 + 50816 | 0) >> 2] | 0) | 0) + 4 | 0) >> 2] = $7;
                                         break label$9;
                                        }
                                        label$298 : {
                                         if (!$8) {
                                          break label$298
                                         }
                                         HEAP32[(0 + 50644 | 0) >> 2] = (HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0;
                                         HEAP32[(0 + 50648 | 0) >> 2] = read_mem_word_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                         break label$9;
                                        }
                                        $7 = read_mem_word_28unsigned_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0) | 0;
                                        HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $7;
                                        break label$9;
                                       }
                                       HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                       break label$9;
                                      }
                                      $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                                      HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                                      break label$9;
                                     }
                                     label$299 : {
                                      if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                                       break label$299
                                      }
                                      run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                      break label$9;
                                     }
                                     label$300 : {
                                      label$301 : {
                                       $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                       if (!($7 & 1 | 0)) {
                                        break label$301
                                       }
                                       run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                       $12 = 0.0;
                                       break label$300;
                                      }
                                      $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                     }
                                     HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12;
                                     break label$9;
                                    }
                                    $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                                    $8 = $7 >>> 2 | 0;
                                    if (($7 >>> 0 > 31 >>> 0 ? 8388608 : $8 ? 1 << ($8 + 24 | 0) | 0 : 8388608) & (HEAP32[(51344 + 252 | 0) >> 2] | 0) | 0) {
                                     break label$9
                                    }
                                    HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                                    break label$9;
                                   }
                                   $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                                   $8 = $7 >>> 2 | 0;
                                   if (($7 >>> 0 > 31 >>> 0 ? 8388608 : $8 ? 1 << ($8 + 24 | 0) | 0 : 8388608) & (HEAP32[(51344 + 252 | 0) >> 2] | 0) | 0) {
                                    break label$9
                                   }
                                   label$302 : {
                                    if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                                     break label$302
                                    }
                                    run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                    break label$9;
                                   }
                                   label$303 : {
                                    label$304 : {
                                     $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                     if (!($7 & 1 | 0)) {
                                      break label$304
                                     }
                                     run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                     $12 = 0.0;
                                     break label$303;
                                    }
                                    $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                   }
                                   HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12;
                                   break label$9;
                                  }
                                  $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                                  $8 = $7 >>> 2 | 0;
                                  if (($7 >>> 0 > 31 >>> 0 ? 8388608 : $8 ? 1 << ($8 + 24 | 0) | 0 : 8388608) & (HEAP32[(51344 + 252 | 0) >> 2] | 0) | 0) {
                                   break label$9
                                  }
                                  $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                                  HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                                  break label$9;
                                 }
                                 if (!(HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0)) {
                                  break label$9
                                 }
                                 label$305 : {
                                  if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                                   break label$305
                                  }
                                  run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                  break label$9;
                                 }
                                 label$306 : {
                                  label$307 : {
                                   $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                   if (!($7 & 1 | 0)) {
                                    break label$307
                                   }
                                   run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                   $12 = 0.0;
                                   break label$306;
                                  }
                                  $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                                 }
                                 HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12;
                                 break label$9;
                                }
                                if (!(HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0)) {
                                 break label$9
                                }
                                $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                                HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                                break label$9;
                               }
                               $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                               $8 = $7 >>> 2 | 0;
                               if (!(($7 >>> 0 > 31 >>> 0 ? 8388608 : $8 ? 1 << ($8 + 24 | 0) | 0 : 8388608) & (HEAP32[(51344 + 252 | 0) >> 2] | 0) | 0)) {
                                break label$9
                               }
                               HEAP32[(50672 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
                               break label$9;
                              }
                              $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                              $8 = $7 >>> 2 | 0;
                              if (!(($7 >>> 0 > 31 >>> 0 ? 8388608 : $8 ? 1 << ($8 + 24 | 0) | 0 : 8388608) & (HEAP32[(51344 + 252 | 0) >> 2] | 0) | 0)) {
                               break label$9
                              }
                              label$308 : {
                               if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                                break label$308
                               }
                               run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                               break label$9;
                              }
                              label$309 : {
                               label$310 : {
                                $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                                if (!($7 & 1 | 0)) {
                                 break label$310
                                }
                                run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                                $12 = 0.0;
                                break label$309;
                               }
                               $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                              }
                              HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12;
                              break label$9;
                             }
                             $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                             $8 = $7 >>> 2 | 0;
                             if (!(($7 >>> 0 > 31 >>> 0 ? 8388608 : $8 ? 1 << ($8 + 24 | 0) | 0 : 8388608) & (HEAP32[(51344 + 252 | 0) >> 2] | 0) | 0)) {
                              break label$9
                             }
                             $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                             HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                             break label$9;
                            }
                            if (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) {
                             break label$9
                            }
                            label$311 : {
                             if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                              break label$311
                             }
                             run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                             break label$9;
                            }
                            label$312 : {
                             label$313 : {
                              $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                              if (!($7 & 1 | 0)) {
                               break label$313
                              }
                              run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                              $12 = 0.0;
                              break label$312;
                             }
                             $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                            }
                            HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12;
                            break label$9;
                           }
                           if (HEAP32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) {
                            break label$9
                           }
                           $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                           HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                           break label$9;
                          }
                          HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(50672 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
                          break label$9;
                         }
                         $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                         HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]));
                         break label$9;
                        }
                        label$314 : {
                         if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                          break label$314
                         }
                         run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                         break label$9;
                        }
                        label$315 : {
                         label$316 : {
                          $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                          if (!($7 & 1 | 0)) {
                           break label$316
                          }
                          run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                          $12 = 0.0;
                          break label$315;
                         }
                         $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                        }
                        label$317 : {
                         label$318 : {
                          $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                          if (!($7 & 1 | 0)) {
                           break label$318
                          }
                          run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                          $13 = 0.0;
                          break label$317;
                         }
                         $13 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                        }
                        HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12 * $13;
                        break label$9;
                       }
                       $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                       HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]));
                       break label$9;
                      }
                      label$319 : {
                       if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                        break label$319
                       }
                       run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                       break label$9;
                      }
                      label$320 : {
                       label$321 : {
                        $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                        if (!($7 & 1 | 0)) {
                         break label$321
                        }
                        run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                        $12 = 0.0;
                        break label$320;
                       }
                       $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                      }
                      HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = -$12;
                      break label$9;
                     }
                     label$322 : {
                      label$323 : {
                       $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                       if (!($7 & 1 | 0)) {
                        break label$323
                       }
                       run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                       $12 = 0.0;
                       break label$322;
                      }
                      $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                     }
                     $0 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                     label$324 : {
                      $12 = $12 + .5;
                      if (!(Math_abs($12) < 2147483648.0)) {
                       break label$324
                      }
                      HEAP32[$0 >> 2] = ~~$12;
                      break label$9;
                     }
                     HEAP32[$0 >> 2] = -2147483648;
                     break label$9;
                    }
                    $7 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
                    label$325 : {
                     $12 = +Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]) + .5;
                     if (!(Math_abs($12) < 2147483648.0)) {
                      break label$325
                     }
                     HEAP32[$7 >> 2] = ~~$12;
                     break label$9;
                    }
                    HEAP32[$7 >> 2] = -2147483648;
                    break label$9;
                   }
                   label$326 : {
                    label$327 : {
                     $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                     if (!($7 & 1 | 0)) {
                      break label$327
                     }
                     run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                     i64toi32_i32$0 = 0;
                     $15 = 0;
                     $15$hi = i64toi32_i32$0;
                     break label$326;
                    }
                    i64toi32_i32$2 = (HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0;
                    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $15 = i64toi32_i32$0;
                    $15$hi = i64toi32_i32$1;
                   }
                   label$328 : {
                    $0 = (HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0;
                    if (!($0 & 3 | 0)) {
                     break label$328
                    }
                    raise_exception_28int_29(4 | 0);
                    HEAP32[(51344 + 32 | 0) >> 2] = $0;
                   }
                   i64toi32_i32$1 = $15$hi;
                   set_mem_word_28unsigned_20int_2c_20int_29($0 | 0, $15 | 0);
                   $3198 = $0 + 4 | 0;
                   i64toi32_i32$2 = $15;
                   i64toi32_i32$0 = 0;
                   i64toi32_i32$3 = 32;
                   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                    i64toi32_i32$0 = 0;
                    $25 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                   } else {
                    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                    $25 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                   }
                   set_mem_word_28unsigned_20int_2c_20int_29($3198 | 0, $25 | 0);
                   break label$9;
                  }
                  label$329 : {
                   if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                    break label$329
                   }
                   run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                   break label$9;
                  }
                  label$330 : {
                   label$331 : {
                    $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                    if (!($7 & 1 | 0)) {
                     break label$331
                    }
                    run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                    $12 = 0.0;
                    break label$330;
                   }
                   $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
                  }
                  HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = Math_sqrt($12);
                  break label$9;
                 }
                 $11 = Math_fround(sqrt_28float_29(Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]))));
                 HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = $11;
                 break label$9;
                }
                $7 = HEAP32[(0 + 50816 | 0) >> 2] | 0;
                HEAPF32[($7 + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]) - Math_fround(HEAPF32[($7 + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]));
                break label$9;
               }
               label$332 : {
                if (!((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 1 | 0)) {
                 break label$332
                }
                run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                break label$9;
               }
               label$333 : {
                label$334 : {
                 $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
                 if (!($7 & 1 | 0)) {
                  break label$334
                 }
                 run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                 $12 = 0.0;
                 break label$333;
                }
                $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
               }
               label$335 : {
                label$336 : {
                 $7 = HEAPU8[($0 + 5 | 0) >> 0] | 0;
                 if (!($7 & 1 | 0)) {
                  break label$336
                 }
                 run_error_28char__2c_20____29(5120 | 0, 0 | 0);
                 $13 = 0.0;
                 break label$335;
                }
                $13 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
               }
               HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) & 1016 | 0) | 0) >> 3] = $12 - $13;
               break label$9;
              }
              set_mem_word_28unsigned_20int_2c_20int_29((HEAP32[(50672 + ((HEAPU8[($0 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) + (HEAP16[($0 + 6 | 0) >> 1] | 0) | 0 | 0, HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
              break label$9;
             }
             label$337 : {
              label$338 : {
               $7 = HEAPU8[($0 + 6 | 0) >> 0] | 0;
               if (!($7 & 1 | 0)) {
                break label$338
               }
               run_error_28char__2c_20____29(5120 | 0, 0 | 0);
               $12 = 0.0;
               break label$337;
              }
              $12 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + (($7 << 2 | 0) & 1016 | 0) | 0) >> 3];
             }
             $0 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
             label$339 : {
              if (!(Math_abs($12) < 2147483648.0)) {
               break label$339
              }
              HEAP32[$0 >> 2] = ~~$12;
              break label$9;
             }
             HEAP32[$0 >> 2] = -2147483648;
             break label$9;
            }
            $7 = (HEAP32[(0 + 50820 | 0) >> 2] | 0) + ((HEAPU8[($0 + 7 | 0) >> 0] | 0) << 2 | 0) | 0;
            label$340 : {
             $11 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ((HEAPU8[($0 + 6 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]);
             if (!(Math_fround(Math_abs($11)) < Math_fround(2147483648.0))) {
              break label$340
             }
             HEAP32[$7 >> 2] = ~~$11;
             break label$9;
            }
            HEAP32[$7 >> 2] = -2147483648;
            break label$9;
           }
           HEAP32[($3 + 16 | 0) >> 2] = $9;
           fatal_error_28char__2c_20____29(5151 | 0, $3 + 16 | 0 | 0);
           break label$9;
          }
          if (do_syscall_28_29() | 0) {
           break label$9
          }
         }
         $0 = ($7 | 0) != (0 | 0);
         break label$1;
        }
        HEAP32[(0 + 50808 | 0) >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) + 4 | 0;
        if (!(HEAP32[(0 + 50632 | 0) >> 2] | 0)) {
         break label$7
        }
       }
       handle_exception_28_29();
      }
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($5 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    $1 = $1 - $5 | 0;
    $5 = ($4 | 0) < ($1 | 0) ? $4 : $1;
    if (($1 | 0) > (0 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $0 = 1;
  }
  __stack_pointer = $3 + 48 | 0;
  return $0 | 0;
 }
 
 function raise_exception_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    if (((HEAP32[(51344 + 48 | 0) >> 2] | 0) & 3 | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 50632 | 0) >> 2] = 1;
   $1 = (HEAP32[(51344 + 48 | 0) >> 2] | 0) & 2 | 0;
   label$3 : {
    label$4 : {
     if (!(HEAPU8[(0 + 50660 | 0) >> 0] | 0)) {
      break label$4
     }
     if ($1) {
      break label$3
     }
     HEAP32[(51344 + 52 | 0) >> 2] = HEAP32[(51344 + 52 | 0) >> 2] | 0 | -2147483648 | 0;
     HEAP32[(51344 + 56 | 0) >> 2] = ((HEAP32[(0 + 50808 | 0) >> 2] | 0) + -4 | 0) & -4 | 0;
     break label$3;
    }
    if ($1) {
     break label$3
    }
    HEAP32[(51344 + 56 | 0) >> 2] = (HEAP32[(0 + 50808 | 0) >> 2] | 0) & -4 | 0;
   }
   HEAP32[(51344 + 48 | 0) >> 2] = HEAP32[(51344 + 48 | 0) >> 2] | 0 | 2 | 0;
   HEAP32[(51344 + 52 | 0) >> 2] = (HEAP32[(51344 + 52 | 0) >> 2] | 0) & -125 | 0 | ($0 << 2 | 0) | 0;
  }
 }
 
 function signed_multiply_28int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $9 = 0;
  $2 = $0 >> 31 | 0;
  $9 = ($0 + $2 | 0) ^ $2 | 0;
  $2 = $1 >> 31 | 0;
  unsigned_multiply_28int_2c_20int_29($9 | 0, ($1 + $2 | 0) ^ $2 | 0 | 0);
  label$1 : {
   if (!(($1 | 0) < (0 | 0) ? ($0 ^ -1 | 0) >>> 31 | 0 : $0 >>> 31 | 0)) {
    break label$1
   }
   $1 = HEAP32[(0 + 50800 | 0) >> 2] | 0;
   HEAP32[(0 + 50800 | 0) >> 2] = $1 ^ -1 | 0;
   $0 = HEAP32[(0 + 50804 | 0) >> 2] | 0;
   HEAP32[(0 + 50804 | 0) >> 2] = 0 - $0 | 0;
   if ($0) {
    break label$1
   }
   HEAP32[(0 + 50800 | 0) >> 2] = 0 - $1 | 0;
  }
 }
 
 function unsigned_multiply_28int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $43 = 0;
  $2 = $1 & 65535 | 0;
  $3 = $0 >>> 16 | 0;
  $4 = Math_imul($2, $3);
  $5 = $1 >>> 16 | 0;
  $0 = $0 & 65535 | 0;
  $6 = Math_imul($5, $0);
  $1 = $4 + $6 | 0;
  $2 = Math_imul($2, $0);
  $7 = $2 >>> 16 | 0;
  $0 = $1 + $7 | 0;
  HEAP32[(0 + 50804 | 0) >> 2] = $0 << 16 | 0 | ($2 & 65535 | 0) | 0;
  $43 = ($0 >>> 16 | 0) + Math_imul($5, $3) | 0;
  $2 = $1 >>> 0 < $4 >>> 0 | $1 >>> 0 < $6 >>> 0 | 0;
  $3 = $2 ? 2 : 1;
  HEAP32[(0 + 50800 | 0) >> 2] = $43 + (($0 >>> 0 < $1 >>> 0 ? $3 : $0 >>> 0 < $7 >>> 0 ? $3 : $2) << 16 | 0) | 0;
 }
 
 function fabs_28float_29($0) {
  $0 = Math_fround($0);
  return Math_fround(Math_fround(Math_abs($0)));
 }
 
 function set_fpu_cc_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = 1 << ($1 + 24 | 0) | 0;
  $1 = !$1 | ($1 | 0) > (7 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((($0 << 30 | 0) >> 31 | 0) & $3 | 0 | ((($0 << 29 | 0) >> 31 | 0) & $2 | 0) | 0 | ((0 - ($0 & 1 | 0) | 0) & $4 | 0) | 0) {
     break label$2
    }
    $1 = (HEAP32[(51344 + 252 | 0) >> 2] | 0) & ($1 ? -8388609 : $5 ^ -1 | 0) | 0;
    break label$1;
   }
   $1 = HEAP32[(51344 + 252 | 0) >> 2] | 0 | ($1 ? 8388608 : $5) | 0;
  }
  HEAP32[(51344 + 252 | 0) >> 2] = $1;
 }
 
 function sqrt_28float_29($0) {
  $0 = Math_fround($0);
  return Math_fround(Math_fround(Math_sqrt($0)));
 }
 
 function make_memory_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0;
  $8 = (($1 | 0) > (65536 | 0) ? $1 : 65536) + 3 | 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[(0 + 51856 | 0) >> 2] | 0;
    if ($1) {
     break label$2
    }
    $1 = xmalloc_28int_29((($0 + 3 | 0 | 0) / (4 | 0) | 0) << 2 | 0 | 0) | 0;
    break label$1;
   }
   free_instructions_28inst_s___2c_20int_29($1 | 0, ((HEAP32[(0 + 51864 | 0) >> 2] | 0) + -4194304 | 0) >>> 2 | 0 | 0);
   $1 = dlrealloc(HEAP32[(0 + 51856 | 0) >> 2] | 0 | 0, (($0 + 3 | 0 | 0) / (4 | 0) | 0) << 2 | 0 | 0) | 0;
  }
  HEAP32[(0 + 51856 | 0) >> 2] = $1;
  memset($1 | 0, 0 | 0, (($0 + 3 | 0 | 0) / (4 | 0) | 0) << 2 | 0 | 0) | 0;
  HEAP32[(0 + 51864 | 0) >> 2] = $0 + 4194304 | 0;
  $0 = $8 & -4 | 0;
  label$3 : {
   label$4 : {
    $1 = HEAP32[(0 + 51868 | 0) >> 2] | 0;
    if ($1) {
     break label$4
    }
    $1 = xmalloc_28int_29($0 | 0) | 0;
    break label$3;
   }
   $1 = dlrealloc($1 | 0, $0 | 0) | 0;
  }
  HEAP32[(0 + 51868 | 0) >> 2] = $1;
  memset($1 | 0, 0 | 0, $0 | 0) | 0;
  HEAP32[(0 + 51884 | 0) >> 2] = $0 + 268435456 | 0;
  HEAP32[(0 + 51932 | 0) >> 2] = $2;
  $0 = HEAP32[(0 + 51868 | 0) >> 2] | 0;
  HEAP32[(0 + 51880 | 0) >> 2] = $0;
  HEAP32[(0 + 51876 | 0) >> 2] = $0;
  $0 = ($3 + 3 | 0) & -4 | 0;
  label$5 : {
   label$6 : {
    $1 = HEAP32[(0 + 51892 | 0) >> 2] | 0;
    if ($1) {
     break label$6
    }
    $1 = xmalloc_28int_29($0 | 0) | 0;
    break label$5;
   }
   $1 = dlrealloc($1 | 0, $0 | 0) | 0;
  }
  HEAP32[(0 + 51892 | 0) >> 2] = $1;
  memset($1 | 0, 0 | 0, $0 | 0) | 0;
  HEAP32[(0 + 51904 | 0) >> 2] = -2147483648 - $0 | 0;
  HEAP32[(0 + 51936 | 0) >> 2] = $4;
  $0 = HEAP32[(0 + 51892 | 0) >> 2] | 0;
  HEAP32[(0 + 51900 | 0) >> 2] = $0;
  HEAP32[(0 + 51896 | 0) >> 2] = $0;
  label$7 : {
   label$8 : {
    $0 = HEAP32[(0 + 51908 | 0) >> 2] | 0;
    if ($0) {
     break label$8
    }
    $0 = xmalloc_28int_29((($5 + 3 | 0 | 0) / (4 | 0) | 0) << 2 | 0 | 0) | 0;
    break label$7;
   }
   free_instructions_28inst_s___2c_20int_29($0 | 0, ((HEAP32[(0 + 51912 | 0) >> 2] | 0) >>> 2 | 0) ^ 536870912 | 0 | 0);
   $0 = dlrealloc(HEAP32[(0 + 51908 | 0) >> 2] | 0 | 0, (($5 + 3 | 0 | 0) / (4 | 0) | 0) << 2 | 0 | 0) | 0;
  }
  HEAP32[(0 + 51908 | 0) >> 2] = $0;
  memset($0 | 0, 0 | 0, (($5 + 3 | 0 | 0) / (4 | 0) | 0) << 2 | 0 | 0) | 0;
  HEAP32[(0 + 51912 | 0) >> 2] = $5 ^ -2147483648 | 0;
  $0 = ($6 + 3 | 0) & -4 | 0;
  label$9 : {
   label$10 : {
    $5 = HEAP32[(0 + 51916 | 0) >> 2] | 0;
    if ($5) {
     break label$10
    }
    $5 = xmalloc_28int_29($0 | 0) | 0;
    break label$9;
   }
   $5 = dlrealloc($5 | 0, $0 | 0) | 0;
  }
  HEAP32[(0 + 51916 | 0) >> 2] = $5;
  memset($5 | 0, 0 | 0, $0 | 0) | 0;
  HEAP32[(0 + 51928 | 0) >> 2] = $0 + -1879048192 | 0;
  HEAP32[(0 + 51940 | 0) >> 2] = $7;
  HEAP8[(0 + 51860 | 0) >> 0] = 1;
  HEAP8[(0 + 51872 | 0) >> 0] = 1;
  $0 = HEAP32[(0 + 51916 | 0) >> 2] | 0;
  HEAP32[(0 + 51924 | 0) >> 2] = $0;
  HEAP32[(0 + 51920 | 0) >> 2] = $0;
 }
 
 function free_instructions_28inst_s___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2 = HEAP32[$0 >> 2] | 0;
     if (!$2) {
      break label$3
     }
     free_inst_28inst_s__29($2 | 0);
    }
    $0 = $0 + 4 | 0;
    $2 = ($1 | 0) > (1 | 0);
    $1 = $1 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function expand_data_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $3 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = (HEAP32[(0 + 51884 | 0) >> 2] | 0) + -268435456 | 0;
  $3 = ($0 + 3 | 0) & -4 | 0;
  $4 = $2 + $3 | 0;
  label$1 : {
   label$2 : {
    if (($0 | 0) < (0 | 0)) {
     break label$2
    }
    if (($4 | 0) <= (HEAP32[(0 + 51932 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   HEAP32[($1 + 20 | 0) >> 2] = $4;
   HEAP32[($1 + 16 | 0) >> 2] = $0;
   error_28char__2c_20____29(5181 | 0, $1 + 16 | 0 | 0);
   HEAP32[$1 >> 2] = $4;
   run_error_28char__2c_20____29(5232 | 0, $1 | 0);
  }
  $0 = dlrealloc(HEAP32[(0 + 51868 | 0) >> 2] | 0 | 0, $4 | 0) | 0;
  HEAP32[(0 + 51868 | 0) >> 2] = $0;
  label$3 : {
   if ($0) {
    break label$3
   }
   fatal_error_28char__2c_20____29(5258 | 0, 0 | 0);
  }
  $0 = HEAP32[(0 + 51868 | 0) >> 2] | 0;
  HEAP32[(0 + 51880 | 0) >> 2] = $0;
  HEAP32[(0 + 51876 | 0) >> 2] = $0;
  HEAP32[(0 + 51884 | 0) >> 2] = (HEAP32[(0 + 51884 | 0) >> 2] | 0) + $3 | 0;
  label$4 : {
   if (($3 | 0) < (1 | 0)) {
    break label$4
   }
   $0 = $0 + $2 | 0;
   label$5 : while (1) {
    HEAP8[$0 >> 0] = 0;
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < ((HEAP32[(0 + 51880 | 0) >> 2] | 0) + $4 | 0) >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function expand_stack_28int_29($0) {
  $0 = $0 | 0;
  var $2 = 0, $3 = 0, $1 = 0, $5 = 0, $4 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = ($0 + 3 | 0) & -4 | 0;
  $3 = -2147483648 - (HEAP32[(0 + 51904 | 0) >> 2] | 0) | 0;
  $4 = ($2 | 0) > ($3 | 0) ? $2 : $3;
  $2 = $4 + $3 | 0;
  label$1 : {
   label$2 : {
    if (($0 | 0) < (0 | 0)) {
     break label$2
    }
    if (($2 | 0) <= (HEAP32[(0 + 51936 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   HEAP32[($1 + 8 | 0) >> 2] = $2;
   HEAP32[($1 + 4 | 0) >> 2] = $2;
   HEAP32[$1 >> 2] = $0;
   run_error_28char__2c_20____29(5289 | 0, $1 | 0);
  }
  $5 = memset(xmalloc_28int_29($2 | 0) | 0 | 0, 0 | 0, $2 | 0) | 0;
  $0 = HEAP32[(0 + 51892 | 0) >> 2] | 0;
  label$3 : {
   if (($3 | 0) < (4 | 0)) {
    break label$3
   }
   $3 = (((($3 | 0) / (4 | 0) | 0) << 2 | 0) + $0 | 0) + -4 | 0;
   $2 = (((($2 | 0) / (4 | 0) | 0) << 2 | 0) + $5 | 0) + -4 | 0;
   label$4 : while (1) {
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2] | 0;
    $2 = $2 + -4 | 0;
    $3 = $3 + -4 | 0;
    if ($3 >>> 0 >= $0 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  dlfree($0 | 0);
  HEAP32[(0 + 51900 | 0) >> 2] = $5;
  HEAP32[(0 + 51892 | 0) >> 2] = $5;
  HEAP32[(0 + 51896 | 0) >> 2] = $5;
  HEAP32[(0 + 51904 | 0) >> 2] = (HEAP32[(0 + 51904 | 0) >> 2] | 0) - $4 | 0;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function expand_k_data_28int_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $1 = 0, $5 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = (HEAP32[(0 + 51928 | 0) >> 2] | 0) + 1879048192 | 0;
  $3 = ($0 + 3 | 0) & -4 | 0;
  $4 = $2 + $3 | 0;
  label$1 : {
   label$2 : {
    if (($0 | 0) < (0 | 0)) {
     break label$2
    }
    if (($4 | 0) <= (HEAP32[(0 + 51940 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   HEAP32[($1 + 8 | 0) >> 2] = $4;
   HEAP32[($1 + 4 | 0) >> 2] = $4;
   HEAP32[$1 >> 2] = $0;
   run_error_28char__2c_20____29(5368 | 0, $1 | 0);
  }
  $0 = dlrealloc(HEAP32[(0 + 51916 | 0) >> 2] | 0 | 0, $4 | 0) | 0;
  HEAP32[(0 + 51916 | 0) >> 2] = $0;
  label$3 : {
   if ($0) {
    break label$3
   }
   fatal_error_28char__2c_20____29(5453 | 0, 0 | 0);
  }
  $5 = HEAP32[(0 + 51916 | 0) >> 2] | 0;
  HEAP32[(0 + 51924 | 0) >> 2] = $5;
  HEAP32[(0 + 51920 | 0) >> 2] = $5;
  HEAP32[(0 + 51928 | 0) >> 2] = (HEAP32[(0 + 51928 | 0) >> 2] | 0) + $3 | 0;
  label$4 : {
   $0 = $5 + (($2 | 0) / (4 | 0) | 0) | 0;
   $4 = ($4 | 0) / (4 | 0) | 0;
   if ($0 >>> 0 >= ($5 + $4 | 0) >>> 0) {
    break label$4
   }
   label$5 : while (1) {
    HEAP8[$0 >> 0] = 0;
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < ((HEAP32[(0 + 51924 | 0) >> 2] | 0) + $4 | 0) >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function mem_reference_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if ($0 >>> 0 < 4194304 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51864 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   return ($0 + (HEAP32[(0 + 51856 | 0) >> 2] | 0) | 0) + -4194304 | 0 | 0;
  }
  label$2 : {
   if ($0 >>> 0 < 268435456 >>> 0) {
    break label$2
   }
   if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$2
   }
   return ($0 + (HEAP32[(0 + 51868 | 0) >> 2] | 0) | 0) + -268435456 | 0 | 0;
  }
  label$3 : {
   if (($0 | 0) < (0 | 0)) {
    break label$3
   }
   $1 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
   if ($1 >>> 0 > $0 >>> 0) {
    break label$3
   }
   return (HEAP32[(0 + 51892 | 0) >> 2] | 0) + ($0 - $1 | 0) | 0 | 0;
  }
  label$4 : {
   if (($0 | 0) > (-1 | 0)) {
    break label$4
   }
   if ((HEAP32[(0 + 51912 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$4
   }
   return (HEAP32[(0 + 51908 | 0) >> 2] | 0) + ($0 ^ -2147483648 | 0) | 0 | 0;
  }
  label$5 : {
   if ($0 >>> 0 < -1879048192 >>> 0) {
    break label$5
   }
   if ((HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$5
   }
   return ($0 + (HEAP32[(0 + 51916 | 0) >> 2] | 0) | 0) + 1879048192 | 0 | 0;
  }
  run_error_28char__2c_20____29(5486 | 0, 0 | 0);
  return 0 | 0;
 }
 
 function read_mem_inst_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0 & 3 | 0) {
    break label$1
   }
   if ($0 >>> 0 < 4194304 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51864 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   return HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + (($0 + -4194304 | 0) & -4 | 0) | 0) >> 2] | 0 | 0;
  }
  label$2 : {
   if (($0 & -2147483645 | 0 | 0) != (-2147483648 | 0)) {
    break label$2
   }
   if ((HEAP32[(0 + 51912 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$2
   }
   return HEAP32[((HEAP32[(0 + 51908 | 0) >> 2] | 0) + (($0 & -4 | 0) ^ -2147483648 | 0) | 0) >> 2] | 0 | 0;
  }
  return bad_text_read_28unsigned_20int_29($0 | 0) | 0 | 0;
 }
 
 function bad_text_read_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  raise_exception_28int_29(6 | 0);
  HEAP32[(0 + 51376 | 0) >> 2] = $0;
  return inst_decode_28int_29(0 | 0) | 0 | 0;
 }
 
 function read_mem_byte_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if ($0 >>> 0 < 268435456 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   return HEAP8[(($0 + (HEAP32[(0 + 51880 | 0) >> 2] | 0) | 0) + -268435456 | 0) >> 0] | 0 | 0;
  }
  label$2 : {
   if (($0 | 0) < (0 | 0)) {
    break label$2
   }
   $1 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
   if ($1 >>> 0 > $0 >>> 0) {
    break label$2
   }
   return HEAP8[((HEAP32[(0 + 51900 | 0) >> 2] | 0) + ($0 - $1 | 0) | 0) >> 0] | 0 | 0;
  }
  label$3 : {
   if ($0 >>> 0 < -1879048192 >>> 0) {
    break label$3
   }
   if ((HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$3
   }
   return HEAP8[(($0 + (HEAP32[(0 + 51924 | 0) >> 2] | 0) | 0) + 1879048192 | 0) >> 0] | 0 | 0;
  }
  return bad_mem_read_28unsigned_20int_2c_20int_29($0 | 0, 0 | 0) | 0 | 0;
 }
 
 function bad_mem_read_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1 & $0 | 0)) {
      break label$3
     }
     raise_exception_28int_29(4 | 0);
     break label$2;
    }
    label$4 : {
     if ($0 >>> 0 < 4194304 >>> 0) {
      break label$4
     }
     if ((HEAP32[(0 + 51864 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
      break label$4
     }
     label$5 : {
      switch ($1 | 0) {
      case 0:
       $1 = ((HEAP32[((HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + (($0 + -4194304 | 0) & -4 | 0) | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> (($0 << 3 | 0) & 24 | 0) | 0) & 255 | 0;
       break label$1;
      case 1:
       $1 = ((HEAP32[((HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + (($0 + -4194304 | 0) & -4 | 0) | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> (($0 << 3 | 0) & 16 | 0) | 0) & 65535 | 0;
       break label$1;
      case 3:
       $1 = 0;
       $0 = HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + (($0 + -4194304 | 0) & -4 | 0) | 0) >> 2] | 0;
       if (!$0) {
        break label$1
       }
       $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       break label$1;
      default:
       break label$5;
      };
     }
     HEAP32[$2 >> 2] = $1;
     run_error_28char__2c_20____29(5689 | 0, $2 | 0);
     $1 = 0;
     break label$1;
    }
    label$9 : {
     if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 >= $0 >>> 0) {
      break label$9
     }
     $1 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
     if ($1 >>> 0 <= $0 >>> 0) {
      break label$9
     }
     if (($1 + -16777216 | 0) >>> 0 >= $0 >>> 0) {
      break label$9
     }
     expand_stack_28int_29(($1 - $0 | 0) + 4 | 0 | 0);
     $1 = 0;
     break label$1;
    }
    label$10 : {
     if ($0 >>> 0 < -65536 >>> 0) {
      break label$10
     }
     $1 = read_memory_mapped_IO_28unsigned_20int_29($0 | 0) | 0;
     break label$1;
    }
    raise_exception_28int_29(7 | 0);
   }
   $1 = 0;
   HEAP32[(0 + 51376 | 0) >> 2] = $0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function read_memory_mapped_IO_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    switch (__wasm_rotl_i32($0 + 65536 | 0 | 0, 30 | 0) | 0 | 0) {
    case 2:
     $0 = HEAP32[(0 + 30728 | 0) >> 2] | 0;
     break label$1;
    case 3:
     $0 = HEAPU8[(0 + 51960 | 0) >> 0] | 0;
     break label$1;
    case 0:
     $0 = HEAP32[(0 + 51952 | 0) >> 2] | 0;
     break label$1;
    case 1:
     HEAP32[(0 + 51952 | 0) >> 2] = (HEAP32[(0 + 51952 | 0) >> 2] | 0) & -2 | 0;
     HEAP32[(0 + 51396 | 0) >> 2] = (HEAP32[(0 + 51396 | 0) >> 2] | 0) & -2049 | 0;
     HEAP32[(0 + 51944 | 0) >> 2] = 0;
     $0 = HEAPU8[(0 + 51948 | 0) >> 0] | 0;
     break label$1;
    default:
     break label$2;
    };
   }
   HEAP32[$1 >> 2] = $0;
   run_error_28char__2c_20____29(5722 | 0, $1 | 0);
   $0 = 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function read_mem_half_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = $0 & 1 | 0;
   if ($1) {
    break label$1
   }
   if ($0 >>> 0 < 268435456 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   return HEAP16[((HEAP32[(0 + 51876 | 0) >> 2] | 0) + (($0 + -268435456 | 0) & -2 | 0) | 0) >> 1] | 0 | 0;
  }
  label$2 : {
   if ($0 & -2147483647 | 0) {
    break label$2
   }
   $2 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
   if ($2 >>> 0 > $0 >>> 0) {
    break label$2
   }
   return HEAP16[((HEAP32[(0 + 51896 | 0) >> 2] | 0) + (($0 - $2 | 0) & -2 | 0) | 0) >> 1] | 0 | 0;
  }
  label$3 : {
   if ($1) {
    break label$3
   }
   if ($0 >>> 0 < -1879048192 >>> 0) {
    break label$3
   }
   if ((HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$3
   }
   return HEAP16[((HEAP32[(0 + 51920 | 0) >> 2] | 0) + (($0 + 1879048192 | 0) & -2 | 0) | 0) >> 1] | 0 | 0;
  }
  return bad_mem_read_28unsigned_20int_2c_20int_29($0 | 0, 1 | 0) | 0 | 0;
 }
 
 function read_mem_word_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = $0 & 3 | 0;
   if ($1) {
    break label$1
   }
   if ($0 >>> 0 < 268435456 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   return HEAP32[((HEAP32[(0 + 51868 | 0) >> 2] | 0) + (($0 + -268435456 | 0) & -4 | 0) | 0) >> 2] | 0 | 0;
  }
  label$2 : {
   if ($0 & -2147483645 | 0) {
    break label$2
   }
   $2 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
   if ($2 >>> 0 > $0 >>> 0) {
    break label$2
   }
   return HEAP32[((HEAP32[(0 + 51892 | 0) >> 2] | 0) + (($0 - $2 | 0) & -4 | 0) | 0) >> 2] | 0 | 0;
  }
  label$3 : {
   if ($1) {
    break label$3
   }
   if ($0 >>> 0 < -1879048192 >>> 0) {
    break label$3
   }
   if ((HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$3
   }
   return HEAP32[((HEAP32[(0 + 51916 | 0) >> 2] | 0) + (($0 + 1879048192 | 0) & -4 | 0) | 0) >> 2] | 0 | 0;
  }
  return bad_mem_read_28unsigned_20int_2c_20int_29($0 | 0, 3 | 0) | 0 | 0;
 }
 
 function set_mem_inst_28unsigned_20int_2c_20inst_s__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[(0 + 51860 | 0) >> 0] = 1;
  label$1 : {
   if ($0 & 3 | 0) {
    break label$1
   }
   if ($0 >>> 0 < 4194304 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51864 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + (($0 + -4194304 | 0) & -4 | 0) | 0) >> 2] = $1;
   return;
  }
  label$2 : {
   if (($0 & -2147483645 | 0 | 0) != (-2147483648 | 0)) {
    break label$2
   }
   if ((HEAP32[(0 + 51912 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$2
   }
   HEAP32[((HEAP32[(0 + 51908 | 0) >> 2] | 0) + (($0 & -4 | 0) ^ -2147483648 | 0) | 0) >> 2] = $1;
   return;
  }
  bad_text_write_28unsigned_20int_2c_20inst_s__29($0 | 0, $1 | 0);
 }
 
 function bad_text_write_28unsigned_20int_2c_20inst_s__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  raise_exception_28int_29(6 | 0);
  HEAP32[(0 + 51376 | 0) >> 2] = $0;
  set_mem_word_28unsigned_20int_2c_20int_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
 }
 
 function set_mem_word_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  HEAP8[(0 + 51872 | 0) >> 0] = 1;
  label$1 : {
   $2 = $0 & 3 | 0;
   if ($2) {
    break label$1
   }
   if ($0 >>> 0 < 268435456 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   HEAP32[((HEAP32[(0 + 51868 | 0) >> 2] | 0) + (($0 + -268435456 | 0) & -4 | 0) | 0) >> 2] = $1;
   return;
  }
  label$2 : {
   if ($0 & -2147483645 | 0) {
    break label$2
   }
   $3 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
   if ($3 >>> 0 > $0 >>> 0) {
    break label$2
   }
   HEAP32[((HEAP32[(0 + 51892 | 0) >> 2] | 0) + (($0 - $3 | 0) & -4 | 0) | 0) >> 2] = $1;
   return;
  }
  label$3 : {
   if ($2) {
    break label$3
   }
   if ($0 >>> 0 < -1879048192 >>> 0) {
    break label$3
   }
   if ((HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$3
   }
   HEAP32[((HEAP32[(0 + 51916 | 0) >> 2] | 0) + (($0 + 1879048192 | 0) & -4 | 0) | 0) >> 2] = $1;
   return;
  }
  bad_mem_write_28unsigned_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 3 | 0);
 }
 
 function set_mem_byte_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP8[(0 + 51872 | 0) >> 0] = 1;
  label$1 : {
   if ($0 >>> 0 < 268435456 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   HEAP8[(($0 + (HEAP32[(0 + 51880 | 0) >> 2] | 0) | 0) + -268435456 | 0) >> 0] = $1;
   return;
  }
  label$2 : {
   if (($0 | 0) < (0 | 0)) {
    break label$2
   }
   $2 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
   if ($2 >>> 0 > $0 >>> 0) {
    break label$2
   }
   HEAP8[((HEAP32[(0 + 51900 | 0) >> 2] | 0) + ($0 - $2 | 0) | 0) >> 0] = $1;
   return;
  }
  label$3 : {
   if ($0 >>> 0 < -1879048192 >>> 0) {
    break label$3
   }
   if ((HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$3
   }
   HEAP8[(($0 + (HEAP32[(0 + 51924 | 0) >> 2] | 0) | 0) + 1879048192 | 0) >> 0] = $1;
   return;
  }
  bad_mem_write_28unsigned_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0);
 }
 
 function bad_mem_write_28unsigned_20int_2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    if (!($2 & $0 | 0)) {
     break label$2
    }
    raise_exception_28int_29(5 | 0);
    HEAP32[(0 + 51376 | 0) >> 2] = $0;
    break label$1;
   }
   label$3 : {
    if ($0 >>> 0 < 4194304 >>> 0) {
     break label$3
    }
    if ((HEAP32[(0 + 51864 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      switch ($2 | 0) {
      case 0:
       $2 = ($0 << 3 | 0) & 24 | 0;
       $1 = (HEAP32[((HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + (($0 + -4194304 | 0) & -4 | 0) | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & ((255 << $2 | 0) ^ -1 | 0) | 0 | (($1 & 255 | 0) << $2 | 0) | 0;
       break label$4;
      case 1:
       $2 = ($0 << 3 | 0) & 16 | 0;
       $1 = (HEAP32[((HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + (($0 + -4194304 | 0) & -4 | 0) | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & ((65535 << $2 | 0) ^ -1 | 0) | 0 | (($1 & 65535 | 0) << $2 | 0) | 0;
       break label$4;
      case 3:
       break label$4;
      default:
       break label$5;
      };
     }
     HEAP32[$3 >> 2] = $2;
     run_error_28char__2c_20____29(5689 | 0, $3 | 0);
     $1 = 0;
    }
    label$8 : {
     $0 = (($0 + -4194304 | 0) >>> 2 | 0) << 2 | 0;
     $2 = HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
     if (!$2) {
      break label$8
     }
     free_inst_28inst_s__29($2 | 0);
    }
    $2 = inst_decode_28int_29($1 | 0) | 0;
    HEAP32[((HEAP32[(0 + 51856 | 0) >> 2] | 0) + $0 | 0) >> 2] = $2;
    HEAP8[(0 + 51860 | 0) >> 0] = 1;
    break label$1;
   }
   label$9 : {
    if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 >= $0 >>> 0) {
     break label$9
    }
    $4 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
    if ($4 >>> 0 <= $0 >>> 0) {
     break label$9
    }
    if (($4 + -16777216 | 0) >>> 0 >= $0 >>> 0) {
     break label$9
    }
    expand_stack_28int_29(($4 - $0 | 0) + 4 | 0 | 0);
    label$10 : {
     label$11 : {
      $4 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
      if ($4 >>> 0 > $0 >>> 0) {
       break label$11
      }
      label$12 : {
       switch ($2 | 0) {
       case 0:
        HEAP8[((HEAP32[(0 + 51900 | 0) >> 2] | 0) + ($0 - $4 | 0) | 0) >> 0] = $1;
        break label$10;
       case 1:
        HEAP16[((HEAP32[(0 + 51896 | 0) >> 2] | 0) + (($0 - $4 | 0) & -2 | 0) | 0) >> 1] = $1;
        break label$10;
       default:
        break label$12;
       };
      }
      HEAP32[((HEAP32[(0 + 51892 | 0) >> 2] | 0) + (($0 - $4 | 0) & -4 | 0) | 0) >> 2] = $1;
      break label$10;
     }
     raise_exception_28int_29(7 | 0);
     HEAP32[(0 + 51376 | 0) >> 2] = $0;
    }
    HEAP8[(0 + 51872 | 0) >> 0] = 1;
    break label$1;
   }
   label$15 : {
    if ($0 >>> 0 < -65536 >>> 0) {
     break label$15
    }
    write_memory_mapped_IO_28unsigned_20int_2c_20int_29($0 | 0, $1 | 0);
    break label$1;
   }
   raise_exception_28int_29(7 | 0);
   HEAP32[(0 + 51376 | 0) >> 2] = $0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function write_memory_mapped_IO_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    switch (__wasm_rotl_i32($0 + 65536 | 0 | 0, 30 | 0) | 0 | 0) {
    case 2:
     $0 = HEAP32[(0 + 30728 | 0) >> 2] | 0;
     label$6 : {
      if (!($1 & 2 | 0)) {
       break label$6
      }
      HEAP32[(0 + 30728 | 0) >> 2] = $0 | 2 | 0;
      if (!($0 & 1 | 0)) {
       break label$1
      }
      HEAP32[(0 + 51396 | 0) >> 2] = HEAP32[(0 + 51396 | 0) >> 2] | 0 | 1024 | 0;
      break label$1;
     }
     HEAP32[(0 + 30728 | 0) >> 2] = $0 & -3 | 0;
     HEAP32[(0 + 51396 | 0) >> 2] = (HEAP32[(0 + 51396 | 0) >> 2] | 0) & -1025 | 0;
     break label$1;
    case 3:
     if (!((HEAPU8[(0 + 30728 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     HEAP32[(0 + 51960 | 0) >> 2] = $1 & 255 | 0;
     put_console_char_28char_29(($1 << 24 | 0) >> 24 | 0 | 0);
     HEAP32[(0 + 51956 | 0) >> 2] = 100;
     HEAP32[(0 + 30728 | 0) >> 2] = (HEAP32[(0 + 30728 | 0) >> 2] | 0) & -2 | 0;
     HEAP32[(0 + 51396 | 0) >> 2] = (HEAP32[(0 + 51396 | 0) >> 2] | 0) & -1025 | 0;
     break label$1;
    case 0:
     $0 = HEAP32[(0 + 51952 | 0) >> 2] | 0;
     label$7 : {
      if (!($1 & 2 | 0)) {
       break label$7
      }
      HEAP32[(0 + 51952 | 0) >> 2] = $0 | 2 | 0;
      if (!($0 & 1 | 0)) {
       break label$1
      }
      HEAP32[(0 + 51396 | 0) >> 2] = HEAP32[(0 + 51396 | 0) >> 2] | 0 | 2048 | 0;
      break label$1;
     }
     HEAP32[(0 + 51952 | 0) >> 2] = $0 & -3 | 0;
     HEAP32[(0 + 51396 | 0) >> 2] = (HEAP32[(0 + 51396 | 0) >> 2] | 0) & -2049 | 0;
     break label$1;
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   HEAP32[$2 >> 2] = $0;
   run_error_28char__2c_20____29(5772 | 0, $2 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function set_mem_half_28unsigned_20int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  HEAP8[(0 + 51872 | 0) >> 0] = 1;
  label$1 : {
   $2 = $0 & 1 | 0;
   if ($2) {
    break label$1
   }
   if ($0 >>> 0 < 268435456 >>> 0) {
    break label$1
   }
   if ((HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$1
   }
   HEAP16[((HEAP32[(0 + 51876 | 0) >> 2] | 0) + (($0 + -268435456 | 0) & -2 | 0) | 0) >> 1] = $1;
   return;
  }
  label$2 : {
   if ($0 & -2147483647 | 0) {
    break label$2
   }
   $3 = HEAP32[(0 + 51904 | 0) >> 2] | 0;
   if ($3 >>> 0 > $0 >>> 0) {
    break label$2
   }
   HEAP16[((HEAP32[(0 + 51896 | 0) >> 2] | 0) + (($0 - $3 | 0) & -2 | 0) | 0) >> 1] = $1;
   return;
  }
  label$3 : {
   if ($2) {
    break label$3
   }
   if ($0 >>> 0 < -1879048192 >>> 0) {
    break label$3
   }
   if ((HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0 <= $0 >>> 0) {
    break label$3
   }
   HEAP16[((HEAP32[(0 + 51920 | 0) >> 2] | 0) + (($0 + 1879048192 | 0) & -2 | 0) | 0) >> 1] = $1;
   return;
  }
  bad_mem_write_28unsigned_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 1 | 0);
 }
 
 function check_memory_mapped_IO_28_29() {
  var $0 = 0;
  label$1 : {
   label$2 : {
    $0 = HEAP32[(0 + 51944 | 0) >> 2] | 0;
    if (($0 | 0) < (1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 51944 | 0) >> 2] = $0 + -1 | 0;
    break label$1;
   }
   if (!(console_input_available_28_29() | 0)) {
    break label$1
   }
   HEAP32[(0 + 51948 | 0) >> 2] = get_console_char_28_29() | 0;
   HEAP32[(0 + 51944 | 0) >> 2] = 100;
   $0 = HEAP32[(0 + 51952 | 0) >> 2] | 0;
   HEAP32[(0 + 51952 | 0) >> 2] = $0 | 1 | 0;
   if (!($0 & 2 | 0)) {
    break label$1
   }
   HEAP32[(0 + 51396 | 0) >> 2] = HEAP32[(0 + 51396 | 0) >> 2] | 0 | 2048 | 0;
  }
  label$3 : {
   $0 = HEAP32[(0 + 51956 | 0) >> 2] | 0;
   if (($0 | 0) < (1 | 0)) {
    break label$3
   }
   HEAP32[(0 + 51956 | 0) >> 2] = $0 + -1 | 0;
   return;
  }
  label$4 : {
   $0 = HEAP32[(0 + 30728 | 0) >> 2] | 0;
   if ($0 & 1 | 0) {
    break label$4
   }
   HEAP32[(0 + 30728 | 0) >> 2] = $0 | 1 | 0;
   if (!($0 & 2 | 0)) {
    break label$4
   }
   HEAP32[(0 + 51396 | 0) >> 2] = HEAP32[(0 + 51396 | 0) >> 2] | 0 | 1024 | 0;
  }
 }
 
 function print_mem_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $0 = $0 & -4 | 0;
    if ($0 >>> 0 < 4194304 >>> 0) {
     break label$2
    }
    if ($0 >>> 0 >= (HEAP32[(0 + 51864 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    print_inst_28unsigned_20int_29($0 | 0);
    break label$1;
   }
   label$3 : {
    if ($0 >>> 0 < 268435456 >>> 0) {
     break label$3
    }
    if ($0 >>> 0 >= (HEAP32[(0 + 51884 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    $2 = read_mem_word_28unsigned_20int_29($0 | 0) | 0;
    HEAP32[$1 >> 2] = $0;
    HEAP32[($1 + 4 | 0) >> 2] = $0;
    HEAP32[($1 + 8 | 0) >> 2] = $2;
    HEAP32[($1 + 12 | 0) >> 2] = $2;
    $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
    HEAP32[($1 + 120 | 0) >> 2] = $0;
    HEAP32[($1 + 28 | 0) >> 2] = $0;
    write_output_28port_2c_20char__2c_20____29($1 + 28 | 0 | 0, 5516 | 0, $1 | 0);
    break label$1;
   }
   label$4 : {
    if (($0 | 0) < (0 | 0)) {
     break label$4
    }
    if ((HEAP32[(0 + 51904 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
     break label$4
    }
    $2 = read_mem_word_28unsigned_20int_29($0 | 0) | 0;
    HEAP32[($1 + 32 | 0) >> 2] = $0;
    HEAP32[($1 + 36 | 0) >> 2] = $0;
    HEAP32[($1 + 40 | 0) >> 2] = $2;
    HEAP32[($1 + 44 | 0) >> 2] = $2;
    $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
    HEAP32[($1 + 112 | 0) >> 2] = $0;
    HEAP32[($1 + 60 | 0) >> 2] = $0;
    write_output_28port_2c_20char__2c_20____29($1 + 60 | 0 | 0, 5554 | 0, $1 + 32 | 0 | 0);
    break label$1;
   }
   label$5 : {
    if (($0 | 0) > (-1 | 0)) {
     break label$5
    }
    if ($0 >>> 0 >= (HEAP32[(0 + 51912 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    print_inst_28unsigned_20int_29($0 | 0);
    break label$1;
   }
   label$6 : {
    if ($0 >>> 0 < -1879048192 >>> 0) {
     break label$6
    }
    if ($0 >>> 0 >= (HEAP32[(0 + 51928 | 0) >> 2] | 0) >>> 0) {
     break label$6
    }
    $2 = read_mem_word_28unsigned_20int_29($0 | 0) | 0;
    HEAP32[($1 + 64 | 0) >> 2] = $0;
    HEAP32[($1 + 68 | 0) >> 2] = $0;
    HEAP32[($1 + 72 | 0) >> 2] = $2;
    HEAP32[($1 + 76 | 0) >> 2] = $2;
    $0 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
    HEAP32[($1 + 104 | 0) >> 2] = $0;
    HEAP32[($1 + 92 | 0) >> 2] = $0;
    write_output_28port_2c_20char__2c_20____29($1 + 92 | 0 | 0, 5593 | 0, $1 + 64 | 0 | 0);
    break label$1;
   }
   HEAP32[($1 + 100 | 0) >> 2] = $0;
   HEAP32[($1 + 96 | 0) >> 2] = $0;
   error_28char__2c_20____29(5638 | 0, $1 + 96 | 0 | 0);
  }
  __stack_pointer = $1 + 128 | 0;
 }
 
 function text_begins_at_point_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  HEAP32[(0 + 51964 | 0) >> 2] = $0;
 }
 
 function k_text_begins_at_point_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  HEAP32[(0 + 51968 | 0) >> 2] = $0;
 }
 
 function set_text_pc_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  HEAP32[(HEAPU8[(0 + 51972 | 0) >> 0] | 0 ? 51968 : 51964) >> 2] = $0;
 }
 
 function current_text_pc_28_29() {
  return HEAP32[(HEAPU8[(0 + 51972 | 0) >> 0] | 0 ? 51968 : 51964) >> 2] | 0 | 0;
 }
 
 function increment_text_pc_28int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[(0 + 51972 | 0) >> 0] | 0)) {
     break label$2
    }
    $0 = (HEAP32[(0 + 51968 | 0) >> 2] | 0) + $0 | 0;
    HEAP32[(0 + 51968 | 0) >> 2] = $0;
    if ((HEAP32[(0 + 51912 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
     break label$1
    }
    run_error_28char__2c_20____29(5821 | 0, 0 | 0);
    return;
   }
   $0 = (HEAP32[(0 + 51964 | 0) >> 2] | 0) + $0 | 0;
   HEAP32[(0 + 51964 | 0) >> 2] = $0;
   if ((HEAP32[(0 + 51864 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
    break label$1
   }
   run_error_28char__2c_20____29(5855 | 0, 0 | 0);
  }
 }
 
 function user_kernel_text_segment_28bool_29($0) {
  $0 = $0 | 0;
  HEAP8[(0 + 51972 | 0) >> 0] = $0;
 }
 
 function store_instruction_28inst_s__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
     break label$2
    }
    store_word_28int_29(inst_encode_28inst_s__29($0 | 0) | 0 | 0);
    free_inst_28inst_s__29($0 | 0);
    break label$1;
   }
   if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP32[(0 + 50632 | 0) >> 2] = 0;
   set_mem_inst_28unsigned_20int_2c_20inst_s__29(HEAP32[(HEAPU8[(0 + 51972 | 0) >> 0] | 0 ? 51968 : 51964) >> 2] | 0 | 0, $0 | 0);
   label$3 : {
    label$4 : {
     if (!(HEAP32[(0 + 50632 | 0) >> 2] | 0)) {
      break label$4
     }
     HEAP32[$1 >> 2] = HEAP32[(HEAPU8[(0 + 51972 | 0) >> 0] | 0 ? 51968 : 51964) >> 2] | 0;
     error_28char__2c_20____29(5882 | 0, $1 | 0);
     break label$3;
    }
    increment_text_pc_28int_29(4 | 0);
   }
   if (!$0) {
    break label$1
   }
   HEAP32[($0 + 16 | 0) >> 2] = source_line_28_29() | 0;
   if (HEAP32[($0 + 8 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($0 + 8 | 0) >> 2] = inst_encode_28inst_s__29($0 | 0) | 0;
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function inst_encode_28inst_s__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $2 = map_int_to_name_val_val_28name_val_val__2c_20int_2c_20int_29(35312 | 0, 381 | 0, HEAP16[$0 >> 1] | 0 | 0) | 0;
   if (!$2) {
    break label$1
   }
   $1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   label$2 : {
    switch ((HEAP32[((map_int_to_name_val_val_28name_val_val__2c_20int_2c_20int_29(30736 | 0, 381 | 0, HEAP16[$0 >> 1] | 0 | 0) | 0) + 8 | 0) >> 2] | 0) + -10 | 0 | 0) {
    case 0:
     return $1 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 28 | 0) << 16 | 0) | 0 | 0;
    case 1:
     return $1 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0 | (((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0) | 0 | 0;
    case 2:
     return $1 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0 | (((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0) | 0 | 0;
    case 3:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | 0;
    case 4:
    case 5:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | 0;
    case 6:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | 0;
    case 10:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | 0;
    case 11:
     return ((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0 | $1 | 0 | 0;
    case 14:
     return ((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0 | $1 | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | 0;
    case 12:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | 0;
    case 13:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | 0;
    case 15:
     return ((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0 | $1 | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | (((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 31 | 0) << 6 | 0) | 0 | 0;
    case 16:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | 0;
    case 17:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | 0;
    case 20:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (HEAPU16[($0 + 6 | 0) >> 1] | 0) | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | 0;
    case 21:
     return ((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0 | $1 | 0 | (((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 31 | 0) << 6 | 0) | 0 | 0;
    case 22:
     return ((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0 | $1 | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | 0;
    case 23:
     return ((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0 | $1 | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | (HEAPU8[($0 + 4 | 0) >> 0] | 0) | 0 | (((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 31 | 0) << 6 | 0) | 0 | 0;
    case 24:
     return ((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0 | $1 | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | (((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 31 | 0) << 6 | 0) | 0 | 0;
    case 27:
     return ((HEAPU8[($0 + 4 | 0) >> 0] | 0) & 31 | 0) << 21 | 0 | $1 | 0 | (((HEAPU8[($0 + 5 | 0) >> 0] | 0) & 31 | 0) << 16 | 0) | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | 0;
    case 26:
     return ((HEAPU8[($0 + 5 | 0) >> 0] | 0) << 16 | 0) & 8126464 | 0 | $1 | 0 | (((HEAPU8[($0 + 6 | 0) >> 0] | 0) & 31 | 0) << 11 | 0) | 0 | (((HEAPU8[($0 + 7 | 0) >> 0] | 0) & 31 | 0) << 6 | 0) | 0 | 0;
    case 30:
     return HEAP32[($0 + 4 | 0) >> 2] | 0 | $1 | 0 | 0;
    case 32:
     break label$1;
    default:
     break label$2;
    };
   }
   $1 = 0;
   fatal_error_28char__2c_20____29(6304 | 0, 0 | 0);
  }
  return $1 | 0;
 }
 
 function free_inst_28inst_s__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if ((HEAP32[(0 + 51976 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
    break label$1
   }
   label$2 : {
    $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    dlfree($1 | 0);
   }
   dlfree($0 | 0);
  }
 }
 
 function i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29($0 | 0, $1 | 0, $2 | 0, $3 | 0);
  dlfree($3 | 0);
 }
 
 function i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = zmalloc_28int_29(20 | 0) | 0;
  HEAP8[($4 + 5 | 0) >> 0] = $1;
  HEAP8[($4 + 4 | 0) >> 0] = $2;
  HEAP16[$4 >> 1] = $0;
  HEAP32[($4 + 12 | 0) >> 2] = copy_imm_expr_28immexpr__29($3 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
     if (!$5) {
      break label$3
     }
     if (!(HEAP32[($5 + 4 | 0) >> 2] | 0)) {
      break label$2
     }
    }
    $5 = eval_imm_expr_28immexpr__29($3 | 0) | 0;
    if (HEAPU8[(0 + 50428 | 0) >> 0] | 0) {
     break label$1
    }
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        switch ($0 + -509 | 0 | 0) {
        default:
         if (($0 + -273 | 0) >>> 0 < 2 >>> 0) {
          break label$6
         }
         break;
        case 0:
        case 1:
        case 26:
        case 28:
        case 29:
        case 36:
        case 37:
        case 40:
         break label$6;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 27:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 38:
        case 39:
         break label$7;
        };
       }
       if (!(opcode_is_load_store_28int_29($0 | 0) | 0)) {
        break label$5
       }
       if (HEAPU16[($3 + 8 | 0) >> 1] | 0) {
        break label$5
       }
      }
      if (($5 + -32768 | 0) >>> 0 <= -65537 >>> 0) {
       break label$4
      }
      break label$1;
     }
     if ($5 >>> 0 < 65536 >>> 0) {
      break label$1
     }
    }
    free_inst_28inst_s__29($4 | 0);
    i_type_inst_full_word_28int_2c_20int_2c_20int_2c_20immexpr__2c_20int_2c_20int_29($0 | 0, $1 | 0, $2 | 0, $3 | 0, 1 | 0, $5 | 0);
    return;
   }
   label$9 : {
    label$10 : {
     if (HEAPU8[(0 + 50428 | 0) >> 0] | 0) {
      break label$10
     }
     if (!(HEAPU16[($3 + 8 | 0) >> 1] | 0)) {
      break label$9
     }
    }
    record_inst_uses_symbol_28inst_s__2c_20lab__29($4 | 0, $5 | 0);
    store_instruction_28inst_s__29($4 | 0);
    return;
   }
   free_inst_28inst_s__29($4 | 0);
   i_type_inst_full_word_28int_2c_20int_2c_20int_2c_20immexpr__2c_20int_2c_20int_29($0 | 0, $1 | 0, $2 | 0, $3 | 0, 0 | 0, 0 | 0);
   return;
  }
  resolve_a_label_28lab__2c_20inst_s__29(HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, $4 | 0);
  store_instruction_28inst_s__29($4 | 0);
 }
 
 function copy_imm_expr_28immexpr__29($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0;
  $1 = xmalloc_28int_29(12 | 0) | 0;
  HEAP32[($1 + 8 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
  return $1 | 0;
 }
 
 function eval_imm_expr_28immexpr__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($2) {
     break label$2
    }
    $2 = HEAP32[$0 >> 2] | 0;
    break label$1;
   }
   label$3 : {
    $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    if (!$3) {
     break label$3
    }
    $2 = (HEAP32[$0 >> 2] | 0) + $3 | 0;
    break label$1;
   }
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2] | 0;
   error_28char__2c_20____29(6272 | 0, $1 | 0);
   $2 = 0;
  }
  label$4 : {
   $0 = HEAP16[($0 + 8 | 0) >> 1] | 0;
   if (($0 | 0) < (1 | 0)) {
    break label$4
   }
   __stack_pointer = $1 + 16 | 0;
   return $2 >>> 16 | 0 | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return ($0 ? $2 & 65535 | 0 : $2) | 0;
 }
 
 function opcode_is_load_store_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 1;
  label$1 : {
   switch ($0 + -400 | 0 | 0) {
   default:
    $1 = 0;
    break;
   case 0:
   case 1:
   case 2:
   case 3:
   case 5:
   case 6:
   case 7:
   case 10:
   case 11:
   case 12:
   case 13:
   case 14:
   case 97:
   case 98:
   case 100:
   case 101:
   case 105:
   case 125:
   case 126:
   case 127:
   case 128:
   case 129:
    break label$1;
   };
  }
  return $1 | 0;
 }
 
 function i_type_inst_full_word_28int_2c_20int_2c_20int_2c_20immexpr__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  label$1 : {
   if (!(opcode_is_load_store_28int_29($0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $6 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (!$6) {
     break label$2
    }
    if ($2) {
     break label$2
    }
    if (!((HEAPU8[($6 + 8 | 0) >> 0] | 0) & 2 | 0)) {
     break label$2
    }
    $6 = (HEAP32[$3 >> 2] | 0) + (HEAP32[($6 + 4 | 0) >> 2] | 0) | 0;
    if (($6 + 32768 | 0) >>> 0 > 65535 >>> 0) {
     break label$2
    }
    i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($0 | 0, $1 | 0, 28 | 0, make_imm_expr_28int_2c_20char__2c_20bool_29($6 | 0, 0 | 0, 0 | 0) | 0 | 0);
    return;
   }
   label$3 : {
    if (!$4) {
     break label$3
    }
    $4 = $5 & 65535 | 0;
    label$4 : {
     $3 = $5 >>> 16 | 0;
     $5 = $5 & 32768 | 0;
     if (!($3 | $5 | 0)) {
      break label$4
     }
     if (!(($3 | 0) != (65535 | 0) | !$5 | 0)) {
      break label$4
     }
     i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(408 | 0, 1 | 0, 0 | 0, const_imm_expr_28int_29($3 + (($5 | 0) != (0 | 0)) | 0 | 0) | 0 | 0);
     label$5 : {
      if (!$2) {
       break label$5
      }
      r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(275 | 0, 1 | 0, 1 | 0, $2 | 0);
     }
     i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($0 | 0, $1 | 0, 1 | 0, lower_bits_of_expr_28immexpr__29(const_imm_expr_28int_29($4 | 0) | 0 | 0) | 0 | 0);
     return;
    }
    i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($0 | 0, $1 | 0, $2 | 0, const_imm_expr_28int_29($4 | 0) | 0 | 0);
    return;
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(408 | 0, 1 | 0, 0 | 0, upper_bits_of_expr_28immexpr__29($3 | 0) | 0 | 0);
   label$6 : {
    if (!$2) {
     break label$6
    }
    r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(275 | 0, 1 | 0, 1 | 0, $2 | 0);
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($0 | 0, $1 | 0, 1 | 0, lower_bits_of_expr_28immexpr__29($3 | 0) | 0 | 0);
   return;
  }
  label$7 : {
   if (!(opcode_is_branch_28int_29($0 | 0) | 0)) {
    break label$7
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($0 | 0, $1 | 0, $2 | 0, lower_bits_of_expr_28immexpr__29($3 | 0) | 0 | 0);
   return;
  }
  label$8 : {
   $6 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!$6) {
    break label$8
   }
   if ($2) {
    break label$8
   }
   if (!((HEAPU8[($6 + 8 | 0) >> 0] | 0) & 2 | 0)) {
    break label$8
   }
   $6 = (HEAP32[$3 >> 2] | 0) + (HEAP32[($6 + 4 | 0) >> 2] | 0) | 0;
   if (($6 + 32768 | 0) >>> 0 > 65535 >>> 0) {
    break label$8
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29((($0 | 0) == (408 | 0) ? 274 : $0) | 0, $1 | 0, 28 | 0, make_imm_expr_28int_2c_20char__2c_20bool_29($6 | 0, 0 | 0, 0 | 0) | 0 | 0);
   return;
  }
  label$9 : {
   if ($2) {
    break label$9
   }
   if (!(($0 | 0) == (408 | 0) | (($0 | 0) == (476 | 0) | ($0 + -273 | 0) >>> 0 < 2 >>> 0 | 0) | 0)) {
    break label$9
   }
   produce_immediate_28immexpr__2c_20int_2c_20int_2c_20int_29($3 | 0, $1 | 0, $4 | 0, $5 | 0);
   return;
  }
  produce_immediate_28immexpr__2c_20int_2c_20int_2c_20int_29($3 | 0, 1 | 0, $4 | 0, $5 | 0);
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(imm_op_to_op_28int_29($0 | 0) | 0 | 0, $1 | 0, $2 | 0, 1 | 0);
 }
 
 function make_imm_expr_28int_2c_20char__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = xmalloc_28int_29(12 | 0) | 0;
  HEAP8[($3 + 10 | 0) >> 0] = $2;
  $2 = 0;
  HEAP16[($3 + 8 | 0) >> 1] = 0;
  HEAP32[$3 >> 2] = $0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $2 = lookup_label_28char__29($1 | 0) | 0;
  }
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  return $3 | 0;
 }
 
 function const_imm_expr_28int_29($0) {
  $0 = $0 | 0;
  return make_imm_expr_28int_2c_20char__2c_20bool_29($0 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  store_instruction_28inst_s__29(make_r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0 | 0);
 }
 
 function lower_bits_of_expr_28immexpr__29($0) {
  $0 = $0 | 0;
  $0 = copy_imm_expr_28immexpr__29($0 | 0) | 0;
  HEAP16[($0 + 8 | 0) >> 1] = 65535;
  return $0 | 0;
 }
 
 function upper_bits_of_expr_28immexpr__29($0) {
  $0 = $0 | 0;
  $0 = copy_imm_expr_28immexpr__29($0 | 0) | 0;
  HEAP16[($0 + 8 | 0) >> 1] = 1;
  return $0 | 0;
 }
 
 function opcode_is_branch_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 1;
  label$1 : {
   if (($0 + -279 | 0) >>> 0 < 24 >>> 0) {
    break label$1
   }
   if (($0 + -561 | 0) >>> 0 < 10 >>> 0) {
    break label$1
   }
   $1 = 0;
  }
  return $1 | 0;
 }
 
 function produce_immediate_28immexpr__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   if ($3 & 65535 | 0) {
    break label$1
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(408 | 0, $1 | 0, 0 | 0, upper_bits_of_expr_28immexpr__29($0 | 0) | 0 | 0);
   return;
  }
  label$2 : {
   if (!$2) {
    break label$2
   }
   if ($3 >>> 0 > 65535 >>> 0) {
    break label$2
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, $1 | 0, 0 | 0, lower_bits_of_expr_28immexpr__29($0 | 0) | 0 | 0);
   return;
  }
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(408 | 0, 1 | 0, 0 | 0, upper_bits_of_expr_28immexpr__29($0 | 0) | 0 | 0);
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, $1 | 0, 1 | 0, lower_bits_of_expr_28immexpr__29($0 | 0) | 0 | 0);
 }
 
 function j_type_inst_28int_2c_20immexpr__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = zmalloc_28int_29(20 | 0) | 0;
  HEAP16[$2 >> 1] = $0;
  HEAP8[($1 + 10 | 0) >> 0] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[($2 + 12 | 0) >> 2] = copy_imm_expr_28immexpr__29($1 | 0) | 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    if (!(HEAP32[($1 + 4 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   resolve_a_label_28lab__2c_20inst_s__29($1 | 0, $2 | 0);
   store_instruction_28inst_s__29($2 | 0);
   return;
  }
  record_inst_uses_symbol_28inst_s__2c_20lab__29($2 | 0, $1 | 0);
  store_instruction_28inst_s__29($2 | 0);
 }
 
 function make_r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = zmalloc_28int_29(20 | 0) | 0;
  HEAP8[($4 + 7 | 0) >> 0] = 0;
  HEAP8[($4 + 6 | 0) >> 0] = $1;
  HEAP8[($4 + 5 | 0) >> 0] = $3;
  HEAP8[($4 + 4 | 0) >> 0] = $2;
  HEAP16[$4 >> 1] = $0;
  return $4 | 0;
 }
 
 function r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = make_r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0 | 0, $2 | 0, 0 | 0, $3 | 0) | 0;
  HEAP8[($0 + 7 | 0) >> 0] = $1;
  store_instruction_28inst_s__29($0 | 0);
 }
 
 function r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = make_r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0, $2 | 0) | 0;
  HEAP8[($0 + 7 | 0) >> 0] = $3 & 31 | 0;
  store_instruction_28inst_s__29($0 | 0);
 }
 
 function r_cond_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = 2;
  $1 = make_r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0, $2 | 0) | 0;
  HEAP8[($1 + 7 | 0) >> 0] = $3 << 2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($0 + -304 | 0 | 0) {
     case 6:
     case 8:
      $4 = 14;
      break label$2;
     case 9:
     case 11:
      $4 = 12;
      break label$2;
     case 12:
     case 14:
      $4 = 13;
      break label$2;
     case 18:
     case 20:
      $4 = 9;
      break label$2;
     case 15:
     case 17:
      $4 = 11;
      break label$2;
     case 21:
     case 23:
      $4 = 15;
      break label$2;
     case 27:
     case 29:
      $4 = 4;
      break label$2;
     case 24:
     case 26:
      $4 = 6;
      break label$2;
     case 30:
     case 32:
      $4 = 10;
      break label$2;
     case 33:
     case 35:
      $4 = 8;
      break label$2;
     case 3:
     case 5:
      $4 = 0;
      break label$2;
     case 36:
     case 38:
      $4 = 3;
      break label$2;
     case 42:
     case 44:
      $4 = 5;
      break label$2;
     case 39:
     case 41:
      $4 = 7;
      break label$2;
     case 0:
     case 2:
      break label$2;
     case 45:
     case 47:
      break label$3;
     default:
      break label$1;
     };
    }
    $4 = 1;
   }
   HEAP8[($1 + 4 | 0) >> 0] = $4;
  }
  store_instruction_28inst_s__29($1 | 0);
 }
 
 function copy_inst_28inst_s__29($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12 = 0, $15 = 0;
  $1 = xmalloc_28int_29(20 | 0) | 0;
  HEAP32[($1 + 16 | 0) >> 2] = HEAP32[($0 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  i64toi32_i32$0 = $1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$1;
  i64toi32_i32$1 = $1;
  HEAP32[$1 >> 2] = $15;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1 + 12 | 0) >> 2] = copy_imm_expr_28immexpr__29(HEAP32[($0 + 12 | 0) >> 2] | 0 | 0) | 0;
  return $1 | 0;
 }
 
 function initialize_inst_tables_28_29() {
  sort_name_table_28_29();
  sort_i_opcode_table_28_29();
  sort_a_opcode_table_28_29();
 }
 
 function sort_name_table_28_29() {
  qsort(30736 | 0, 381 | 0, 12 | 0, 21 | 0);
 }
 
 function sort_i_opcode_table_28_29() {
  qsort(35312 | 0, 381 | 0, 12 | 0, 21 | 0);
 }
 
 function sort_a_opcode_table_28_29() {
  qsort(39888 | 0, 381 | 0, 12 | 0, 21 | 0);
 }
 
 function compare_pair_value_28name_val_val__2c_20name_val_val__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if (($0 | 0) < ($1 | 0)) {
    break label$1
   }
   return ($0 | 0) > ($1 | 0) | 0;
  }
  return -1 | 0;
 }
 
 function print_inst_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $0 = inst_to_string_28unsigned_20int_29($0 | 0) | 0;
  HEAP32[$1 >> 2] = $0;
  $2 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $2;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  write_output_28port_2c_20char__2c_20____29($1 + 4 | 0 | 0, 5924 | 0, $1 | 0);
  dlfree($0 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function inst_to_string_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[(0 + 50632 | 0) >> 2] = 0;
  $2 = read_mem_inst_28unsigned_20int_29($0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 50632 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[$1 >> 2] = $0;
    error_28char__2c_20____29(5927 | 0, $1 | 0);
    $0 = 5981;
    break label$1;
   }
   ss_init_28str_stm__29($1 + 16 | 0 | 0);
   format_an_inst_28str_stm__2c_20inst_s__2c_20unsigned_20int_29($1 + 16 | 0 | 0, $2 | 0, $0 | 0);
   $0 = ss_to_string_28str_stm__29($1 + 16 | 0 | 0) | 0;
  }
  __stack_pointer = $1 + 32 | 0;
  return $0 | 0;
 }
 
 function format_an_inst_28str_stm__2c_20inst_s__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0;
  $3 = __stack_pointer - 448 | 0;
  __stack_pointer = $3;
  $4 = ss_length_28str_stm__29($0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if (!(inst_is_breakpoint_28unsigned_20int_29($2 | 0) | 0)) {
     break label$2
    }
    delete_breakpoint_28unsigned_20int_29($2 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 5982 | 0, 0 | 0);
    format_an_inst_28str_stm__2c_20inst_s__2c_20unsigned_20int_29($0 | 0, read_mem_inst_28unsigned_20int_29($2 | 0) | 0 | 0, $2 | 0);
    add_breakpoint_28unsigned_20int_29($2 | 0);
    break label$1;
   }
   HEAP32[($3 + 432 | 0) >> 2] = $2;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 5984 | 0, $3 + 432 | 0 | 0);
   label$3 : {
    if ($1) {
     break label$3
    }
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 5994 | 0, 0 | 0);
    break label$1;
   }
   label$4 : {
    $2 = map_int_to_name_val_val_28name_val_val__2c_20int_2c_20int_29(30736 | 0, 381 | 0, HEAP16[$1 >> 1] | 0 | 0) | 0;
    if ($2) {
     break label$4
    }
    HEAP32[$3 >> 2] = HEAP16[$1 >> 1] | 0;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6002 | 0, $3 | 0);
    break label$1;
   }
   $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   HEAP32[($3 + 420 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
   HEAP32[($3 + 416 | 0) >> 2] = $5;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6028 | 0, $3 + 416 | 0 | 0);
   label$5 : {
    label$6 : {
     switch ((HEAP32[($2 + 8 | 0) >> 2] | 0) + -10 | 0 | 0) {
     case 0:
      $2 = HEAP16[($1 + 6 | 0) >> 1] | 0;
      HEAP32[($3 + 32 | 0) >> 2] = (HEAPU8[($1 + 5 | 0) >> 0] | 0) >>> 2 | 0;
      $5 = $2 << 2 | 0;
      HEAP32[($3 + 36 | 0) >> 2] = $2 & 8192 | 0 ? $5 | -65536 | 0 : $5;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6039 | 0, $3 + 32 | 0 | 0);
      break label$5;
     case 1:
      $2 = HEAP16[($1 + 6 | 0) >> 1] | 0;
      HEAP32[($3 + 48 | 0) >> 2] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      $5 = $2 << 2 | 0;
      HEAP32[($3 + 52 | 0) >> 2] = $2 & 8192 | 0 ? $5 | -65536 | 0 : $5;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6045 | 0, $3 + 48 | 0 | 0);
      break label$5;
     case 2:
      $2 = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 68 | 0) >> 2] = HEAP16[($1 + 6 | 0) >> 1] | 0;
      HEAP32[($3 + 64 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6053 | 0, $3 + 64 | 0 | 0);
      break label$5;
     case 3:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 84 | 0) >> 2] = HEAP16[($1 + 6 | 0) >> 1] | 0;
      HEAP32[($3 + 80 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6053 | 0, $3 + 80 | 0 | 0);
      break label$5;
     case 4:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      $5 = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 104 | 0) >> 2] = HEAP16[($1 + 6 | 0) >> 1] | 0;
      HEAP32[($3 + 100 | 0) >> 2] = $5;
      HEAP32[($3 + 96 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6062 | 0, $3 + 96 | 0 | 0);
      break label$5;
     case 5:
      $2 = HEAP16[($1 + 6 | 0) >> 1] | 0;
      $5 = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 116 | 0) >> 2] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 112 | 0) >> 2] = $5;
      $5 = $2 << 2 | 0;
      HEAP32[($3 + 120 | 0) >> 2] = $2 & 8192 | 0 ? $5 | -65536 | 0 : $5;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6062 | 0, $3 + 112 | 0 | 0);
      break label$5;
     case 6:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      $5 = HEAP16[($1 + 6 | 0) >> 1] | 0;
      HEAP32[($3 + 136 | 0) >> 2] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 132 | 0) >> 2] = $5;
      HEAP32[($3 + 128 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6076 | 0, $3 + 128 | 0 | 0);
      break label$5;
     case 10:
      HEAP32[($3 + 144 | 0) >> 2] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6090 | 0, $3 + 144 | 0 | 0);
      break label$5;
     case 11:
      HEAP32[($3 + 160 | 0) >> 2] = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6090 | 0, $3 + 160 | 0 | 0);
      break label$5;
     case 14:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 180 | 0) >> 2] = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 176 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6095 | 0, $3 + 176 | 0 | 0);
      break label$5;
     case 12:
      $2 = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 196 | 0) >> 2] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 192 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6095 | 0, $3 + 192 | 0 | 0);
      break label$5;
     case 13:
      $2 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 212 | 0) >> 2] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 208 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6095 | 0, $3 + 208 | 0 | 0);
      break label$5;
     case 15:
      label$30 : {
       if (HEAP32[($1 + 8 | 0) >> 2] | 0) {
        break label$30
       }
       ss_erase_28str_stm__2c_20int_29($0 | 0, 3 | 0);
       ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6105 | 0, 0 | 0);
       break label$5;
      }
      $2 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      $5 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 232 | 0) >> 2] = HEAPU8[($1 + 7 | 0) >> 0] | 0;
      HEAP32[($3 + 228 | 0) >> 2] = $5;
      HEAP32[($3 + 224 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6062 | 0, $3 + 224 | 0 | 0);
      break label$5;
     case 16:
      $2 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      $5 = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 248 | 0) >> 2] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 244 | 0) >> 2] = $5;
      HEAP32[($3 + 240 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6109 | 0, $3 + 240 | 0 | 0);
      break label$5;
     case 17:
      $2 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      $5 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 264 | 0) >> 2] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 260 | 0) >> 2] = $5;
      HEAP32[($3 + 256 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6109 | 0, $3 + 256 | 0 | 0);
      break label$5;
     case 20:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      $5 = HEAP16[($1 + 6 | 0) >> 1] | 0;
      HEAP32[($3 + 280 | 0) >> 2] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 276 | 0) >> 2] = $5;
      HEAP32[($3 + 272 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6124 | 0, $3 + 272 | 0 | 0);
      break label$5;
     case 21:
      $2 = HEAPU8[($1 + 7 | 0) >> 0] | 0;
      HEAP32[($3 + 292 | 0) >> 2] = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 288 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6139 | 0, $3 + 288 | 0 | 0);
      break label$5;
     case 22:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 308 | 0) >> 2] = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 304 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6151 | 0, $3 + 304 | 0 | 0);
      break label$5;
     case 23:
      label$31 : {
       $2 = HEAPU8[($1 + 7 | 0) >> 0] | 0;
       if ($2) {
        break label$31
       }
       $2 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
       HEAP32[($3 + 324 | 0) >> 2] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
       HEAP32[($3 + 320 | 0) >> 2] = $2;
       ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6139 | 0, $3 + 320 | 0 | 0);
       break label$5;
      }
      $5 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 344 | 0) >> 2] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 340 | 0) >> 2] = $5;
      HEAP32[($3 + 336 | 0) >> 2] = $2 >>> 2 | 0;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6162 | 0, $3 + 336 | 0 | 0);
      break label$5;
     case 24:
      $2 = HEAPU8[($1 + 7 | 0) >> 0] | 0;
      $5 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 360 | 0) >> 2] = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      HEAP32[($3 + 356 | 0) >> 2] = $5;
      HEAP32[($3 + 352 | 0) >> 2] = $2;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6178 | 0, $3 + 352 | 0 | 0);
      break label$5;
     case 27:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      $5 = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 372 | 0) >> 2] = HEAPU8[($1 + 4 | 0) >> 0] | 0;
      HEAP32[($3 + 368 | 0) >> 2] = $5;
      HEAP32[($3 + 376 | 0) >> 2] = $2 >>> 2 | 0;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6062 | 0, $3 + 368 | 0 | 0);
      break label$5;
     case 26:
      $2 = HEAPU8[($1 + 5 | 0) >> 0] | 0;
      $5 = HEAPU8[($1 + 7 | 0) >> 0] | 0;
      HEAP32[($3 + 388 | 0) >> 2] = HEAPU8[($1 + 6 | 0) >> 0] | 0;
      HEAP32[($3 + 384 | 0) >> 2] = $5;
      HEAP32[($3 + 392 | 0) >> 2] = $2 >>> 2 | 0;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6196 | 0, $3 + 384 | 0 | 0);
      break label$5;
     case 30:
      HEAP32[($3 + 400 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) << 2 | 0;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6212 | 0, $3 + 400 | 0 | 0);
      break label$5;
     case 32:
      break label$5;
     default:
      break label$6;
     };
    }
    fatal_error_28char__2c_20____29(6220 | 0, 0 | 0);
   }
   label$32 : {
    $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    if (!$2) {
     break label$32
    }
    if (!(HEAP32[($2 + 4 | 0) >> 2] | 0)) {
     break label$32
    }
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6260 | 0, 0 | 0);
    $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $2 = -1;
    label$33 : {
     if (!(opcode_is_load_store_28int_29(HEAP16[$1 >> 1] | 0 | 0) | 0)) {
      break label$33
     }
     $2 = HEAPU8[($1 + 4 | 0) >> 0] | 0;
    }
    format_imm_expr_28str_stm__2c_20immexpr__2c_20int_29($0 | 0, $5 | 0, $2 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6263 | 0, 0 | 0);
   }
   label$34 : {
    if (!(HEAP32[($1 + 16 | 0) >> 2] | 0)) {
     break label$34
    }
    label$35 : {
     $2 = ($4 - (ss_length_28str_stm__29($0 | 0) | 0) | 0) + 57 | 0;
     if (($2 | 0) < (1 | 0)) {
      break label$35
     }
     label$36 : while (1) {
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6265 | 0, 0 | 0);
      $4 = ($2 | 0) > (1 | 0);
      $2 = $2 + -1 | 0;
      if ($4) {
       continue label$36
      }
      break label$36;
     };
    }
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6267 | 0, 0 | 0);
    HEAP32[($3 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 5924 | 0, $3 + 16 | 0 | 0);
   }
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 6270 | 0, 0 | 0);
  }
  __stack_pointer = $3 + 448 | 0;
 }
 
 function inst_is_breakpoint_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP32[(0 + 51976 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 51976 | 0) >> 2] = make_r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(303 | 0, 1 | 0, 0 | 0, 0 | 0) | 0;
  }
  return (read_mem_inst_28unsigned_20int_29($0 | 0) | 0 | 0) == (HEAP32[(0 + 51976 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function format_imm_expr_28str_stm__2c_20immexpr__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 80 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   HEAP32[($3 + 64 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 5924 | 0, $3 + 64 | 0 | 0);
  }
  $4 = HEAP32[$1 >> 2] | 0;
  label$2 : {
   label$3 : {
    if (!(HEAPU8[($1 + 10 | 0) >> 0] | 0)) {
     break label$3
    }
    HEAP32[($3 + 48 | 0) >> 2] = 0 - $4 | 0;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 8658 | 0, $3 + 48 | 0 | 0);
    break label$2;
   }
   label$4 : {
    if (($4 | 0) > (-11 | 0)) {
     break label$4
    }
    $4 = 0 - $4 | 0;
    HEAP32[($3 + 20 | 0) >> 2] = $4;
    HEAP32[($3 + 16 | 0) >> 2] = $4;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 8666 | 0, $3 + 16 | 0 | 0);
    break label$2;
   }
   if (($4 | 0) < (11 | 0)) {
    break label$2
   }
   HEAP32[($3 + 36 | 0) >> 2] = $4;
   HEAP32[($3 + 32 | 0) >> 2] = $4;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 8680 | 0, $3 + 32 | 0 | 0);
  }
  label$5 : {
   if (($2 | 0) == (-1 | 0)) {
    break label$5
   }
   if (!(HEAP32[($1 + 4 | 0) >> 2] | 0)) {
    break label$5
   }
   $4 = HEAP32[$1 >> 2] | 0;
   if (($4 + 10 | 0) >>> 0 < 21 >>> 0) {
    break label$5
   }
   label$6 : {
    if (!$2) {
     break label$6
    }
    if ($4) {
     break label$6
    }
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 8693 | 0, 0 | 0);
   }
   if (!(HEAP32[$1 >> 2] | 0 | $2 | 0)) {
    break label$5
   }
   HEAP32[$3 >> 2] = $2;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 8696 | 0, $3 | 0);
  }
  __stack_pointer = $3 + 80 | 0;
 }
 
 function opcode_is_nullified_branch_28int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   $0 = $0 + -280 | 0;
   if ($0 >>> 0 > 22 >>> 0) {
    break label$1
   }
   return (5855573 >>> ($0 & 8388607 | 0) | 0) & 1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function opcode_is_true_branch_28int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   $0 = $0 + -281 | 0;
   if ($0 >>> 0 > 5 >>> 0) {
    break label$1
   }
   return (51 >>> ($0 & 63 | 0) | 0) & 1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function opcode_is_jump_28int_29($0) {
  $0 = $0 | 0;
  return ($0 & -2 | 0 | 0) == (394 | 0) | 0;
 }
 
 function set_breakpoint_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   if (HEAP32[(0 + 51976 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 51976 | 0) >> 2] = make_r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(303 | 0, 1 | 0, 0 | 0, 0 | 0) | 0;
  }
  HEAP32[(0 + 50632 | 0) >> 2] = 0;
  label$2 : {
   $1 = read_mem_inst_28unsigned_20int_29($0 | 0) | 0;
   $2 = HEAP32[(0 + 51976 | 0) >> 2] | 0;
   if (($1 | 0) == ($2 | 0)) {
    break label$2
   }
   set_mem_inst_28unsigned_20int_2c_20inst_s__29($0 | 0, $2 | 0);
   return (HEAP32[(0 + 50632 | 0) >> 2] | 0 ? 0 : $1) | 0;
  }
  return 0 | 0;
 }
 
 function incr_expr_offset_28immexpr__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = copy_imm_expr_28immexpr__29($0 | 0) | 0;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $1 | 0;
  return $0 | 0;
 }
 
 function is_zero_imm_28immexpr__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 0;
  label$1 : {
   if (HEAP32[$0 >> 2] | 0) {
    break label$1
   }
   $1 = !(HEAP32[($0 + 4 | 0) >> 2] | 0);
  }
  return $1 | 0;
 }
 
 function make_addr_expr_28int_2c_20char__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = xmalloc_28int_29(8 | 0) | 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   if ($2) {
    break label$1
   }
   $4 = lookup_label_28char__29($1 | 0) | 0;
   if (!((HEAPU8[($4 + 8 | 0) >> 0] | 0) & 2 | 0)) {
    break label$1
   }
   HEAP8[$3 >> 0] = 28;
   HEAP32[($3 + 4 | 0) >> 2] = make_imm_expr_28int_2c_20char__2c_20bool_29(((HEAP32[($4 + 4 | 0) >> 2] | 0) + $0 | 0) - (HEAP32[(0 + 51888 | 0) >> 2] | 0) | 0 | 0, 0 | 0, 0 | 0) | 0;
   return $3 | 0;
  }
  HEAP8[$3 >> 0] = $2;
  $2 = 0;
  label$2 : {
   if (!$1) {
    break label$2
   }
   $2 = str_copy_28char__29($1 | 0) | 0;
  }
  HEAP32[($3 + 4 | 0) >> 2] = make_imm_expr_28int_2c_20char__2c_20bool_29($0 | 0, $2 | 0, 0 | 0) | 0;
  return $3 | 0;
 }
 
 function addr_expr_imm_28addrexpr__29($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function addr_expr_reg_28addrexpr__29($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 >> 0] | 0 | 0;
 }
 
 function inst_decode_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $1 = $0 & -67108864 | 0;
        if (($1 | 0) > (1073741823 | 0)) {
         break label$6
        }
        if (!$1) {
         break label$5
        }
        if (($1 | 0) != (67108864 | 0)) {
         break label$2
        }
        $1 = $0 & 2031616 | 0 | 67108864 | 0;
        break label$1;
       }
       if (($1 | 0) == (1073741824 | 0)) {
        break label$4
       }
       if (($1 | 0) == (1140850688 | 0)) {
        break label$3
       }
       if (($1 | 0) != (1879048192 | 0)) {
        break label$2
       }
      }
      $1 = $0 & -67108801 | 0;
      break label$1;
     }
     $1 = $0 & 65011743 | 0 | 1073741824 | 0;
     break label$1;
    }
    $1 = $0 & 65011712 | 0 | 1140850688 | 0;
    label$7 : {
     if (($0 & -16777216 | 0 | 0) != (1157627904 | 0)) {
      break label$7
     }
     $1 = $1 | ($0 & 65536 | 0) | 0;
     break label$1;
    }
    $1 = $1 | ($0 & 63 | 0) | 0;
    break label$1;
   }
   $1 = ($0 & -134217728 | 0 | 0) == (1207959552 | 0) ? $0 & -2097152 | 0 : $1;
  }
  label$8 : {
   $1 = map_int_to_name_val_val_28name_val_val__2c_20int_2c_20int_29(39888 | 0, 381 | 0, $1 | 0) | 0;
   if ($1) {
    break label$8
   }
   return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0 | 0;
  }
  label$9 : {
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             label$20 : {
              label$21 : {
               label$22 : {
                label$23 : {
                 label$24 : {
                  label$25 : {
                   label$26 : {
                    label$27 : {
                     label$28 : {
                      label$29 : {
                       label$30 : {
                        label$31 : {
                         label$32 : {
                          $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
                          switch ((HEAP32[((map_int_to_name_val_val_28name_val_val__2c_20int_2c_20int_29(30736 | 0, 381 | 0, $1 | 0) | 0) + 8 | 0) >> 2] | 0) + -10 | 0 | 0) {
                          case 32:
                           break label$10;
                          case 30:
                           break label$11;
                          case 26:
                           break label$12;
                          case 27:
                           break label$13;
                          case 24:
                           break label$14;
                          case 23:
                           break label$15;
                          case 22:
                           break label$16;
                          case 21:
                           break label$17;
                          case 20:
                           break label$18;
                          case 17:
                           break label$19;
                          case 16:
                           break label$20;
                          case 15:
                           break label$21;
                          case 13:
                           break label$22;
                          case 12:
                           break label$23;
                          case 14:
                           break label$24;
                          case 11:
                           break label$25;
                          case 10:
                           break label$26;
                          case 6:
                           break label$27;
                          case 4:
                          case 5:
                           break label$28;
                          case 3:
                           break label$29;
                          case 2:
                           break label$30;
                          case 1:
                           break label$31;
                          case 0:
                           break label$32;
                          default:
                           break label$9;
                          };
                         }
                         return mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, $0 & 65535 | 0 | 0) | 0 | 0;
                        }
                        return mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, 0 | 0, $0 & 65535 | 0 | 0) | 0 | 0;
                       }
                       return mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, 0 | 0, $0 & 65535 | 0 | 0) | 0 | 0;
                      }
                      return mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, $0 & 65535 | 0 | 0) | 0 | 0;
                     }
                     return mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, $0 & 65535 | 0 | 0) | 0 | 0;
                    }
                    return mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, $0 & 65535 | 0 | 0) | 0 | 0;
                   }
                   return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0 | 0;
                  }
                  return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0, 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
                 }
                 return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
                }
                return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, 0 | 0, 0 | 0) | 0 | 0;
               }
               return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
              }
              return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, ($0 >>> 6 | 0) & 31 | 0 | 0) | 0 | 0;
             }
             return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
            }
            return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
           }
           return mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, $0 & 65535 | 0 | 0) | 0 | 0;
          }
          return mk_co_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0, ($0 >>> 6 | 0) & 31 | 0 | 0) | 0 | 0;
         }
         return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
        }
        $1 = mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 6 | 0) & 31 | 0 | 0, 0 | 0) | 0;
        HEAP8[($1 + 4 | 0) >> 0] = $0 & 15 | 0;
        return $1 | 0;
       }
       return mk_co_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 6 | 0) & 31 | 0 | 0) | 0 | 0;
      }
      return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 21 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
     }
     return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, ($0 >>> 11 | 0) & 31 | 0 | 0, ($0 >>> 16 | 0) & 31 | 0 | 0, ($0 >>> 6 | 0) & 31 | 0 | 0, 0 | 0) | 0 | 0;
    }
    return mk_j_inst_28int_2c_20int_2c_20int_29($0 | 0, $1 | 0, $0 & 67108863 | 0 | 0) | 0 | 0;
   }
   return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, $1 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0 | 0;
  }
  return mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function mk_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = zmalloc_28int_29(20 | 0) | 0;
  HEAP32[($6 + 12 | 0) >> 2] = 0;
  HEAP32[($6 + 8 | 0) >> 2] = $0;
  HEAP8[($6 + 7 | 0) >> 0] = $5;
  HEAP8[($6 + 6 | 0) >> 0] = $4;
  HEAP8[($6 + 5 | 0) >> 0] = $3;
  HEAP8[($6 + 4 | 0) >> 0] = $2;
  HEAP16[$6 >> 1] = $1;
  return $6 | 0;
 }
 
 function mk_i_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = zmalloc_28int_29(20 | 0) | 0;
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  HEAP32[($5 + 8 | 0) >> 2] = $0;
  HEAP16[($5 + 6 | 0) >> 1] = $4;
  HEAP8[($5 + 5 | 0) >> 0] = $3;
  HEAP8[($5 + 4 | 0) >> 0] = $2;
  HEAP16[$5 >> 1] = $1;
  return $5 | 0;
 }
 
 function mk_co_r_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = zmalloc_28int_29(20 | 0) | 0;
  HEAP8[($5 + 6 | 0) >> 0] = $2;
  HEAP16[$5 >> 1] = $1;
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  HEAP32[($5 + 8 | 0) >> 2] = $0;
  HEAP8[($5 + 7 | 0) >> 0] = $4;
  HEAP8[($5 + 5 | 0) >> 0] = $3;
  return $5 | 0;
 }
 
 function mk_j_inst_28int_2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = zmalloc_28int_29(20 | 0) | 0;
  HEAP32[($3 + 12 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  HEAP16[$3 >> 1] = $1;
  return $3 | 0;
 }
 
 function user_kernel_data_segment_28bool_29($0) {
  $0 = $0 | 0;
  HEAP8[(0 + 51980 | 0) >> 0] = $0;
 }
 
 function end_of_assembly_file_28_29() {
  HEAP8[(0 + 51981 | 0) >> 0] = 0;
  HEAP8[(0 + 51980 | 0) >> 0] = 0;
 }
 
 function data_begins_at_point_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (HEAPU8[(0 + 50428 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP32[(0 + 51988 | 0) >> 2] = $0;
   $1 = $0 + 32768 | 0;
   HEAP32[(0 + 51888 | 0) >> 2] = $1;
   HEAP32[(50672 + 112 | 0) >> 2] = $1;
   $0 = $0 + 65536 | 0;
  }
  HEAP32[(0 + 51984 | 0) >> 2] = $0;
 }
 
 function k_data_begins_at_point_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  HEAP32[(0 + 51992 | 0) >> 2] = $0;
 }
 
 function align_data_28int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   HEAP8[(0 + 51981 | 0) >> 0] = 1;
   return;
  }
  label$2 : {
   if (!(HEAPU8[(0 + 51980 | 0) >> 0] | 0)) {
    break label$2
   }
   $0 = -1 << $0 | 0;
   $0 = ((HEAP32[(0 + 51992 | 0) >> 2] | 0) + ($0 ^ -1 | 0) | 0) & $0 | 0;
   HEAP32[(0 + 51992 | 0) >> 2] = $0;
   fix_current_label_address_28unsigned_20int_29($0 | 0);
   return;
  }
  $0 = -1 << $0 | 0;
  $0 = ((HEAP32[(0 + 51984 | 0) >> 2] | 0) + ($0 ^ -1 | 0) | 0) & $0 | 0;
  HEAP32[(0 + 51984 | 0) >> 2] = $0;
  fix_current_label_address_28unsigned_20int_29($0 | 0);
 }
 
 function set_data_alignment_28int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAPU8[(0 + 51981 | 0) >> 0] | 0) {
    break label$1
   }
   align_data_28int_29($0 | 0);
  }
 }
 
 function enable_data_alignment_28_29() {
  HEAP8[(0 + 51981 | 0) >> 0] = 0;
 }
 
 function set_data_pc_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] = $0;
 }
 
 function current_data_pc_28_29() {
  return HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] | 0 | 0;
 }
 
 function increment_data_pc_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[(0 + 51980 | 0) >> 0] | 0)) {
     break label$2
    }
    $0 = (HEAP32[(0 + 51992 | 0) >> 2] | 0) + $0 | 0;
    HEAP32[(0 + 51992 | 0) >> 2] = $0;
    $1 = HEAP32[(0 + 51928 | 0) >> 2] | 0;
    if ($0 >>> 0 < $1 >>> 0) {
     break label$1
    }
    expand_k_data_28int_29((($0 - $1 | 0) + 65536 | 0) & -65536 | 0 | 0);
    return;
   }
   $0 = (HEAP32[(0 + 51984 | 0) >> 2] | 0) + $0 | 0;
   HEAP32[(0 + 51984 | 0) >> 2] = $0;
   $1 = HEAP32[(0 + 51884 | 0) >> 2] | 0;
   if ($0 >>> 0 < $1 >>> 0) {
    break label$1
   }
   expand_data_28int_29((($0 - $1 | 0) + 65536 | 0) & -65536 | 0 | 0);
  }
 }
 
 function extern_directive_28char__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $0 = make_label_global_28char__29($0 | 0) | 0;
  label$1 : {
   if (HEAPU8[(0 + 50428 | 0) >> 0] | 0) {
    break label$1
   }
   if (($1 + -1 | 0) >>> 0 > 7 >>> 0) {
    break label$1
   }
   $2 = HEAPU8[($0 + 8 | 0) >> 0] | 0;
   if ($2 & 2 | 0) {
    break label$1
   }
   $3 = HEAP32[(0 + 51988 | 0) >> 2] | 0;
   $1 = $3 + $1 | 0;
   if ($1 >>> 0 >= ((HEAP32[(0 + 51888 | 0) >> 2] | 0) + 32768 | 0) >>> 0) {
    break label$1
   }
   HEAP32[($0 + 4 | 0) >> 2] = $3;
   HEAP8[($0 + 8 | 0) >> 0] = $2 | 2 | 0;
   HEAP32[(0 + 51988 | 0) >> 2] = $1;
  }
 }
 
 function lcomm_directive_28char__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   if (($1 + -1 | 0) >>> 0 > 7 >>> 0) {
    break label$1
   }
   if ((HEAPU8[(0 + 50428 | 0) >> 0] | 0) & 255 | 0) {
    break label$1
   }
   $2 = HEAP32[(0 + 51988 | 0) >> 2] | 0;
   if (($2 + $1 | 0) >>> 0 >= ((HEAP32[(0 + 51888 | 0) >> 2] | 0) + 32768 | 0) >>> 0) {
    break label$1
   }
   $0 = record_label_28char__2c_20unsigned_20int_2c_20int_29($0 | 0, $2 | 0, 1 | 0) | 0;
   HEAP8[($0 + 8 | 0) >> 0] = HEAPU8[($0 + 8 | 0) >> 0] | 0 | 2 | 0;
   HEAP32[(0 + 51988 | 0) >> 2] = (HEAP32[(0 + 51988 | 0) >> 2] | 0) + $1 | 0;
   return;
  }
  record_label_28char__2c_20unsigned_20int_2c_20int_29($0 | 0, HEAP32[(0 + 51984 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  label$2 : {
   if (($1 | 0) < (1 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    store_byte_28int_29(0 | 0);
    $0 = ($1 | 0) > (1 | 0);
    $1 = $1 + -1 | 0;
    if ($0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function store_byte_28int_29($0) {
  $0 = $0 | 0;
  set_mem_byte_28unsigned_20int_2c_20int_29(HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] | 0 | 0, $0 | 0);
  increment_data_pc_28int_29(1 | 0);
 }
 
 function store_string_28char__2c_20int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    store_byte_28int_29(HEAP8[$0 >> 0] | 0 | 0);
    $0 = $0 + 1 | 0;
    $3 = ($1 | 0) > (1 | 0);
    $1 = $1 + -1 | 0;
    if ($3) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!$2) {
    break label$3
   }
   store_byte_28int_29(0 | 0);
  }
 }
 
 function store_half_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] | 0;
   if (!($1 & 1 | 0)) {
    break label$1
   }
   store_byte_28int_29($0 & 255 | 0 | 0);
   store_byte_28int_29(($0 >>> 8 | 0) & 255 | 0 | 0);
   return;
  }
  set_mem_half_28unsigned_20int_2c_20int_29($1 | 0, $0 | 0);
  increment_data_pc_28int_29(2 | 0);
 }
 
 function store_word_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] | 0;
   if (!($1 & 3 | 0)) {
    break label$1
   }
   store_half_28int_29($0 & 65535 | 0 | 0);
   store_half_28int_29($0 >>> 16 | 0 | 0);
   return;
  }
  set_mem_word_28unsigned_20int_2c_20int_29($1 | 0, $0 | 0);
  increment_data_pc_28int_29(4 | 0);
 }
 
 function store_double_28double__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   $2 = HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] | 0;
   if (!($2 & 7 | 0)) {
    break label$1
   }
   store_word_28int_29($1 | 0);
   store_word_28int_29(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   return;
  }
  set_mem_word_28unsigned_20int_2c_20int_29($2 | 0, $1 | 0);
  increment_data_pc_28int_29(4 | 0);
  set_mem_word_28unsigned_20int_2c_20int_29(HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
  increment_data_pc_28int_29(4 | 0);
 }
 
 function store_float_28double__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = (wasm2js_scratch_store_f32(Math_fround(+HEAPF64[$0 >> 3])), wasm2js_scratch_load_i32(2));
  label$1 : {
   $1 = HEAP32[(HEAPU8[(0 + 51980 | 0) >> 0] | 0 ? 51992 : 51984) >> 2] | 0;
   if (!($1 & 3 | 0)) {
    break label$1
   }
   store_half_28int_29($0 & 65535 | 0 | 0);
   store_half_28int_29($0 >>> 16 | 0 | 0);
   return;
  }
  set_mem_word_28unsigned_20int_2c_20int_29($1 | 0, $0 | 0);
  increment_data_pc_28int_29(4 | 0);
 }
 
 function initialize_symbol_table_28_29() {
  var $2 = 0, $0 = 0, $1 = 0, $3 = 0;
  $0 = 0;
  label$1 : while (1) {
   label$2 : {
    $1 = ($0 << 2 | 0) + 52e3 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    if (!$2) {
     break label$2
    }
    label$3 : while (1) {
     dlfree(HEAP32[$2 >> 2] | 0 | 0);
     $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     dlfree($2 | 0);
     $2 = $3;
     if ($2) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[$1 >> 2] = 0;
   $0 = $0 + 1 | 0;
   if (($0 | 0) != (8191 | 0)) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[(0 + 84764 | 0) >> 2] = 0;
 }
 
 function label_is_defined_28char__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  get_hash_28char__2c_20int__2c_20lab___29($0 | 0, $1 + 12 | 0 | 0, $1 + 8 | 0 | 0);
  $0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function get_hash_28char__2c_20int__2c_20lab___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  $3 = 0;
  label$1 : while (1) {
   $4 = $3;
   $3 = $4 + 1 | 0;
   if (HEAPU8[($0 + $4 | 0) >> 0] | 0) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   label$3 : {
    if ($4) {
     break label$3
    }
    $5 = $4;
    break label$2;
   }
   $3 = 0;
   $5 = $4;
   label$4 : while (1) {
    $5 = Math_imul($5, 613) + (HEAP8[($0 + $3 | 0) >> 0] | 0) | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($4 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  $4 = (($5 & 1073741823 | 0) >>> 0) % (8191 >>> 0) | 0;
  HEAP32[$1 >> 2] = $4;
  label$5 : {
   $4 = HEAP32[(($4 << 2 | 0) + 52e3 | 0) >> 2] | 0;
   if (!$4) {
    break label$5
   }
   label$6 : while (1) {
    label$7 : {
     if (strcmp(HEAP32[$4 >> 2] | 0 | 0, $0 | 0) | 0) {
      break label$7
     }
     HEAP32[$2 >> 2] = $4;
     return;
    }
    $4 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    if ($4) {
     continue label$6
    }
    break label$6;
   };
  }
  HEAP32[$2 >> 2] = 0;
 }
 
 function lookup_label_28char__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  get_hash_28char__2c_20int__2c_20lab___29($0 | 0, $1 + 12 | 0 | 0, $1 + 8 | 0 | 0);
  label$1 : {
   $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   if ($2) {
    break label$1
   }
   $2 = xmalloc_28int_29(24 | 0) | 0;
   $0 = str_copy_28char__29($0 | 0) | 0;
   HEAP32[($2 + 4 | 0) >> 2] = 0;
   HEAP32[$2 >> 2] = $0;
   HEAP32[($2 + 20 | 0) >> 2] = 0;
   HEAP8[($2 + 8 | 0) >> 0] = (HEAPU8[($2 + 8 | 0) >> 0] | 0) & 248 | 0;
   $0 = ((HEAP32[($1 + 12 | 0) >> 2] | 0) << 2 | 0) + 52e3 | 0;
   HEAP32[($2 + 12 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $2;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function record_label_28char__2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   $0 = lookup_label_28char__29($0 | 0) | 0;
   if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 2 | 0) {
    break label$1
   }
   label$2 : {
    if (!(HEAP32[($0 + 4 | 0) >> 2] | 0)) {
     break label$2
    }
    yyerror_28char__29(8702 | 0);
    return $0 | 0;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1;
  }
  label$3 : {
   if (!$2) {
    break label$3
   }
   resolve_label_uses_28lab__29($0 | 0);
  }
  label$4 : {
   if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 1 | 0) {
    break label$4
   }
   HEAP32[($0 + 16 | 0) >> 2] = HEAP32[(0 + 84764 | 0) >> 2] | 0;
   HEAP32[(0 + 84764 | 0) >> 2] = $0;
  }
  return $0 | 0;
 }
 
 function resolve_label_uses_28lab__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   label$2 : while (1) {
    $2 = $1;
    resolve_a_label_sub_28lab__2c_20inst_s__2c_20unsigned_20int_29($0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + 4 | 0) >> 2] | 0 | 0);
    label$3 : {
     $3 = HEAP32[$2 >> 2] | 0;
     if (!$3) {
      break label$3
     }
     $1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if ($1 >>> 0 < 268435456 >>> 0) {
      break label$3
     }
     if ($1 >>> 0 >= (HEAP32[(0 + 51904 | 0) >> 2] | 0) >>> 0) {
      break label$3
     }
     set_mem_word_28unsigned_20int_2c_20int_29($1 | 0, inst_encode_28inst_s__29($3 | 0) | 0 | 0);
     free_inst_28inst_s__29(HEAP32[$2 >> 2] | 0 | 0);
    }
    $1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    dlfree($2 | 0);
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[($0 + 20 | 0) >> 2] = 0;
 }
 
 function resolve_a_label_sub_28lab__2c_20inst_s__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    set_mem_word_28unsigned_20int_2c_20int_29($2 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    if (!(HEAPU8[($0 + 10 | 0) >> 0] | 0)) {
     break label$3
    }
    HEAP32[$0 >> 2] = 0 - $2 | 0;
   }
   label$4 : {
    label$5 : {
     $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (!$0) {
      break label$5
     }
     if (!(HEAP32[($0 + 4 | 0) >> 2] | 0)) {
      break label$4
     }
    }
    label$6 : {
     label$7 : {
      if (!(opcode_is_branch_28int_29(HEAP16[$1 >> 1] | 0 | 0) | 0)) {
       break label$7
      }
      $0 = eval_imm_expr_28immexpr__29(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
      $4 = (eval_imm_expr_28immexpr__29(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 2 | 0;
      $0 = (($0 & 32768 | 0 ? $4 | 49152 | 0 : $4) & 65535 | 0) - ((HEAPU8[(0 + 50429 | 0) >> 0] | 0) & 1 | 0) | 0;
      $4 = -65536;
      break label$6;
     }
     label$8 : {
      if (!(opcode_is_jump_28int_29(HEAP16[$1 >> 1] | 0 | 0) | 0)) {
       break label$8
      }
      label$9 : {
       $0 = eval_imm_expr_28immexpr__29(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
       if (($0 ^ $2 | 0) >>> 0 < 268435456 >>> 0) {
        break label$9
       }
       HEAP32[$3 >> 2] = $2;
       error_28char__2c_20____29(8802 | 0, $3 | 0);
      }
      $0 = ($0 >>> 2 | 0) & 67108863 | 0;
      $4 = 0;
      break label$6;
     }
     $5 = opcode_is_load_store_28int_29(HEAP16[$1 >> 1] | 0 | 0) | 0;
     $0 = eval_imm_expr_28immexpr__29(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
     $4 = -65536;
     if (!$5) {
      break label$6
     }
     if (!($0 & 32768 | 0)) {
      break label$6
     }
     $5 = read_mem_inst_28unsigned_20int_29($2 + -4 | 0 | 0) | 0;
     $6 = read_mem_inst_28unsigned_20int_29($2 + -8 | 0 | 0) | 0;
     label$10 : {
      if (!$5) {
       break label$10
      }
      if ((HEAPU16[$5 >> 1] | 0 | 0) != (408 | 0)) {
       break label$10
      }
      $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
      if ((HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($7 + 4 | 0) >> 2] | 0 | 0)) {
       break label$10
      }
      if (HEAPU16[($5 + 6 | 0) >> 1] | 0) {
       break label$10
      }
      HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 65536 | 0;
      break label$6;
     }
     if (!$6) {
      break label$6
     }
     if ((HEAPU16[$6 >> 1] | 0 | 0) != (408 | 0)) {
      break label$6
     }
     $5 = HEAP32[($6 + 12 | 0) >> 2] | 0;
     if ((HEAP32[((HEAP32[($1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     if (HEAPU16[($6 + 6 | 0) >> 1] | 0) {
      break label$6
     }
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 65536 | 0;
    }
    label$11 : {
     $4 = $0 & $4 | 0;
     if (($4 | 0) == (-65536 | 0)) {
      break label$11
     }
     if (!$4) {
      break label$11
     }
     error_28char__2c_20____29(8872 | 0, 0 | 0);
     print_inst_28unsigned_20int_29($2 | 0);
    }
    label$12 : {
     label$13 : {
      if (!(opcode_is_jump_28int_29(HEAP16[$1 >> 1] | 0 | 0) | 0)) {
       break label$13
      }
      HEAP32[($1 + 4 | 0) >> 2] = $0;
      break label$12;
     }
     HEAP16[($1 + 6 | 0) >> 1] = $0;
    }
    HEAP32[($1 + 8 | 0) >> 2] = inst_encode_28inst_s__29($1 | 0) | 0;
    break label$1;
   }
   HEAP32[($3 + 16 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
   error_28char__2c_20____29(8913 | 0, $3 + 16 | 0 | 0);
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function make_label_global_28char__29($0) {
  $0 = $0 | 0;
  $0 = lookup_label_28char__29($0 | 0) | 0;
  HEAP8[($0 + 8 | 0) >> 0] = HEAPU8[($0 + 8 | 0) >> 0] | 0 | 1 | 0;
  return $0 | 0;
 }
 
 function record_inst_uses_symbol_28inst_s__2c_20lab__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = xmalloc_28int_29(12 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
     break label$2
    }
    HEAP32[$2 >> 2] = copy_inst_28inst_s__29($0 | 0) | 0;
    $0 = current_data_pc_28_29() | 0;
    break label$1;
   }
   HEAP32[$2 >> 2] = $0;
   $0 = current_text_pc_28_29() | 0;
  }
  HEAP32[($2 + 4 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = $2;
 }
 
 function record_data_uses_symbol_28unsigned_20int_2c_20lab__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = xmalloc_28int_29(12 | 0) | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = $2;
 }
 
 function resolve_a_label_28lab__2c_20inst_s__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
    break label$1
   }
   resolve_a_label_sub_28lab__2c_20inst_s__2c_20unsigned_20int_29($0 | 0, $1 | 0, current_data_pc_28_29() | 0 | 0);
   return;
  }
  resolve_a_label_sub_28lab__2c_20inst_s__2c_20unsigned_20int_29($0 | 0, $1 | 0, current_text_pc_28_29() | 0 | 0);
 }
 
 function flush_local_labels_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   $2 = HEAP32[(0 + 84764 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   label$2 : while (1) {
    get_hash_28char__2c_20int__2c_20lab___29(HEAP32[$2 >> 2] | 0 | 0, $1 + 12 | 0 | 0, $1 + 8 | 0 | 0);
    label$3 : {
     $3 = ((HEAP32[($1 + 12 | 0) >> 2] | 0) << 2 | 0) + 52e3 | 0;
     $4 = HEAP32[$3 >> 2] | 0;
     if (!$4) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       if (($4 | 0) == ($5 | 0)) {
        break label$5
       }
       $6 = $4;
       label$6 : while (1) {
        $4 = HEAP32[($6 + 12 | 0) >> 2] | 0;
        if (!$4) {
         break label$3
        }
        $7 = $6;
        $6 = $4;
        if (($4 | 0) != ($5 | 0)) {
         continue label$6
        }
        break label$4;
       };
      }
      $7 = 0;
     }
     HEAP32[($7 ? $7 + 12 | 0 : $3) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
     if (!$0) {
      break label$3
     }
     if (HEAP32[($5 + 4 | 0) >> 2] | 0) {
      break label$3
     }
     if ((HEAPU8[($5 + 8 | 0) >> 0] | 0) & 4 | 0) {
      break label$3
     }
     HEAP32[$1 >> 2] = HEAP32[$5 >> 2] | 0;
     error_28char__2c_20____29(8739 | 0, $1 | 0);
    }
    $2 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[(0 + 84764 | 0) >> 2] = 0;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function find_symbol_address_28char__29($0) {
  $0 = $0 | 0;
  label$1 : {
   $0 = lookup_label_28char__29($0 | 0) | 0;
   if (!$0) {
    break label$1
   }
   return HEAP32[($0 + 4 | 0) >> 2] | 0 | 0;
  }
  return 0 | 0;
 }
 
 function print_symbols_28_29() {
  var $0 = 0, $2 = 0, $1 = 0, $3 = 0, $4 = 0, i64toi32_i32$1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  $1 = 0;
  label$1 : while (1) {
   label$2 : {
    $2 = HEAP32[(($1 << 2 | 0) + 52e3 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    label$3 : while (1) {
     $3 = HEAP32[(0 + 50436 | 0) >> 2] | 0;
     HEAP32[($0 + 24 | 0) >> 2] = $3;
     $4 = HEAPU8[($2 + 8 | 0) >> 0] | 0;
     i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     HEAP32[($0 + 4 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
     HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0 + 20 | 0) >> 2] = $3;
     HEAP32[$0 >> 2] = $4 & 1 | 0 ? 8797 : 8800;
     write_output_28port_2c_20char__2c_20____29($0 + 20 | 0 | 0, 8781 | 0, $0 | 0);
     $2 = HEAP32[($2 + 12 | 0) >> 2] | 0;
     if ($2) {
      continue label$3
     }
     break label$3;
    };
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) != (8191 | 0)) {
    continue label$1
   }
   break label$1;
  };
  __stack_pointer = $0 + 32 | 0;
 }
 
 function undefined_symbol_string_28_29() {
  var $1 = 0, $2 = 0, $4 = 0, $7 = 0, $0 = 0, $3 = 0, $6 = 0, $5 = 0, $8 = 0, $9 = 0;
  $0 = 0;
  $1 = 128;
  $2 = dlmalloc(128 | 0) | 0;
  $3 = 0;
  label$1 : while (1) {
   label$2 : {
    $4 = HEAP32[(($0 << 2 | 0) + 52e3 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      if (HEAP32[($4 + 4 | 0) >> 2] | 0) {
       break label$4
      }
      label$5 : {
       $5 = strlen(HEAP32[$4 >> 2] | 0 | 0) | 0;
       $6 = $5 + $3 | 0;
       $7 = $6 + 2 | 0;
       if (($1 | 0) >= ($7 | 0)) {
        break label$5
       }
       $1 = $1 << 1 | 0;
       $7 = $7 << 1 | 0;
       $1 = ($1 | 0) > ($7 | 0) ? $1 : $7;
       $2 = dlrealloc($2 | 0, $1 | 0) | 0;
      }
      memcpy($2 + $3 | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, $5 | 0) | 0;
      $8 = $2 + $6 | 0;
      $9 = 10;
      HEAP8[$8 >> 0] = $9;
      HEAP8[($8 + 1 | 0) >> 0] = $9 >>> 8 | 0;
      $3 = $6 + 1 | 0;
     }
     $4 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     if ($4) {
      continue label$3
     }
     break label$3;
    };
   }
   $0 = $0 + 1 | 0;
   if (($0 | 0) != (8191 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$6 : {
   if ($3) {
    break label$6
   }
   dlfree($2 | 0);
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function yyparse_28_29() {
  var $2 = 0, $9 = 0, $8 = 0, $7 = 0, $3 = 0, $10 = 0, $5 = 0, $6 = 0, $0 = 0, $1 = 0, $4 = 0, $149 = 0, $339 = 0, $573 = 0, $607 = 0;
  $0 = __stack_pointer - 1200 | 0;
  __stack_pointer = $0;
  $1 = 0;
  HEAP32[(0 + 84772 | 0) >> 2] = -2;
  HEAP32[(0 + 84780 | 0) >> 2] = 0;
  HEAP16[($0 + 800 | 0) >> 1] = 0;
  $2 = $0;
  $3 = 0;
  $4 = 0;
  $5 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($3 | 0) == (3 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $6 = $3 << 1 | 0;
         $7 = HEAP16[($6 + 8960 | 0) >> 1] | 0;
         if (($7 | 0) == (-631 | 0)) {
          break label$7
         }
         label$8 : {
          if ((HEAP32[(0 + 84772 | 0) >> 2] | 0 | 0) != (-2 | 0)) {
           break label$8
          }
          HEAP32[(0 + 84772 | 0) >> 2] = yylex_28_29() | 0;
         }
         label$9 : {
          label$10 : {
           $8 = HEAP32[(0 + 84772 | 0) >> 2] | 0;
           if (($8 | 0) > (0 | 0)) {
            break label$10
           }
           $9 = 0;
           HEAP32[(0 + 84772 | 0) >> 2] = 0;
           break label$9;
          }
          $9 = 2;
          if (($8 | 0) > (647 | 0)) {
           break label$9
          }
          $9 = HEAP16[(($8 << 1 | 0) + 10672 | 0) >> 1] | 0;
         }
         $7 = $9 + $7 | 0;
         if ($7 >>> 0 > 1417 >>> 0) {
          break label$7
         }
         $7 = $7 << 1 | 0;
         if (($9 | 0) != (HEAP16[($7 + 11968 | 0) >> 1] | 0 | 0)) {
          break label$7
         }
         label$11 : {
          $3 = HEAP16[($7 + 14816 | 0) >> 1] | 0;
          if (($3 | 0) <= (0 | 0)) {
           break label$11
          }
          HEAP32[($2 + 4 | 0) >> 2] = HEAP32[(0 + 84776 | 0) >> 2] | 0;
          HEAP32[(0 + 84772 | 0) >> 2] = -2;
          $4 = $4 ? $4 + -1 | 0 : 0;
          $2 = $2 + 4 | 0;
          break label$4;
         }
         $6 = 0 - $3 | 0;
         break label$6;
        }
        $6 = HEAP16[($6 + 17664 | 0) >> 1] | 0;
        if (!$6) {
         break label$5
        }
       }
       $3 = HEAP8[($6 + 19376 | 0) >> 0] | 0;
       $7 = HEAP32[($2 + ((1 - $3 | 0) << 2 | 0) | 0) >> 2] | 0;
       label$12 : {
        label$13 : {
         label$14 : {
          switch ($6 + -2 | 0 | 0) {
          case 563:
           if ((HEAP32[$2 >> 2] | 0 | 0) < (1 | 0)) {
            break label$12
           }
           $8 = $2 + -8 | 0;
           $9 = 0;
           label$226 : while (1) {
            FUNCTION_TABLE[HEAP32[(0 + 84792 | 0) >> 2] | 0 | 0](HEAP32[$8 >> 2] | 0);
            $9 = $9 + 1 | 0;
            if (($9 | 0) < (HEAP32[$2 >> 2] | 0 | 0)) {
             continue label$226
            }
            break label$12;
           };
          case 549:
           label$227 : {
            if ((HEAP32[$2 >> 2] | 0 | 0) < (1 | 0)) {
             break label$227
            }
            $10 = $2 + -8 | 0;
            $8 = 0;
            label$228 : while (1) {
             $9 = HEAP32[$10 >> 2] | 0;
             store_string_28char__2c_20int_2c_20bool_29($9 | 0, strlen($9 | 0) | 0 | 0, HEAPU8[(0 + 84788 | 0) >> 0] | 0 | 0);
             $8 = $8 + 1 | 0;
             if (($8 | 0) < (HEAP32[$2 >> 2] | 0 | 0)) {
              continue label$228
             }
             break label$228;
            };
           }
           dlfree(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0);
           break label$12;
          case 0:
           HEAP8[(0 + 84770 | 0) >> 0] = 0;
           scanner_start_line_28_29();
           break label$12;
          case 4:
           $9 = $2 + -4 | 0;
           $8 = HEAP32[$9 >> 2] | 0;
           label$229 : {
            label$230 : {
             if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
              break label$230
             }
             $10 = current_text_pc_28_29() | 0;
             break label$229;
            }
            $10 = current_data_pc_28_29() | 0;
           }
           HEAP32[(0 + 84784 | 0) >> 2] = cons_label_28lab__2c_20ll__29(record_label_28char__2c_20unsigned_20int_2c_20int_29($8 | 0, $10 | 0, 0 | 0) | 0 | 0, HEAP32[(0 + 84784 | 0) >> 2] | 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 5:
           $8 = $2 + -8 | 0;
           $9 = record_label_28char__2c_20unsigned_20int_2c_20int_29(HEAP32[$8 >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 1 | 0) | 0;
           dlfree(HEAP32[$8 >> 2] | 0 | 0);
           HEAP8[($9 + 8 | 0) >> 0] = HEAPU8[($9 + 8 | 0) >> 0] | 0 | 4 | 0;
          case 6:
          case 8:
           clear_labels_28_29();
           break label$12;
          case 12:
           clear_labels_28_29();
           $1 = 1;
           break label$1;
          case 13:
           $9 = $2 + -8 | 0;
           $8 = HEAP32[$9 >> 2] | 0;
           $149 = ($8 | 0) == (572 | 0) ? 410 : $8;
           $8 = $2 + -4 | 0;
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29($149 | 0, HEAP32[$8 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           label$231 : {
            if ((HEAP32[$9 >> 2] | 0 | 0) != (572 | 0)) {
             break label$231
            }
            i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(410 | 0, (HEAP32[$8 >> 2] | 0) + 1 | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, 4 | 0) | 0 | 0);
           }
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 14:
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 15:
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 16:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 17:
           $9 = addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0;
           $8 = HEAP32[($2 + -4 | 0) >> 2] | 0;
           $10 = HEAP32[$2 >> 2] | 0;
           label$232 : {
            label$233 : {
             if (!$9) {
              break label$233
             }
             i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(273 | 0, $8 | 0, addr_expr_reg_28addrexpr__29($10 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
             break label$232;
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, $8 | 0, 0 | 0, addr_expr_imm_28addrexpr__29($10 | 0) | 0 | 0);
           }
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 18:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 19:
           $9 = HEAP32[$2 >> 2] | 0;
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, const_imm_expr_28int_29(HEAP32[$9 >> 2] | 0 | 0) | 0 | 0);
           $8 = $2 + -4 | 0;
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(453 | 0, 0 | 0, HEAP32[$8 >> 2] | 0 | 0, 1 | 0);
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, const_imm_expr_28int_29(HEAP32[($9 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(453 | 0, 0 | 0, (HEAP32[$8 >> 2] | 0) + 1 | 0 | 0, 1 | 0);
           break label$12;
          case 20:
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, const_imm_expr_28int_29((wasm2js_scratch_store_f32(Math_fround(+HEAPF64[(HEAP32[$2 >> 2] | 0) >> 3])), wasm2js_scratch_load_i32(2)) | 0) | 0 | 0);
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(453 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 1 | 0);
           break label$12;
          case 21:
           $9 = $2 + -4 | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(413 | 0, HEAP32[$9 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, 3 | 0) | 0 | 0);
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(414 | 0, HEAP32[$9 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 22:
           $9 = $2 + -4 | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(((HEAP32[($2 + -8 | 0) >> 2] | 0 | 0) == (602 | 0) ? 400 : 401) | 0, HEAP32[$9 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, 1 | 0) | 0 | 0);
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(401 | 0, 1 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           $8 = HEAP32[$9 >> 2] | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(506 | 0, $8 | 0, $8 | 0, 8 | 0);
           $9 = HEAP32[$9 >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(475 | 0, $9 | 0, $9 | 0, 1 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 23:
           mips32_r2_inst_28_29();
           break label$12;
          case 24:
           $9 = $2 + -8 | 0;
           $8 = HEAP32[$9 >> 2] | 0;
           $339 = ($8 | 0) == (593 | 0) ? 525 : $8;
           $8 = $2 + -4 | 0;
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29($339 | 0, HEAP32[$8 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           label$234 : {
            if ((HEAP32[$9 >> 2] | 0 | 0) != (593 | 0)) {
             break label$234
            }
            i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(525 | 0, (HEAP32[$8 >> 2] | 0) + 1 | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, 4 | 0) | 0 | 0);
           }
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 25:
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 26:
           $9 = $2 + -4 | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(528 | 0, HEAP32[$9 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, 3 | 0) | 0 | 0);
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(529 | 0, HEAP32[$9 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 27:
           $9 = $2 + -4 | 0;
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(497 | 0, HEAP32[$9 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(506 | 0, 1 | 0, HEAP32[$9 >> 2] | 0 | 0, 24 | 0);
           $8 = HEAP32[$9 >> 2] | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(516 | 0, $8 | 0, $8 | 0, 8 | 0);
           $8 = HEAP32[$9 >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(475 | 0, $8 | 0, $8 | 0, 1 | 0);
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(497 | 0, HEAP32[$9 >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, 1 | 0) | 0 | 0);
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(516 | 0, 1 | 0, HEAP32[$9 >> 2] | 0 | 0, 24 | 0);
           $8 = HEAP32[$9 >> 2] | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(506 | 0, $8 | 0, $8 | 0, 8 | 0);
           $9 = HEAP32[$9 >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(475 | 0, $9 | 0, $9 | 0, 1 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 28:
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, addr_expr_reg_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0, addr_expr_imm_28addrexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0 | 0);
           dlfree(HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 29:
           mips32_r2_inst_28_29();
           break label$12;
          case 30:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0);
           break label$12;
          case 31:
           mips32_r2_inst_28_29();
           break label$12;
          case 32:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 33:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0);
           break label$12;
          case 34:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0);
           break label$12;
          case 35:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0);
           break label$12;
          case 36:
           label$235 : {
            if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
             break label$235
            }
            yyerror_28char__29(19950 | 0);
           }
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0);
           break label$12;
          case 37:
           nop_inst_28_29();
           break label$12;
          case 38:
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(506 | 0, 0 | 0, 0 | 0, 1 | 0);
           break label$12;
          case 39:
           label$236 : {
            $9 = $2 + -4 | 0;
            $8 = HEAP32[$9 >> 2] | 0;
            $10 = HEAP32[$2 >> 2] | 0;
            if (($8 | 0) == ($10 | 0)) {
             break label$236
            }
            r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(275 | 0, $8 | 0, 0 | 0, $10 | 0);
           }
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(289 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, branch_offset_28int_29() | 0 | 0);
           nop_inst_28_29();
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(520 | 0, HEAP32[$9 >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 40:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(520 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 41:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(523 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 42:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(474 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 43:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(275 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 44:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0, 0 | 0);
           break label$12;
          case 45:
           mips32_r2_inst_28_29();
           break label$12;
          case 46:
           $9 = HEAP32[($2 + -4 | 0) >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, $9 | 0, HEAP32[$2 >> 2] | 0 | 0, $9 | 0);
           break label$12;
          case 47:
           mips32_r2_inst_28_29();
           break label$12;
          case 48:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 49:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(op_to_imm_op_28int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 50:
           $573 = op_to_imm_op_28int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0) | 0;
           $9 = HEAP32[($2 + -4 | 0) >> 2] | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($573 | 0, $9 | 0, $9 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 51:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           break label$12;
          case 52:
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(op_to_imm_op_28int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 53:
           $607 = op_to_imm_op_28int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0) | 0;
           $9 = HEAP32[($2 + -4 | 0) >> 2] | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29($607 | 0, $9 | 0, $9 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 54:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 55:
           $9 = HEAP32[($2 + -4 | 0) >> 2] | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, $9 | 0, $9 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 56:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 57:
           $9 = HEAP32[($2 + -4 | 0) >> 2] | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, $9 | 0, $9 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 58:
           label$237 : {
            if ((HEAP32[$2 >> 2] | 0) >>> 0 < 32 >>> 0) {
             break label$237
            }
            yywarn_28char__29(19988 | 0);
           }
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 59:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(imm_op_to_op_28int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           break label$12;
          case 60:
          case 61:
           mips32_r2_inst_28_29();
           break label$12;
          case 62:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 63:
           label$238 : {
            label$239 : {
             if (!(HEAPU8[(0 + 50428 | 0) >> 0] | 0)) {
              break label$239
             }
             if ((HEAPU8[(0 + 50431 | 0) >> 0] | 0) & 255 | 0) {
              break label$239
             }
             yyerror_28char__29(20034 | 0);
             break label$238;
            }
            label$240 : {
             if (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) {
              break label$240
             }
             i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
            }
            r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0);
           }
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 64:
           check_uimm_range_28immexpr__2c_20unsigned_20int_2c_20unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           label$241 : {
            label$242 : {
             if (!(HEAPU8[(0 + 50428 | 0) >> 0] | 0)) {
              break label$242
             }
             if ((HEAPU8[(0 + 50431 | 0) >> 0] | 0) & 255 | 0) {
              break label$242
             }
             yyerror_28char__29(20034 | 0);
             break label$241;
            }
            label$243 : {
             if (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) {
              break label$243
             }
             i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
            }
            $9 = HEAP32[($2 + -4 | 0) >> 2] | 0;
            r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, $9 | 0, $9 | 0, (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0);
           }
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 65:
           mips32_r2_inst_28_29();
           break label$12;
          case 66:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 67:
           $9 = eval_imm_expr_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0;
           label$244 : {
            label$245 : {
             if (!(HEAPU8[(0 + 50428 | 0) >> 0] | 0)) {
              break label$245
             }
             if ((HEAPU8[(0 + 50431 | 0) >> 0] | 0) & 255 | 0) {
              break label$245
             }
             yyerror_28char__29(20034 | 0);
             break label$244;
            }
            $8 = 273;
            label$246 : {
             label$247 : {
              switch ((HEAP32[($2 + -12 | 0) >> 2] | 0) + -520 | 0 | 0) {
              default:
               $8 = 0;
               fatal_error_28char__2c_20____29(20077 | 0, 0 | 0);
               break label$246;
              case 0:
               break label$246;
              case 3:
               break label$247;
              };
             }
             $8 = 274;
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29($8 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, make_imm_expr_28int_2c_20char__2c_20bool_29(0 - $9 | 0 | 0, 0 | 0, 0 | 0) | 0 | 0);
           }
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 68:
           $9 = eval_imm_expr_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0;
           label$249 : {
            label$250 : {
             if (!(HEAPU8[(0 + 50428 | 0) >> 0] | 0)) {
              break label$250
             }
             if ((HEAPU8[(0 + 50431 | 0) >> 0] | 0) & 255 | 0) {
              break label$250
             }
             yyerror_28char__29(20034 | 0);
             break label$249;
            }
            $8 = 273;
            label$251 : {
             label$252 : {
              switch ((HEAP32[($2 + -8 | 0) >> 2] | 0) + -520 | 0 | 0) {
              default:
               $8 = 0;
               fatal_error_28char__2c_20____29(20077 | 0, 0 | 0);
               break label$251;
              case 0:
               break label$251;
              case 3:
               break label$252;
              };
             }
             $8 = 274;
            }
            $10 = HEAP32[($2 + -4 | 0) >> 2] | 0;
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29($8 | 0, $10 | 0, $10 | 0, make_imm_expr_28int_2c_20char__2c_20bool_29(0 - $9 | 0 | 0, 0 | 0, 0 | 0) | 0 | 0);
           }
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 69:
           label$254 : {
            label$255 : {
             $9 = HEAP32[($2 + -8 | 0) >> 2] | 0;
             switch ($9 + -382 | 0 | 0) {
             case 0:
             case 2:
              break label$254;
             default:
              break label$255;
             };
            }
            yyerror_28char__29(20089 | 0);
            break label$12;
           }
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($9 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 70:
           div_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 71:
           label$256 : {
            if (!(is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0)) {
             break label$256
            }
            yyerror_28char__29(20114 | 0);
            break label$12;
           }
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           div_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 1 | 0, 1 | 0);
           break label$12;
          case 72:
           mult_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 73:
           label$257 : {
            if (!(is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0)) {
             break label$257
            }
            i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
            break label$12;
           }
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           mult_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 1 | 0);
           break label$12;
          case 74:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 75:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 76:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 1 | 0);
           break label$12;
          case 77:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(523 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           $9 = $2 + -4 | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(507 | 0, 1 | 0, 1 | 0, HEAP32[$9 >> 2] | 0 | 0);
           $8 = $2 + -8 | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(517 | 0, HEAP32[$8 >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0);
           $9 = HEAP32[$8 >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(475 | 0, $9 | 0, $9 | 0, 1 | 0);
           break label$12;
          case 78:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(523 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           $9 = $2 + -4 | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(517 | 0, 1 | 0, 1 | 0, HEAP32[$9 >> 2] | 0 | 0);
           $8 = $2 + -8 | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(507 | 0, HEAP32[$8 >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0);
           $9 = HEAP32[$8 >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(475 | 0, $9 | 0, $9 | 0, 1 | 0);
           break label$12;
          case 79:
           $9 = eval_imm_expr_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0;
           check_imm_range_28immexpr__2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 31 | 0);
           $8 = $2 + -4 | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(506 | 0, 1 | 0, HEAP32[$8 >> 2] | 0 | 0, 0 - $9 | 0 | 0);
           $10 = $2 + -8 | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(516 | 0, HEAP32[$10 >> 2] | 0 | 0, HEAP32[$8 >> 2] | 0 | 0, $9 | 0);
           $9 = HEAP32[$10 >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(475 | 0, $9 | 0, $9 | 0, 1 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 80:
           $9 = eval_imm_expr_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0;
           check_imm_range_28immexpr__2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 31 | 0);
           $8 = $2 + -4 | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(516 | 0, 1 | 0, HEAP32[$8 >> 2] | 0 | 0, 0 - $9 | 0 | 0);
           $10 = $2 + -8 | 0;
           r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(506 | 0, HEAP32[$10 >> 2] | 0 | 0, HEAP32[$8 >> 2] | 0 | 0, $9 | 0);
           $9 = HEAP32[$10 >> 2] | 0;
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(475 | 0, $9 | 0, $9 | 0, 1 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 81:
           mips32_r2_inst_28_29();
           break label$12;
          case 82:
           set_le_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 83:
           label$258 : {
            if (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) {
             break label$258
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           }
           set_le_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 84:
           set_gt_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 85:
           label$259 : {
            if (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) {
             break label$259
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           }
           set_gt_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 86:
           set_ge_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 87:
           label$260 : {
            if (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) {
             break label$260
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           }
           set_ge_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 88:
           set_eq_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 89:
           label$261 : {
            if (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) {
             break label$261
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           }
           set_eq_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, (is_zero_imm_28immexpr__29(HEAP32[$2 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 90:
           $9 = $2 + -4 | 0;
           $8 = opcode_is_nullified_branch_28int_29(HEAP32[$9 >> 2] | 0 | 0) | 0;
           $10 = opcode_is_true_branch_28int_29(HEAP32[$9 >> 2] | 0 | 0) | 0;
           $9 = HEAP32[$9 >> 2] | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($9 | 0, cc_to_rt_28int_2c_20int_2c_20int_29(0 | 0, $8 | 0, $10 | 0) | 0 | 0, ($9 >>> 21 | 0) & 31 | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 91:
           $9 = $2 + -8 | 0;
           $8 = opcode_is_nullified_branch_28int_29(HEAP32[$9 >> 2] | 0 | 0) | 0;
           $10 = opcode_is_true_branch_28int_29(HEAP32[$9 >> 2] | 0 | 0) | 0;
           $9 = HEAP32[$9 >> 2] | 0;
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29($9 | 0, cc_to_rt_28int_2c_20int_2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, $8 | 0, $10 | 0) | 0 | 0, ($9 >>> 21 | 0) & 31 | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 92:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 93:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(((HEAP32[($2 + -8 | 0) >> 2] | 0 | 0) == (561 | 0) ? 287 : 301) | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 94:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 95:
           label$262 : {
            label$263 : {
             if (!(HEAPU8[(0 + 50428 | 0) >> 0] | 0)) {
              break label$263
             }
             if ((HEAPU8[(0 + 50431 | 0) >> 0] | 0) & 255 | 0) {
              break label$263
             }
             yyerror_28char__29(20034 | 0);
             break label$262;
            }
            label$264 : {
             $9 = $2 + -4 | 0;
             if (!(is_zero_imm_28immexpr__29(HEAP32[$9 >> 2] | 0 | 0) | 0)) {
              break label$264
             }
             i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, (is_zero_imm_28immexpr__29(HEAP32[$9 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
             break label$262;
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[$9 >> 2] | 0 | 0);
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, (is_zero_imm_28immexpr__29(HEAP32[$9 >> 2] | 0 | 0) | 0) ^ 1 | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           }
           dlfree(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 96:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) == (564 | 0) ? 508 : 511) | 0, 1 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0);
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(301 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 97:
           label$265 : {
            label$266 : {
             if ((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) != (564 | 0)) {
              break label$266
             }
             i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(509 | 0, 1 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0);
             break label$265;
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
            $9 = $2 + -8 | 0;
            i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, HEAP32[$9 >> 2] | 0 | 0, 1 | 0, branch_offset_28int_29() | 0 | 0);
            r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(511 | 0, 1 | 0, HEAP32[$9 >> 2] | 0 | 0, 1 | 0);
           }
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           dlfree(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 98:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) == (562 | 0) ? 508 : 511) | 0, 1 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 99:
           $9 = $2 + -4 | 0;
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) == (562 | 0) ? 509 : 510) | 0, 1 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0);
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 100:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) == (568 | 0) ? 508 : 511) | 0, 1 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(301 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 101:
           $9 = $2 + -4 | 0;
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) == (568 | 0) ? 509 : 510) | 0, 1 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0);
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(301 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 102:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) == (566 | 0) ? 508 : 511) | 0, 1 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0);
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 103:
           label$267 : {
            label$268 : {
             if ((HEAP32[($2 + -12 | 0) >> 2] | 0 | 0) != (566 | 0)) {
              break label$268
             }
             i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(509 | 0, 1 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, incr_expr_offset_28immexpr__2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 1 | 0) | 0 | 0);
             break label$267;
            }
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, 1 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
            $9 = $2 + -8 | 0;
            i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, HEAP32[$9 >> 2] | 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
            r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(511 | 0, 1 | 0, HEAP32[$9 >> 2] | 0 | 0, 1 | 0);
           }
           i_type_inst_28int_2c_20int_2c_20int_2c_20immexpr__29(301 | 0, 0 | 0, 1 | 0, HEAP32[$2 >> 2] | 0 | 0);
           dlfree(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 104:
           label$269 : {
            $9 = (HEAP32[($2 + -4 | 0) >> 2] | 0) + -394 | 0;
            if ($9 >>> 0 > 5 >>> 0) {
             break label$269
            }
            if (!((43 >>> ($9 & 255 | 0) | 0) & 1 | 0)) {
             break label$269
            }
            j_type_inst_28int_2c_20immexpr__29(HEAP32[(($9 << 2 | 0) + 22412 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           }
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 105:
           label$270 : {
            switch ((HEAP32[($2 + -4 | 0) >> 2] | 0) + -394 | 0 | 0) {
            case 0:
            case 5:
             r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(399 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
             break label$12;
            case 1:
            case 3:
             break label$270;
            default:
             break label$12;
            };
           }
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(397 | 0, 31 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 106:
           label$272 : {
            switch ((HEAP32[($2 + -8 | 0) >> 2] | 0) + -394 | 0 | 0) {
            case 0:
            case 5:
             r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(399 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
             break label$12;
            case 1:
            case 3:
             break label$272;
            default:
             break label$12;
            };
           }
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(397 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 107:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(((HEAP32[($2 + -4 | 0) >> 2] | 0 | 0) == (560 | 0) ? 290 : 289) | 0, 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 108:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 109:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 110:
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 111:
           mips32_r2_inst_28_29();
           break label$12;
          case 112:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 113:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, ((HEAP32[$2 >> 2] | 0) << 2 | 0) & 28 | 0 | 0);
           break label$12;
          case 114:
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 115:
           mips32_r2_inst_28_29();
           break label$12;
          case 116:
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, cc_to_rt_28int_2c_20int_2c_20int_29(0 | 0, 0 | 0, 0 | 0) | 0 | 0);
           break label$12;
          case 117:
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, cc_to_rt_28int_2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0 | 0);
           break label$12;
          case 118:
           mips32_r2_inst_28_29();
           break label$12;
          case 119:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0);
           break label$12;
          case 120:
           r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 121:
           label$274 : {
            label$275 : {
             label$276 : {
              $9 = HEAP32[($2 + -8 | 0) >> 2] | 0;
              switch ($9 + -578 | 0 | 0) {
              case 2:
               break label$275;
              case 0:
               break label$276;
              default:
               break label$274;
              };
             }
             $9 = $2 + -4 | 0;
             r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(422 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0);
             r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(422 | 0, 0 | 0, (HEAP32[$2 >> 2] | 0) + 1 | 0 | 0, (HEAP32[$9 >> 2] | 0) + 1 | 0 | 0);
             break label$12;
            }
            $9 = $2 + -4 | 0;
            r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(453 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0);
            r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(453 | 0, 0 | 0, (HEAP32[$2 >> 2] | 0) + 1 | 0 | 0, (HEAP32[$9 >> 2] | 0) + 1 | 0 | 0);
            break label$12;
           }
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29($9 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           break label$12;
          case 122:
           mips32_r2_inst_28_29();
           break label$12;
          case 123:
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0);
           break label$12;
          case 124:
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 125:
           mips32_r2_inst_28_29();
           break label$12;
          case 126:
           r_co_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 127:
          case 128:
           mips32_r2_inst_28_29();
           break label$12;
          case 129:
           r_cond_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0);
           break label$12;
          case 130:
           r_cond_type_inst_28int_2c_20int_2c_20int_2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, HEAP32[($2 + -8 | 0) >> 2] | 0 | 0);
           break label$12;
          case 131:
           mips32_r2_inst_28_29();
           break label$12;
          case 132:
           i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 150:
           $7 = 402;
           break label$12;
          case 151:
           $7 = 411;
           break label$12;
          case 164:
           $7 = 500;
           break label$12;
          case 165:
           $7 = 526;
           break label$12;
          case 279:
           yywarn_28char__29(20129 | 0);
           break label$12;
          case 282:
           yywarn_28char__29(20129 | 0);
           break label$12;
          case 455:
           align_data_28int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 456:
           HEAP8[(0 + 84788 | 0) >> 0] = 0;
           break label$12;
          case 457:
           if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
            break label$12
           }
           yyerror_28char__29(20199 | 0);
           break label$12;
          case 458:
           HEAP8[(0 + 84788 | 0) >> 0] = 1;
           break label$12;
          case 459:
           if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
            break label$12
           }
           yyerror_28char__29(20199 | 0);
           break label$12;
          case 462:
           HEAP32[(0 + 84792 | 0) >> 2] = 22;
           break label$12;
          case 463:
           if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
            break label$12
           }
           yyerror_28char__29(20199 | 0);
           break label$12;
          case 464:
           align_data_28int_29(2 | 0);
           label$277 : {
            $9 = $2 + -4 | 0;
            if (HEAP32[((lookup_label_28char__29(HEAP32[$9 >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0) {
             break label$277
            }
            record_label_28char__2c_20unsigned_20int_2c_20int_29(HEAP32[$9 >> 2] | 0 | 0, current_data_pc_28_29() | 0 | 0, 1 | 0) | 0;
            dlfree(HEAP32[$9 >> 2] | 0 | 0);
           }
           increment_data_pc_28int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 465:
           user_kernel_data_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           break label$12;
          case 466:
           user_kernel_data_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           set_data_pc_28unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 467:
           user_kernel_data_segment_28bool_29(1 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           break label$12;
          case 468:
           user_kernel_data_segment_28bool_29(1 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           set_data_pc_28unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 469:
           HEAP32[(0 + 84796 | 0) >> 2] = 23;
           if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
            break label$12
           }
           set_data_alignment_28int_29(3 | 0);
           break label$12;
          case 470:
           if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
            break label$12
           }
           yyerror_28char__29(20199 | 0);
           break label$12;
          case 476:
           extern_directive_28char__2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 477:
           fatal_error_28char__2c_20____29(20230 | 0, 0 | 0);
           break label$12;
          case 479:
           HEAP32[(0 + 84796 | 0) >> 2] = 24;
           if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
            break label$12
           }
           set_data_alignment_28int_29(2 | 0);
           break label$12;
          case 480:
           if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
            break label$12
           }
           yyerror_28char__29(20199 | 0);
           break label$12;
          case 483:
           make_label_global_28char__29(HEAP32[$2 >> 2] | 0 | 0) | 0;
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 484:
           HEAP32[(0 + 84792 | 0) >> 2] = 25;
           if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
            break label$12
           }
           set_data_alignment_28int_29(1 | 0);
           break label$12;
          case 485:
           if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
            break label$12
           }
           yyerror_28char__29(20199 | 0);
           break label$12;
          case 486:
           $9 = HEAP32[$2 >> 2] | 0;
           label$278 : {
            label$279 : {
             if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
              break label$279
             }
             $8 = current_text_pc_28_29() | 0;
             break label$278;
            }
            $8 = current_data_pc_28_29() | 0;
           }
           record_label_28char__2c_20unsigned_20int_2c_20int_29($9 | 0, $8 | 0, 1 | 0) | 0;
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 487:
           lcomm_directive_28char__2c_20int_29(HEAP32[($2 + -4 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 493:
           yyerror_28char__29(20263 | 0);
           break label$12;
          case 494:
           user_kernel_data_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           break label$12;
          case 495:
           user_kernel_data_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           set_data_pc_28unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 496:
           user_kernel_data_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           break label$12;
          case 497:
           user_kernel_data_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84768 | 0) >> 0] = 1;
           HEAP8[(0 + 84769 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           set_data_pc_28unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 498:
           label$280 : {
            $9 = HEAP32[$2 >> 2] | 0;
            if (strcmp($9 | 0, 20297 | 0) | 0) {
             break label$280
            }
            HEAP8[(0 + 84800 | 0) >> 0] = 1;
            break label$12;
           }
           if (strcmp($9 | 0, 20302 | 0) | 0) {
            break label$12
           }
           HEAP8[(0 + 84800 | 0) >> 0] = 0;
           break label$12;
          case 499:
           label$281 : {
            if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
             break label$281
            }
            increment_data_pc_28int_29(HEAP32[$2 >> 2] | 0 | 0);
            break label$12;
           }
           if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
            break label$12
           }
           increment_text_pc_28int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 500:
           yyerror_28char__29(20305 | 0);
           break label$12;
          case 501:
           user_kernel_text_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84769 | 0) >> 0] = 1;
           HEAP8[(0 + 84768 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           break label$12;
          case 502:
           user_kernel_text_segment_28bool_29(0 | 0);
           HEAP8[(0 + 84769 | 0) >> 0] = 1;
           HEAP8[(0 + 84768 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           set_text_pc_28unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 503:
           user_kernel_text_segment_28bool_29(1 | 0);
           HEAP8[(0 + 84769 | 0) >> 0] = 1;
           HEAP8[(0 + 84768 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           break label$12;
          case 504:
           user_kernel_text_segment_28bool_29(1 | 0);
           HEAP8[(0 + 84769 | 0) >> 0] = 1;
           HEAP8[(0 + 84768 | 0) >> 0] = 0;
           enable_data_alignment_28_29();
           set_text_pc_28unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 507:
           HEAP32[(0 + 84792 | 0) >> 2] = 26;
           if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
            break label$12
           }
           set_data_alignment_28int_29(2 | 0);
           break label$12;
          case 509:
           HEAP32[(0 + 84824 | 0) >> 2] = 1;
           break label$12;
          case 510:
           HEAP32[(0 + 84824 | 0) >> 2] = 0;
           break label$13;
          case 511:
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(0 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0) | 0;
           break label$12;
          case 512:
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
           break label$12;
          case 513:
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0) | 0;
           break label$12;
          case 514:
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0) | 0;
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 515:
           $9 = $2 + -12 | 0;
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(0 | 0, HEAP32[$9 >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 516:
           $9 = $2 + -8 | 0;
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0, 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 517:
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(HEAP32[($2 + -8 | 0) >> 2] | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0) | 0;
           break label$12;
          case 518:
           $9 = $2 + -8 | 0;
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(0 - (HEAP32[$2 >> 2] | 0) | 0 | 0, HEAP32[$9 >> 2] | 0 | 0, 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 519:
           $9 = $2 + -20 | 0;
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(HEAP32[($2 + -12 | 0) >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 520:
           $9 = $2 + -20 | 0;
           $7 = make_addr_expr_28int_2c_20char__2c_20int_29(0 - (HEAP32[($2 + -12 | 0) >> 2] | 0) | 0 | 0, HEAP32[$9 >> 2] | 0 | 0, HEAP32[($2 + -4 | 0) >> 2] | 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 521:
           HEAP32[(0 + 84824 | 0) >> 2] = 1;
           break label$12;
          case 522:
           HEAP32[(0 + 84824 | 0) >> 2] = 0;
           break label$13;
          case 523:
           check_imm_range_28immexpr__2c_20int_2c_20int_29(HEAP32[$2 >> 2] | 0 | 0, -32768 | 0, 32767 | 0);
           break label$13;
          case 524:
           check_uimm_range_28immexpr__2c_20unsigned_20int_2c_20unsigned_20int_29(HEAP32[$2 >> 2] | 0 | 0);
           break label$13;
          case 525:
           $7 = make_imm_expr_28int_2c_20char__2c_20bool_29(HEAP32[$2 >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
           break label$12;
          case 526:
           $7 = make_imm_expr_28int_2c_20char__2c_20bool_29((HEAP32[($2 + -16 | 0) >> 2] | 0) >> (HEAP32[$2 >> 2] | 0) | 0 | 0, 0 | 0, 0 | 0) | 0;
           break label$12;
          case 527:
           $7 = make_imm_expr_28int_2c_20char__2c_20bool_29(0 | 0, HEAP32[$2 >> 2] | 0 | 0, 0 | 0) | 0;
           break label$12;
          case 528:
           $9 = $2 + -8 | 0;
           $7 = make_imm_expr_28int_2c_20char__2c_20bool_29(HEAP32[$2 >> 2] | 0 | 0, HEAP32[$9 >> 2] | 0 | 0, 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 529:
           $9 = $2 + -8 | 0;
           $7 = make_imm_expr_28int_2c_20char__2c_20bool_29(0 - (HEAP32[$2 >> 2] | 0) | 0 | 0, HEAP32[$9 >> 2] | 0 | 0, 0 | 0) | 0;
           dlfree(HEAP32[$9 >> 2] | 0 | 0);
           break label$12;
          case 531:
           $7 = (HEAP32[$2 >> 2] | 0) + (HEAP32[($2 + -8 | 0) >> 2] | 0) | 0;
           break label$12;
          case 532:
           label$282 : {
            if ((HEAP32[$2 >> 2] | 0 | 0) < (0 | 0)) {
             break label$282
            }
            yyerror_28char__29(20339 | 0);
           }
           $7 = (HEAP32[$2 >> 2] | 0) + (HEAP32[($2 + -4 | 0) >> 2] | 0) | 0;
           break label$12;
          case 537:
           label$283 : {
            if ((HEAP32[$2 >> 2] | 0) >>> 0 < 32 >>> 0) {
             break label$283
            }
            yyerror_28char__29(20352 | 0);
           }
           if ((HEAP32[$2 >> 2] | 0 | 0) != (1 | 0)) {
            break label$13
           }
           if ((HEAPU8[(0 + 50428 | 0) >> 0] | 0) & 255 | 0) {
            break label$13
           }
           if (HEAPU8[(0 + 84800 | 0) >> 0] | 0) {
            break label$13
           }
           yyerror_28char__29(20381 | 0);
           break label$13;
          case 541:
           if ((HEAP32[$2 >> 2] | 0) >>> 0 < 32 >>> 0) {
            break label$13
           }
           yyerror_28char__29(20418 | 0);
           break label$13;
          case 542:
           if ((HEAP32[$2 >> 2] | 0) >>> 0 < 8 >>> 0) {
            break label$13
           }
           yyerror_28char__29(20450 | 0);
           break label$13;
          case 545:
           $7 = make_imm_expr_28int_2c_20char__2c_20bool_29(0 - (current_text_pc_28_29() | 0) | 0 | 0, HEAP32[$2 >> 2] | 0 | 0, 1 | 0) | 0;
           break label$12;
          case 548:
           $9 = HEAP32[$2 >> 2] | 0;
           store_string_28char__2c_20int_2c_20bool_29($9 | 0, strlen($9 | 0) | 0 | 0, HEAPU8[(0 + 84788 | 0) >> 0] | 0 | 0);
           dlfree(HEAP32[$2 >> 2] | 0 | 0);
           break label$12;
          case 550:
           HEAP32[(0 + 84824 | 0) >> 2] = 1;
           break label$12;
          case 551:
           HEAP32[(0 + 84824 | 0) >> 2] = 0;
           break label$13;
          case 553:
           $7 = (HEAP32[$2 >> 2] | 0) + (HEAP32[($2 + -8 | 0) >> 2] | 0) | 0;
           break label$12;
          case 554:
           $7 = (HEAP32[($2 + -8 | 0) >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0;
           break label$12;
          case 556:
           $7 = Math_imul(HEAP32[$2 >> 2] | 0, HEAP32[($2 + -8 | 0) >> 2] | 0);
           break label$12;
          case 557:
           $7 = (HEAP32[($2 + -8 | 0) >> 2] | 0 | 0) / (HEAP32[$2 >> 2] | 0 | 0) | 0;
           break label$12;
          case 559:
           $7 = HEAP32[($2 + -4 | 0) >> 2] | 0;
           break label$12;
          case 560:
           $9 = lookup_label_28char__29(HEAP32[$2 >> 2] | 0 | 0) | 0;
           $7 = HEAP32[($9 + 4 | 0) >> 2] | 0;
           if ($7) {
            break label$12
           }
           record_data_uses_symbol_28unsigned_20int_2c_20lab__29(current_data_pc_28_29() | 0 | 0, $9 | 0);
           $7 = 0;
           break label$12;
          case 561:
           FUNCTION_TABLE[HEAP32[(0 + 84792 | 0) >> 2] | 0 | 0](HEAP32[$2 >> 2] | 0);
           break label$12;
          case 562:
           FUNCTION_TABLE[HEAP32[(0 + 84792 | 0) >> 2] | 0 | 0](HEAP32[$2 >> 2] | 0);
           break label$12;
          case 564:
           FUNCTION_TABLE[HEAP32[(0 + 84796 | 0) >> 2] | 0 | 0](HEAP32[$2 >> 2] | 0);
           break label$12;
          case 565:
           FUNCTION_TABLE[HEAP32[(0 + 84796 | 0) >> 2] | 0 | 0](HEAP32[$2 >> 2] | 0);
           break label$12;
          case 566:
           HEAP32[(0 + 84824 | 0) >> 2] = 1;
           break label$12;
          case 567:
           HEAP32[(0 + 84824 | 0) >> 2] = 0;
           break label$13;
          case 569:
           $7 = 0;
           break label$12;
          case 570:
           HEAP32[(0 + 84824 | 0) >> 2] = 1;
           break label$12;
          case 11:
           break label$1;
          case 571:
           break label$14;
          default:
           break label$12;
          };
         }
         HEAP32[(0 + 84824 | 0) >> 2] = 0;
        }
        $7 = HEAP32[$2 >> 2] | 0;
       }
       $2 = $2 - ($3 << 2 | 0) | 0;
       HEAP32[($2 + 4 | 0) >> 2] = $7;
       $2 = $2 + 4 | 0;
       label$284 : {
        $7 = $5 - $3 | 0;
        $9 = HEAP16[(($0 + 800 | 0) + ($7 << 1 | 0) | 0) >> 1] | 0;
        $5 = ((HEAP16[(($6 << 1 | 0) + 20496 | 0) >> 1] | 0) + -402 | 0) << 1 | 0;
        $3 = $9 + (HEAP16[($5 + 21648 | 0) >> 1] | 0) | 0;
        if ($3 >>> 0 > 1417 >>> 0) {
         break label$284
        }
        if ((HEAPU16[(($3 << 1 | 0) + 11968 | 0) >> 1] | 0 | 0) != ($9 & 65535 | 0 | 0)) {
         break label$284
        }
        $3 = HEAP16[(($3 << 1 | 0) + 14816 | 0) >> 1] | 0;
        break label$3;
       }
       $3 = HEAP16[($5 + 21904 | 0) >> 1] | 0;
       break label$3;
      }
      label$285 : {
       label$286 : {
        switch ($4 | 0) {
        case 0:
         HEAP32[(0 + 84780 | 0) >> 2] = (HEAP32[(0 + 84780 | 0) >> 2] | 0) + 1 | 0;
         yyerror_28char__29(22148 | 0);
         break label$285;
        case 3:
         break label$286;
        default:
         break label$285;
        };
       }
       label$288 : {
        $6 = HEAP32[(0 + 84772 | 0) >> 2] | 0;
        if (($6 | 0) > (0 | 0)) {
         break label$288
        }
        if ($6) {
         break label$285
        }
        $1 = 1;
        break label$1;
       }
       HEAP32[(0 + 84772 | 0) >> 2] = -2;
      }
      label$289 : {
       label$290 : while (1) {
        label$291 : {
         $3 = HEAP16[(($3 << 1 | 0) + 8960 | 0) >> 1] | 0;
         if (($3 | 0) == (-631 | 0)) {
          break label$291
         }
         if (($3 | 0) < (-1 | 0)) {
          break label$291
         }
         $3 = ($3 + 1 | 0) << 1 | 0;
         if ((HEAPU16[($3 + 11968 | 0) >> 1] | 0 | 0) != (1 | 0)) {
          break label$291
         }
         $3 = HEAP16[($3 + 14816 | 0) >> 1] | 0;
         if (($3 | 0) > (0 | 0)) {
          break label$289
         }
        }
        label$292 : {
         if ($5) {
          break label$292
         }
         $1 = 1;
         break label$1;
        }
        $2 = $2 + -4 | 0;
        $5 = $5 + -1 | 0;
        $3 = HEAP16[(($0 + 800 | 0) + ($5 << 1 | 0) | 0) >> 1] | 0;
        continue label$290;
       };
      }
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[(0 + 84776 | 0) >> 2] | 0;
      $2 = $2 + 4 | 0;
      $4 = 3;
     }
     $7 = $5;
    }
    $5 = $7 + 1 | 0;
    HEAP16[(($0 + 800 | 0) + ($5 << 1 | 0) | 0) >> 1] = $3;
    if (($7 | 0) <= (197 | 0)) {
     continue label$2
    }
    break label$2;
   };
   yyerror_28char__29(22161 | 0);
   $1 = 2;
  }
  __stack_pointer = $0 + 1200 | 0;
  return $1 | 0;
 }
 
 function cons_label_28lab__2c_20ll__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = dlmalloc(8 | 0) | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  HEAP32[$2 >> 2] = $0;
  return $2 | 0;
 }
 
 function clear_labels_28_29() {
  var $0 = 0, $1 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 84784 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   label$2 : while (1) {
    resolve_label_uses_28lab__29(HEAP32[$0 >> 2] | 0 | 0);
    $1 = HEAP32[(0 + 84784 | 0) >> 2] | 0;
    $0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    dlfree($1 | 0);
    HEAP32[(0 + 84784 | 0) >> 2] = $0;
    if ($0) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[(0 + 84784 | 0) >> 2] = 0;
 }
 
 function mips32_r2_inst_28_29() {
  yyerror_28char__29(22334 | 0);
 }
 
 function yyerror_28char__29($0) {
  $0 = $0 | 0;
  HEAP8[(0 + 84770 | 0) >> 0] = 1;
  clear_labels_28_29();
  yywarn_28char__29($0 | 0);
 }
 
 function nop_inst_28_29() {
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(506 | 0, 0 | 0, 0 | 0, 0 | 0);
 }
 
 function branch_offset_28int_29() {
  return const_imm_expr_28int_29(12 | 0) | 0 | 0;
 }
 
 function op_to_imm_op_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($0 + -507 | 0 | 0) {
       default:
        $1 = 273;
        label$12 : {
         switch ($0 + -270 | 0 | 0) {
         case 5:
          return 274 | 0;
         case 7:
          break label$12;
         case 0:
          break label$2;
         case 1:
         case 2:
         case 3:
         case 4:
         case 6:
          break label$3;
         default:
          break label$4;
         };
        }
        return 278 | 0;
       case 49:
        return 557 | 0;
       case 1:
        return 509 | 0;
       case 4:
        return 510 | 0;
       case 0:
        return 506 | 0;
       case 8:
        return 514 | 0;
       case 2:
       case 3:
       case 5:
       case 6:
       case 7:
       case 9:
       case 11:
       case 12:
       case 13:
       case 14:
       case 15:
       case 16:
       case 17:
       case 18:
       case 19:
       case 20:
       case 21:
       case 22:
       case 23:
       case 24:
       case 25:
       case 26:
       case 27:
       case 28:
       case 29:
       case 30:
       case 31:
       case 32:
       case 33:
       case 34:
       case 35:
       case 36:
       case 37:
       case 38:
       case 39:
       case 40:
       case 41:
       case 42:
       case 43:
       case 44:
       case 45:
       case 46:
       case 47:
       case 48:
        break label$3;
       case 10:
        break label$5;
       };
      }
      return 516 | 0;
     }
     if (($0 | 0) == (475 | 0)) {
      break label$1
     }
    }
    $1 = 0;
    fatal_error_28char__2c_20____29(22178 | 0, 0 | 0);
   }
   return $1 | 0;
  }
  return 476 | 0;
 }
 
 function yywarn_28char__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[(0 + 84828 | 0) >> 2] | 0;
  $3 = HEAP32[(0 + 84804 | 0) >> 2] | 0;
  HEAP32[($1 + 12 | 0) >> 2] = erroneous_line_28_29() | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $3;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  HEAP32[$1 >> 2] = $0;
  error_28char__2c_20____29(22291 | 0, $1 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function imm_op_to_op_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 if (($0 | 0) > (505 | 0)) {
                  break label$15
                 }
                 $1 = 270;
                 label$16 : {
                  switch ($0 + -273 | 0 | 0) {
                  case 5:
                   break label$13;
                  case 1:
                   break label$14;
                  case 0:
                   break label$2;
                  case 2:
                  case 3:
                  case 4:
                   break label$3;
                  default:
                   break label$16;
                  };
                 }
                 switch ($0 + -394 | 0 | 0) {
                 case 1:
                 case 2:
                 case 3:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 9:
                 case 10:
                 case 11:
                 case 12:
                 case 13:
                  break label$3;
                 case 14:
                  break label$8;
                 case 0:
                  break label$9;
                 default:
                  break label$4;
                 };
                }
                switch ($0 + -506 | 0 | 0) {
                case 4:
                 break label$10;
                case 3:
                 break label$11;
                case 51:
                 break label$12;
                case 10:
                 break label$5;
                case 8:
                 break label$6;
                case 0:
                 break label$7;
                default:
                 break label$3;
                };
               }
               return 275 | 0;
              }
              return 277 | 0;
             }
             return 556 | 0;
            }
            return 508 | 0;
           }
           return 511 | 0;
          }
          return 399 | 0;
         }
         return 275 | 0;
        }
        return 507 | 0;
       }
       return 515 | 0;
      }
      return 517 | 0;
     }
     if (($0 | 0) == (476 | 0)) {
      break label$1
     }
    }
    $1 = 0;
    fatal_error_28char__2c_20____29(22212 | 0, 0 | 0);
   }
   return $1 | 0;
  }
  return 475 | 0;
 }
 
 function check_uimm_range_28immexpr__2c_20unsigned_20int_2c_20unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 224 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    if (!(HEAP32[($2 + 4 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   $0 = eval_imm_expr_28immexpr__29($0 | 0) | 0;
   if ($0 >>> 0 < 65536 >>> 0) {
    break label$1
   }
   HEAP32[$1 >> 2] = $0;
   HEAP32[($1 + 4 | 0) >> 2] = 0;
   HEAP32[($1 + 8 | 0) >> 2] = 65535;
   siprintf($1 + 16 | 0 | 0, 22246 | 0, $1 | 0) | 0;
   yywarn_28char__29($1 + 16 | 0 | 0);
  }
  __stack_pointer = $1 + 224 | 0;
 }
 
 function div_inst_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   if ($4) {
    break label$1
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(301 | 0, 0 | 0, $3 | 0, branch_offset_28int_29() | 0 | 0);
   nop_inst_28_29();
   trap_inst_28_29();
  }
  $4 = 382;
  label$2 : {
   if (($0 | 0) == (382 | 0)) {
    break label$2
   }
   if (($0 | 0) == (587 | 0)) {
    break label$2
   }
   $4 = 384;
  }
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($4 | 0, 0 | 0, $2 | 0, $3 | 0);
  label$3 : {
   if (!$1) {
    break label$3
   }
   $3 = 427;
   label$4 : {
    switch ($0 + -382 | 0 | 0) {
    default:
     $3 = 426;
     break;
    case 0:
    case 2:
     break label$4;
    };
   }
   r_type_inst_28int_2c_20int_2c_20int_2c_20int_29($3 | 0, $1 | 0, 0 | 0, 0 | 0);
  }
 }
 
 function mult_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29((($0 | 0) == (582 | 0) ? 464 : 463) | 0, 0 | 0, $2 | 0, $3 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0 | 0) != (582 | 0)) {
      break label$3
     }
     if (!$1) {
      break label$3
     }
     $0 = 0;
     r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(426 | 0, 1 | 0, 0 | 0, 0 | 0);
     break label$2;
    }
    if (($0 | 0) != (581 | 0)) {
     break label$1
    }
    if (!$1) {
     break label$1
    }
    r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(426 | 0, 1 | 0, 0 | 0, 0 | 0);
    r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(427 | 0, $1 | 0, 0 | 0, 0 | 0);
    r_sh_type_inst_28int_2c_20int_2c_20int_2c_20int_29(514 | 0, $1 | 0, $1 | 0, 31 | 0);
    $0 = $1;
   }
   i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, $0 | 0, 1 | 0, branch_offset_28int_29() | 0 | 0);
   nop_inst_28_29();
   trap_inst_28_29();
  }
  label$4 : {
   if (!$1) {
    break label$4
   }
   r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(427 | 0, $1 | 0, 0 | 0, 0 | 0);
  }
 }
 
 function check_imm_range_28immexpr__2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 224 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    if (!(HEAP32[($4 + 4 | 0) >> 2] | 0)) {
     break label$1
    }
   }
   label$3 : {
    $0 = eval_imm_expr_28immexpr__29($0 | 0) | 0;
    if (($0 | 0) < ($1 | 0)) {
     break label$3
    }
    if (($0 | 0) <= ($2 | 0)) {
     break label$1
    }
   }
   HEAP32[$3 >> 2] = $0;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($3 + 8 | 0) >> 2] = $2;
   siprintf($3 + 16 | 0 | 0, 22246 | 0, $3 | 0) | 0;
   yywarn_28char__29($3 + 16 | 0 | 0);
  }
  __stack_pointer = $3 + 224 | 0;
 }
 
 function set_le_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(301 | 0, $2 | 0, $3 | 0, branch_offset_28int_29() | 0 | 0);
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, $1 | 0, 0 | 0, const_imm_expr_28int_29(1 | 0) | 0 | 0);
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, 0 | 0, 0 | 0, branch_offset_28int_29() | 0 | 0);
  nop_inst_28_29();
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29((($0 | 0) == (599 | 0) ? 508 : 511) | 0, $1 | 0, $2 | 0, $3 | 0);
 }
 
 function set_gt_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29((($0 | 0) == (597 | 0) ? 508 : 511) | 0, $1 | 0, $3 | 0, $2 | 0);
 }
 
 function set_ge_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(301 | 0, $2 | 0, $3 | 0, branch_offset_28int_29() | 0 | 0);
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, $1 | 0, 0 | 0, const_imm_expr_28int_29(1 | 0) | 0 | 0);
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, 0 | 0, 0 | 0, branch_offset_28int_29() | 0 | 0);
  nop_inst_28_29();
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29((($0 | 0) == (595 | 0) ? 508 : 511) | 0, $1 | 0, $3 | 0, $2 | 0);
 }
 
 function set_eq_inst_28int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = const_imm_expr_28int_29(($0 | 0) == (594 | 0) | 0) | 0;
  $0 = const_imm_expr_28int_29(($0 | 0) != (594 | 0) | 0) | 0;
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, $2 | 0, $3 | 0, branch_offset_28int_29() | 0 | 0);
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, $1 | 0, 0 | 0, $0 | 0);
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(287 | 0, 0 | 0, 0 | 0, branch_offset_28int_29() | 0 | 0);
  nop_inst_28_29();
  i_type_inst_free_28int_2c_20int_2c_20int_2c_20immexpr__29(476 | 0, $1 | 0, 0 | 0, $4 | 0);
 }
 
 function cc_to_rt_28int_2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $1 << 1 | 0 | ($0 << 2 | 0) | 0 | $2 | 0 | 0;
 }
 
 function store_word_data_28int_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!(HEAPU8[(0 + 84768 | 0) >> 0] | 0)) {
    break label$1
   }
   store_word_28int_29($0 | 0);
   return;
  }
  label$2 : {
   if (!(HEAPU8[(0 + 84769 | 0) >> 0] | 0)) {
    break label$2
   }
   store_instruction_28inst_s__29(inst_decode_28int_29($0 | 0) | 0 | 0);
  }
 }
 
 function trap_inst_28_29() {
  r_type_inst_28int_2c_20int_2c_20int_2c_20int_29(303 | 0, 0 | 0, 0 | 0, 0 | 0);
 }
 
 function fix_current_label_address_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[(0 + 84784 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[((HEAP32[$1 >> 2] | 0) + 4 | 0) >> 2] = $0;
    $1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
  clear_labels_28_29();
 }
 
 function initialize_parser_28char__29($0) {
  $0 = $0 | 0;
  HEAP32[(0 + 84804 | 0) >> 2] = $0;
  HEAP8[(0 + 84769 | 0) >> 0] = 1;
  HEAP32[(0 + 84824 | 0) >> 2] = 0;
  HEAP8[(0 + 84768 | 0) >> 0] = 0;
 }
 
 function yylex_28_29() {
  var $1 = 0, $5 = 0, $2 = 0, $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6 = 0, i64toi32_i32$3 = 0, $0 = 0, $3 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $43$hi = 0, $67$hi = 0, $76 = 0, $97$hi = 0, $102 = 0, $103 = 0, $105$hi = 0, $7 = 0.0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  label$1 : {
   if (HEAPU8[(0 + 84832 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP8[(0 + 84832 | 0) >> 0] = 1;
   label$2 : {
    if (HEAPU8[(0 + 84836 | 0) >> 0] | 0) {
     break label$2
    }
    HEAP8[(0 + 84836 | 0) >> 0] = 1;
   }
   label$3 : {
    if (HEAP32[(0 + 84812 | 0) >> 2] | 0) {
     break label$3
    }
    HEAP32[(0 + 84812 | 0) >> 2] = HEAP32[(0 + 28780 | 0) >> 2] | 0;
   }
   label$4 : {
    if (HEAP32[(0 + 84816 | 0) >> 2] | 0) {
     break label$4
    }
    HEAP32[(0 + 84816 | 0) >> 2] = HEAP32[(0 + 28200 | 0) >> 2] | 0;
   }
   $1 = 0;
   label$5 : {
    $2 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
    if (!$2) {
     break label$5
    }
    $1 = HEAP32[($2 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   }
   label$6 : {
    if ($1) {
     break label$6
    }
    yyensure_buffer_stack_28_29();
    $1 = yy_create_buffer_28_IO_FILE__2c_20int_29(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0, 16384 | 0) | 0;
    HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $1;
   }
   yy_load_buffer_state_28_29();
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        $3 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
        HEAP8[$3 >> 0] = HEAPU8[(0 + 84852 | 0) >> 0] | 0;
        $2 = HEAPU8[(0 + 84836 | 0) >> 0] | 0;
        $4 = $3;
        label$13 : while (1) {
         $5 = HEAPU8[((HEAPU8[$4 >> 0] | 0) + 22448 | 0) >> 0] | 0;
         label$14 : {
          i64toi32_i32$0 = 0;
          $43$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 4106;
          i64toi32_i32$2 = 960495623;
          i64toi32_i32$1 = $43$hi;
          i64toi32_i32$3 = $2;
          i64toi32_i32$4 = $2 & 31 | 0;
          if (32 >>> 0 <= ($2 & 63 | 0) >>> 0) {
           i64toi32_i32$1 = 0;
           $20 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          } else {
           i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
           $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
          }
          if ($20 & 1 | 0) {
           break label$14
          }
          HEAP32[(0 + 84860 | 0) >> 2] = $4;
          HEAP32[(0 + 84856 | 0) >> 2] = $2;
         }
         $6 = $5;
         label$15 : {
          $1 = (HEAP16[(($2 << 1 | 0) + 23072 | 0) >> 1] | 0) + $5 | 0;
          if (($2 | 0) == (HEAP16[(($1 << 1 | 0) + 22800 | 0) >> 1] | 0 | 0)) {
           break label$15
          }
          label$16 : while (1) {
           $1 = HEAP16[(($2 << 1 | 0) + 23184 | 0) >> 1] | 0;
           label$17 : {
            i64toi32_i32$1 = 0;
            $67$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 153;
            i64toi32_i32$0 = 390209024;
            i64toi32_i32$2 = $67$hi;
            i64toi32_i32$3 = $2;
            i64toi32_i32$4 = $2 & 31 | 0;
            if (32 >>> 0 <= ($2 & 63 | 0) >>> 0) {
             i64toi32_i32$2 = 0;
             $21 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
             $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
            }
            i64toi32_i32$1 = $21;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
            if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
             break label$17
            }
            $6 = HEAPU8[($5 + 23296 | 0) >> 0] | 0;
           }
           $2 = $1;
           $76 = $1 & 65535 | 0;
           $5 = $6 & 255 | 0;
           $1 = (HEAP16[(($1 << 1 | 0) + 23072 | 0) >> 1] | 0) + $5 | 0;
           if (($76 | 0) != (HEAPU16[(($1 << 1 | 0) + 22800 | 0) >> 1] | 0 | 0)) {
            continue label$16
           }
           break label$16;
          };
         }
         $4 = $4 + 1 | 0;
         $2 = HEAP16[(($1 << 1 | 0) + 23328 | 0) >> 1] | 0;
         i64toi32_i32$0 = 0;
         $97$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 4128;
         i64toi32_i32$2 = 11575792;
         i64toi32_i32$1 = $97$hi;
         i64toi32_i32$3 = $2;
         i64toi32_i32$4 = $2 & 31 | 0;
         if (32 >>> 0 <= ($2 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         i64toi32_i32$0 = $22;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 1;
         i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
         if (!(i64toi32_i32$0 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
          continue label$13
         }
         label$18 : while (1) {
          HEAP32[(0 + 84820 | 0) >> 2] = $3;
          $102 = $4;
          $103 = HEAP32[(0 + 84860 | 0) >> 2] | 0;
          i64toi32_i32$2 = 0;
          $105$hi = i64toi32_i32$2;
          i64toi32_i32$2 = 4106;
          i64toi32_i32$1 = 960495623;
          i64toi32_i32$0 = $105$hi;
          i64toi32_i32$3 = $2;
          i64toi32_i32$4 = $2 & 31 | 0;
          if (32 >>> 0 <= ($2 & 63 | 0) >>> 0) {
           i64toi32_i32$0 = 0;
           $23 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
          } else {
           i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
          }
          i64toi32_i32$2 = $23;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
          $1 = !(i64toi32_i32$2 & i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
          $4 = $1 ? $102 : $103;
          HEAP32[(0 + 84808 | 0) >> 2] = $4 - $3 | 0;
          HEAP8[(0 + 84852 | 0) >> 0] = HEAPU8[$4 >> 0] | 0;
          $5 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
          HEAP8[$4 >> 0] = 0;
          HEAP32[(0 + 84848 | 0) >> 2] = $4;
          $2 = $1 ? $2 : $5;
          $1 = HEAP16[(($2 << 1 | 0) + 22704 | 0) >> 1] | 0;
          label$19 : {
           label$20 : while (1) {
            $5 = 258;
            label$21 : {
             switch ($1 | 0) {
             case 0:
              HEAP8[$4 >> 0] = HEAPU8[(0 + 84852 | 0) >> 0] | 0;
              $2 = HEAP32[(0 + 84856 | 0) >> 2] | 0;
              $4 = HEAP32[(0 + 84860 | 0) >> 2] | 0;
              continue label$18;
             case 1:
              if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
               continue label$12
              }
              HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
              HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              continue label$12;
             case 7:
              label$36 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$36
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              HEAP32[(0 + 84776 | 0) >> 2] = atoi(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0) | 0;
              $5 = 260;
              break label$8;
             case 8:
              label$37 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$37
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              label$38 : {
               $1 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
               if ((HEAPU8[$1 >> 0] | 0 | 0) != (45 | 0)) {
                break label$38
               }
               HEAP32[$0 >> 2] = 84776;
               sscanf($1 + 3 | 0 | 0, 23590 | 0, $0 | 0) | 0;
               HEAP32[(0 + 84776 | 0) >> 2] = 0 - (HEAP32[(0 + 84776 | 0) >> 2] | 0) | 0;
               $5 = 260;
               break label$8;
              }
              HEAP32[($0 + 16 | 0) >> 2] = 84776;
              sscanf($1 + 2 | 0 | 0, 23590 | 0, $0 + 16 | 0 | 0) | 0;
              $5 = 260;
              break label$8;
             case 9:
              label$39 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$39
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              $7 = +atof(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0);
              HEAP32[(0 + 84776 | 0) >> 2] = 84872;
              HEAPF64[(0 + 84872 | 0) >> 3] = $7;
              $5 = 265;
              break label$8;
             case 10:
              $5 = check_keyword_28char__2c_20int_29(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0, (HEAPU8[(0 + 50431 | 0) >> 0] | 0) & !(HEAPU8[(0 + 50428 | 0) >> 0] | 0) | 0 | 0) | 0;
              label$40 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$40
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              $1 = HEAP32[(0 + 84824 | 0) >> 2] | 0;
              label$41 : {
               if (!$5) {
                break label$41
               }
               if ($1) {
                break label$41
               }
               HEAP32[(0 + 84776 | 0) >> 2] = $5;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
               break label$8;
              }
              label$42 : {
               if (!$5) {
                break label$42
               }
               if (!$1) {
                break label$42
               }
               yyerror_28char__29(23593 | 0);
              }
              label$43 : {
               $1 = label_is_defined_28char__29(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0) | 0;
               if (!$1) {
                break label$43
               }
               if (!((HEAPU8[($1 + 8 | 0) >> 0] | 0) & 4 | 0)) {
                break label$43
               }
               HEAP32[(0 + 84776 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
               $5 = 260;
               break label$8;
              }
              HEAP32[(0 + 84776 | 0) >> 2] = str_copy_28char__29(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0) | 0;
              $5 = 261;
              break label$8;
             case 11:
              $1 = register_name_to_number_28char__29((HEAP32[(0 + 84820 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
              label$44 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$44
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              label$45 : {
               if (($1 | 0) == (-1 | 0)) {
                break label$45
               }
               $2 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
               if ((HEAPU8[($2 + 1 | 0) >> 0] | 0 | 0) != (102 | 0)) {
                break label$45
               }
               if ((HEAPU8[($2 + 2 | 0) >> 0] | 0 | 0) == (112 | 0)) {
                break label$45
               }
               HEAP32[(0 + 84776 | 0) >> 2] = $1;
               $5 = 263;
               break label$8;
              }
              label$46 : {
               if ($1 >>> 0 > 31 >>> 0) {
                break label$46
               }
               HEAP32[(0 + 84776 | 0) >> 2] = $1;
               $5 = 262;
               break label$8;
              }
              label$47 : {
               $1 = label_is_defined_28char__29(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0) | 0;
               if (!$1) {
                break label$47
               }
               if (!((HEAPU8[($1 + 8 | 0) >> 0] | 0) & 4 | 0)) {
                break label$47
               }
               HEAP32[(0 + 84776 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
               $5 = 260;
               break label$8;
              }
              HEAP32[(0 + 84776 | 0) >> 2] = str_copy_28char__29(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0) | 0;
              $5 = 261;
              break label$8;
             case 12:
              label$48 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$48
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              $5 = HEAP8[(HEAP32[(0 + 84820 | 0) >> 2] | 0) >> 0] | 0;
              break label$8;
             case 13:
              if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
               continue label$12
              }
              HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
              HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              continue label$12;
             case 14:
              label$49 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$49
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              HEAP32[(0 + 84776 | 0) >> 2] = str_copy_28char__29(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0) | 0;
              $5 = 261;
              break label$8;
             case 15:
              label$50 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$50
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              HEAP32[(0 + 84776 | 0) >> 2] = copy_str_28char__2c_20int_29((HEAP32[(0 + 84820 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
              $5 = 264;
              break label$8;
             case 16:
              label$51 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$51
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              label$52 : {
               $1 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
               $2 = HEAP8[($1 + 1 | 0) >> 0] | 0;
               if (($2 | 0) != (92 | 0)) {
                break label$52
               }
               HEAP32[($0 + 28 | 0) >> 2] = $1 + 2 | 0;
               HEAP32[(0 + 84776 | 0) >> 2] = scan_escape_28char___29($0 + 28 | 0 | 0) | 0;
               $5 = 260;
               break label$8;
              }
              HEAP32[(0 + 84776 | 0) >> 2] = $2;
              $5 = 260;
              break label$8;
             case 17:
              label$53 : {
               if (HEAP32[(0 + 84864 | 0) >> 2] | 0) {
                break label$53
               }
               HEAP32[(0 + 84868 | 0) >> 2] = HEAP32[(0 + 84828 | 0) >> 2] | 0;
               HEAP32[(0 + 84864 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
              }
              yyerror_28char__29(23622 | 0);
              continue label$12;
             case 18:
              fwrite(HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0, HEAP32[(0 + 84808 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[(0 + 84816 | 0) >> 2] | 0 | 0) | 0;
              continue label$12;
             case 2:
              break label$10;
             case 20:
              break label$11;
             case 3:
             case 6:
              continue label$12;
             case 19:
              break label$21;
             case 5:
              break label$8;
             case 4:
              break label$9;
             default:
              break label$19;
             };
            }
            $1 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
            HEAP8[$4 >> 0] = HEAPU8[(0 + 84852 | 0) >> 0] | 0;
            $5 = $1 ^ -1 | 0;
            label$54 : {
             $1 = (HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0;
             $6 = HEAP32[$1 >> 2] | 0;
             if (HEAP32[($6 + 44 | 0) >> 2] | 0) {
              break label$54
             }
             HEAP32[(0 + 84880 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
             HEAP32[$6 >> 2] = HEAP32[(0 + 84812 | 0) >> 2] | 0;
             HEAP32[((HEAP32[$1 >> 2] | 0) + 44 | 0) >> 2] = 1;
            }
            $6 = $5 + $4 | 0;
            label$55 : {
             label$56 : {
              label$57 : {
               if ((HEAP32[(0 + 84848 | 0) >> 2] | 0) >>> 0 > ((HEAP32[((HEAP32[$1 >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(0 + 84880 | 0) >> 2] | 0) | 0) >>> 0) {
                break label$57
               }
               $4 = (HEAP32[(0 + 84820 | 0) >> 2] | 0) + $6 | 0;
               HEAP32[(0 + 84848 | 0) >> 2] = $4;
               $2 = yy_get_previous_state_28_29() | 0;
               $6 = yy_try_NUL_trans_28int_29($2 | 0) | 0;
               $3 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
               $1 = 19;
               if (!$6) {
                break label$56
               }
               $4 = $4 + 1 | 0;
               HEAP32[(0 + 84848 | 0) >> 2] = $4;
               $5 = 4;
               $2 = $6;
               break label$55;
              }
              $1 = 19;
              $5 = 11;
              label$58 : {
               switch (yy_get_next_buffer_28_29() | 0 | 0) {
               case 1:
                HEAP8[(0 + 84884 | 0) >> 0] = 0;
                label$61 : {
                 if (!(yywrap() | 0)) {
                  break label$61
                 }
                 HEAP32[(0 + 84848 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
                 $1 = 20;
                 $5 = 10;
                 break label$55;
                }
                if (HEAPU8[(0 + 84884 | 0) >> 0] | 0) {
                 break label$55
                }
                yyrestart_28_IO_FILE__29(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0);
                break label$55;
               case 0:
                $4 = (HEAP32[(0 + 84820 | 0) >> 2] | 0) + $6 | 0;
                HEAP32[(0 + 84848 | 0) >> 2] = $4;
                $2 = yy_get_previous_state_28_29() | 0;
                $3 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
                $5 = 4;
                break label$55;
               case 2:
                break label$58;
               default:
                break label$55;
               };
              }
              $4 = (HEAP32[((HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(0 + 84880 | 0) >> 2] | 0) | 0;
              HEAP32[(0 + 84848 | 0) >> 2] = $4;
              $2 = yy_get_previous_state_28_29() | 0;
              $3 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
             }
             $5 = 9;
            }
            if (($5 | 0) == (10 | 0)) {
             continue label$20
            }
            break label$20;
           };
           switch ($5 + -4 | 0 | 0) {
           case 7:
            continue label$12;
           case 5:
            continue label$18;
           case 1:
           case 2:
           case 3:
           case 4:
           case 6:
            break label$7;
           default:
            continue label$13;
           };
          }
          break label$18;
         };
         break label$13;
        };
        break label$12;
       };
       yy_fatal_error_28char_20const__29(23640 | 0);
       abort();
      }
      $5 = 0;
      break label$8;
     }
     HEAP32[(0 + 84828 | 0) >> 2] = (HEAP32[(0 + 84828 | 0) >> 2] | 0) + 1 | 0;
    }
    $5 = 259;
   }
   __stack_pointer = $0 + 32 | 0;
   return $5 | 0;
  }
  abort();
 }
 
 function yyensure_buffer_stack_28_29() {
  var $0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $0 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
     if ($0) {
      break label$3
     }
     $0 = yyalloc_28unsigned_20long_29(4 | 0) | 0;
     HEAP32[(0 + 84840 | 0) >> 2] = $0;
     if (!$0) {
      break label$2
     }
     HEAP32[$0 >> 2] = 0;
     HEAP32[(0 + 84896 | 0) >> 2] = 1;
     HEAP32[(0 + 84844 | 0) >> 2] = 0;
     return;
    }
    label$4 : {
     $1 = HEAP32[(0 + 84896 | 0) >> 2] | 0;
     if ((HEAP32[(0 + 84844 | 0) >> 2] | 0) >>> 0 < ($1 + -1 | 0) >>> 0) {
      break label$4
     }
     $1 = $1 + 8 | 0;
     $0 = yyrealloc_28void__2c_20unsigned_20long_29($0 | 0, $1 << 2 | 0 | 0) | 0;
     HEAP32[(0 + 84840 | 0) >> 2] = $0;
     if (!$0) {
      break label$1
     }
     $0 = $0 + ((HEAP32[(0 + 84896 | 0) >> 2] | 0) << 2 | 0) | 0;
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[$0 >> 2] = 0;
     HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0 + 24 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(0 + 84896 | 0) >> 2] = $1;
    }
    return;
   }
   yy_fatal_error_28char_20const__29(23937 | 0);
   abort();
  }
  yy_fatal_error_28char_20const__29(23937 | 0);
  abort();
 }
 
 function yy_create_buffer_28_IO_FILE__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   label$2 : {
    $2 = yyalloc_28unsigned_20long_29(48 | 0) | 0;
    if (!$2) {
     break label$2
    }
    HEAP32[($2 + 12 | 0) >> 2] = $1;
    $1 = yyalloc_28unsigned_20long_29($1 + 2 | 0 | 0) | 0;
    HEAP32[($2 + 4 | 0) >> 2] = $1;
    if (!$1) {
     break label$1
    }
    HEAP32[($2 + 20 | 0) >> 2] = 1;
    yy_init_buffer_28yy_buffer_state__2c_20_IO_FILE__29($2 | 0, $0 | 0);
    return $2 | 0;
   }
   yy_fatal_error_28char_20const__29(23691 | 0);
   abort();
  }
  yy_fatal_error_28char_20const__29(23691 | 0);
  abort();
 }
 
 function yy_load_buffer_state_28_29() {
  var $1 = 0, $0 = 0;
  $0 = (HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0;
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[(0 + 84880 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  HEAP32[(0 + 84848 | 0) >> 2] = $1;
  HEAP32[(0 + 84820 | 0) >> 2] = $1;
  HEAP32[(0 + 84812 | 0) >> 2] = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
  HEAP8[(0 + 84852 | 0) >> 0] = HEAPU8[$1 >> 0] | 0;
 }
 
 function check_keyword_28char__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 0;
  label$1 : {
   $0 = map_string_to_name_val_val_28name_val_val__2c_20int_2c_20char__29(44896 | 0, 381 | 0, $0 | 0) | 0;
   if (!$0) {
    break label$1
   }
   label$2 : {
    if ($1) {
     break label$2
    }
    if ((HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$1
    }
   }
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  }
  return $2 | 0;
 }
 
 function register_name_to_number_28char__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
  label$1 : {
   $2 = HEAPU8[$0 >> 0] | 0;
   if ((($2 + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
    break label$1
   }
   label$2 : {
    if (!($1 & 255 | 0)) {
     break label$2
    }
    if ((($1 + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
     break label$1
    }
    if (HEAPU8[($0 + 2 | 0) >> 0] | 0) {
     break label$1
    }
   }
   return atoi($0 | 0) | 0 | 0;
  }
  label$3 : {
   if (($2 & 255 | 0 | 0) != (102 | 0)) {
    break label$3
   }
   if ((($1 + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
    break label$3
   }
   return atoi($0 + 1 | 0 | 0) | 0 | 0;
  }
  label$4 : {
   $0 = map_string_to_name_val_val_28name_val_val__2c_20int_2c_20char__29(44464 | 0, 35 | 0, $0 | 0) | 0;
   if ($0) {
    break label$4
   }
   return -1 | 0;
  }
  return HEAP32[($0 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function copy_str_28char__2c_20int_29($0) {
  $0 = $0 | 0;
  var $6 = 0, $5 = 0, $3 = 0, $4 = 0, $1 = 0, $2 = 0, $7 = 0;
  $1 = strlen($0 | 0) | 0;
  $2 = xmalloc_28int_29($1 | 0) | 0;
  $3 = $2;
  label$1 : {
   $4 = $1 + -1 | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = $2;
   $5 = HEAPU8[$0 >> 0] | 0;
   if (!($5 & 255 | 0)) {
    break label$1
   }
   $3 = $2;
   label$2 : while (1) {
    $6 = $0 + 1 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (($5 & 255 | 0 | 0) != (92 | 0)) {
          break label$7
         }
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              $7 = HEAP8[$6 >> 0] | 0;
              switch ($7 + -48 | 0 | 0) {
              case 0:
              case 1:
              case 2:
              case 3:
               break label$10;
              case 68:
               break label$11;
              case 62:
               break label$12;
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
               break label$7;
              case 40:
               break label$9;
              default:
               break label$8;
              };
             }
             HEAP8[$3 >> 0] = 10;
             break label$4;
            }
            HEAP8[$3 >> 0] = 9;
            break label$4;
           }
           $6 = $7 << 3 | 0;
           $5 = HEAPU8[($0 + 3 | 0) >> 0] | 0;
           label$13 : {
            label$14 : {
             $4 = HEAPU8[($0 + 2 | 0) >> 0] | 0;
             if (($4 & 248 | 0 | 0) != (48 | 0)) {
              break label$14
             }
             $6 = ($6 + ((($4 << 24 | 0) >> 24 | 0) << 3 | 0) | 0) + -768 | 0;
             break label$13;
            }
            yyerror_28char__29(24081 | 0);
            $6 = $6 + -384 | 0;
           }
           label$15 : {
            label$16 : {
             if (($5 & 248 | 0 | 0) != (48 | 0)) {
              break label$16
             }
             $6 = ($5 + $6 | 0) + -48 | 0;
             break label$15;
            }
            yyerror_28char__29(24081 | 0);
           }
           HEAP8[$3 >> 0] = $6;
           break label$6;
          }
          $6 = HEAPU8[($0 + 3 | 0) >> 0] | 0;
          label$17 : {
           $4 = HEAP8[($0 + 2 | 0) >> 0] | 0;
           $5 = $4 + -48 | 0;
           if (($5 & 255 | 0) >>> 0 <= 9 >>> 0) {
            break label$17
           }
           label$18 : {
            if ((($4 + -65 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
             break label$18
            }
            $5 = $4 + -55 | 0;
            break label$17;
           }
           yyerror_28char__29(24022 | 0);
           $5 = 0;
          }
          $5 = $5 << 4 | 0;
          label$19 : {
           if ((($6 + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
            break label$19
           }
           HEAP8[$3 >> 0] = ($5 + $6 | 0) + -48 | 0;
           break label$6;
          }
          label$20 : {
           if ((($6 + -65 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
            break label$20
           }
           HEAP8[$3 >> 0] = ($5 + $6 | 0) + -55 | 0;
           break label$6;
          }
          yyerror_28char__29(24022 | 0);
          HEAP8[$3 >> 0] = $5;
          break label$6;
         }
         if (($7 | 0) == (34 | 0)) {
          break label$5
         }
        }
        HEAP8[$3 >> 0] = $5;
        $1 = $4;
        break label$3;
       }
       $1 = $1 + -4 | 0;
       $6 = $0 + 4 | 0;
       break label$3;
      }
      HEAP8[$3 >> 0] = 34;
     }
     $1 = $1 + -2 | 0;
     $6 = $0 + 2 | 0;
    }
    $3 = $3 + 1 | 0;
    $4 = $1 + -1 | 0;
    if (($4 | 0) < (1 | 0)) {
     break label$1
    }
    $0 = $6;
    $5 = HEAPU8[$6 >> 0] | 0;
    if ($5 & 255 | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[$3 >> 0] = 0;
  return $2 | 0;
 }
 
 function scan_escape_28char___29($0) {
  $0 = $0 | 0;
  var $4 = 0, $1 = 0, $2 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $72 = 0, $74 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[$0 >> 2] | 0;
  $3 = HEAP8[$2 >> 0] | 0;
  HEAP32[$0 >> 2] = $2 + 1 | 0;
  $4 = 7;
  label$1 : {
   label$2 : {
    switch ($3 + -34 | 0 | 0) {
    case 64:
     $4 = 8;
     break label$1;
    case 68:
     $4 = 12;
     break label$1;
    case 76:
     $4 = 10;
     break label$1;
    case 80:
     $4 = 13;
     break label$1;
    case 82:
     $4 = 9;
     break label$1;
    case 58:
     $4 = 92;
     break label$1;
    case 0:
     $4 = 34;
     break label$1;
    case 5:
     $4 = 39;
     break label$1;
    case 54:
    case 86:
     $3 = HEAPU8[($2 + 2 | 0) >> 0] | 0;
     label$12 : {
      $2 = HEAP8[($2 + 1 | 0) >> 0] | 0;
      $4 = $2 + -48 | 0;
      if (($4 & 255 | 0) >>> 0 <= 9 >>> 0) {
       break label$12
      }
      label$13 : {
       if ((($2 + -65 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
        break label$13
       }
       $4 = $2 + -55 | 0;
       break label$12;
      }
      label$14 : {
       if ((($2 + -97 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
        break label$14
       }
       $4 = $2 + -87 | 0;
       break label$12;
      }
      yyerror_28char__29(24022 | 0);
      $4 = 0;
     }
     $4 = $4 << 4 | 0;
     label$15 : {
      label$16 : {
       if ((($3 + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
        break label$16
       }
       $4 = ($4 + $3 | 0) + -48 | 0;
       break label$15;
      }
      label$17 : {
       if ((($3 + -65 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
        break label$17
       }
       $4 = ($4 + $3 | 0) + -55 | 0;
       break label$15;
      }
      label$18 : {
       if ((($3 + -97 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
        break label$18
       }
       $4 = ($4 + $3 | 0) + -87 | 0;
       break label$15;
      }
      yyerror_28char__29(24022 | 0);
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 2 | 0;
     break label$1;
    case 63:
     break label$1;
    default:
     break label$2;
    };
   }
   $4 = 0;
   HEAP8[($1 + 16 | 0) >> 0] = HEAPU8[(0 + 24080 | 0) >> 0] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24072 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24076 | 0) >> 2] | 0;
   $72 = i64toi32_i32$0;
   i64toi32_i32$0 = $1;
   HEAP32[($1 + 8 | 0) >> 2] = $72;
   HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24064 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24068 | 0) >> 2] | 0;
   $74 = i64toi32_i32$1;
   i64toi32_i32$1 = $1;
   HEAP32[$1 >> 2] = $74;
   HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[(((strlen($1 | 0) | 0) + $1 | 0) + -1 | 0) >> 0] = $3;
   yyerror_28char__29($1 | 0);
  }
  __stack_pointer = $1 + 32 | 0;
  return ($4 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function yy_get_previous_state_28_29() {
  var $0 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $3 = 0, $1 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $12 = 0, $13 = 0, $2 = 0, $19$hi = 0, $44$hi = 0;
  $0 = HEAPU8[(0 + 84836 | 0) >> 0] | 0;
  label$1 : {
   $1 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
   if ($1 >>> 0 >= (HEAP32[(0 + 84848 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   $2 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $3 = HEAPU8[$1 >> 0] | 0;
      if ($3) {
       break label$4
      }
      $4 = 2;
      break label$3;
     }
     $4 = HEAPU8[($3 + 22448 | 0) >> 0] | 0;
    }
    label$5 : {
     i64toi32_i32$0 = 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 4106;
     i64toi32_i32$2 = 960495623;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$4 = $0 & 31 | 0;
     if (32 >>> 0 <= ($0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     if ($12 & 1 | 0) {
      break label$5
     }
     HEAP32[(0 + 84860 | 0) >> 2] = $1;
     HEAP32[(0 + 84856 | 0) >> 2] = $0;
    }
    label$6 : {
     $5 = $4 & 255 | 0;
     $3 = (HEAP16[(($0 << 1 | 0) + 23072 | 0) >> 1] | 0) + $5 | 0;
     if (($0 | 0) == (HEAP16[(($3 << 1 | 0) + 22800 | 0) >> 1] | 0 | 0)) {
      break label$6
     }
     label$7 : while (1) {
      $3 = HEAP16[(($0 << 1 | 0) + 23184 | 0) >> 1] | 0;
      label$8 : {
       i64toi32_i32$1 = 0;
       $44$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 153;
       i64toi32_i32$0 = 390209024;
       i64toi32_i32$2 = $44$hi;
       i64toi32_i32$4 = $0 & 31 | 0;
       if (32 >>> 0 <= ($0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $13 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       i64toi32_i32$1 = $13;
       i64toi32_i32$0 = 0;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       if (!(i64toi32_i32$1 & 1 | 0 | i64toi32_i32$0 | 0)) {
        break label$8
       }
       $4 = HEAPU8[($5 + 23296 | 0) >> 0] | 0;
      }
      $0 = $3;
      $5 = $4 & 255 | 0;
      $3 = (HEAP16[(($0 << 1 | 0) + 23072 | 0) >> 1] | 0) + $5 | 0;
      if (($0 & 65535 | 0 | 0) != (HEAPU16[(($3 << 1 | 0) + 22800 | 0) >> 1] | 0 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $0 = HEAP16[(($3 << 1 | 0) + 23328 | 0) >> 1] | 0;
    $1 = $1 + 1 | 0;
    if ($1 >>> 0 < $2 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function yy_try_NUL_trans_28int_29($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$2 = 0, $1 = 0, $10 = 0, $3 = 0, $11 = 0, $5$hi = 0, $27$hi = 0;
  label$1 : {
   i64toi32_i32$0 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 4106;
   i64toi32_i32$2 = 960495623;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $0 & 31 | 0;
   if (32 >>> 0 <= ($0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   if ($10 & 1 | 0) {
    break label$1
   }
   HEAP32[(0 + 84856 | 0) >> 2] = $0;
   HEAP32[(0 + 84860 | 0) >> 2] = HEAP32[(0 + 84848 | 0) >> 2] | 0;
  }
  $1 = 2;
  label$2 : {
   $2 = (HEAP16[(($0 << 1 | 0) + 23072 | 0) >> 1] | 0) + 2 | 0;
   if ((HEAP16[(($2 << 1 | 0) + 22800 | 0) >> 1] | 0 | 0) == ($0 | 0)) {
    break label$2
   }
   $3 = 2;
   label$3 : while (1) {
    $2 = HEAP16[(($0 << 1 | 0) + 23184 | 0) >> 1] | 0;
    label$4 : {
     i64toi32_i32$1 = 0;
     $27$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 153;
     i64toi32_i32$0 = 390209024;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$4 = $0 & 31 | 0;
     if (32 >>> 0 <= ($0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $11 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $11 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$1 = $11;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     if (!(i64toi32_i32$1 & 1 | 0 | i64toi32_i32$0 | 0)) {
      break label$4
     }
     $3 = HEAPU8[($1 + 23296 | 0) >> 0] | 0;
    }
    $0 = $2;
    $1 = $3 & 255 | 0;
    $2 = (HEAP16[(($0 << 1 | 0) + 23072 | 0) >> 1] | 0) + $1 | 0;
    if (($0 & 65535 | 0 | 0) != (HEAPU16[(($2 << 1 | 0) + 22800 | 0) >> 1] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $2 = HEAPU16[(($2 << 1 | 0) + 23328 | 0) >> 1] | 0;
  return ((($2 | 0) == (44 | 0) ? 0 : $2) << 16 | 0) >> 16 | 0 | 0;
 }
 
 function yy_get_next_buffer_28_29() {
  var $3 = 0, $2 = 0, $1 = 0, $4 = 0, $6 = 0, $0 = 0, $5 = 0, $183 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $0 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
       $1 = (HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0;
       $2 = HEAP32[$1 >> 2] | 0;
       $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       if ($0 >>> 0 > (((HEAP32[(0 + 84880 | 0) >> 2] | 0) + $3 | 0) + 1 | 0) >>> 0) {
        break label$5
       }
       $4 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
       if (!(HEAP32[($2 + 40 | 0) >> 2] | 0)) {
        break label$4
       }
       label$6 : {
        $5 = $0 + ($4 ^ -1 | 0) | 0;
        if (($5 | 0) < (1 | 0)) {
         break label$6
        }
        $6 = 0;
        $2 = $4;
        label$7 : while (1) {
         HEAP8[$3 >> 0] = HEAPU8[$2 >> 0] | 0;
         $3 = $3 + 1 | 0;
         $2 = $2 + 1 | 0;
         $6 = $6 + 1 | 0;
         if (($6 | 0) != ($5 | 0)) {
          continue label$7
         }
         break label$7;
        };
       }
       label$8 : {
        label$9 : {
         $3 = HEAP32[$1 >> 2] | 0;
         if ((HEAP32[($3 + 44 | 0) >> 2] | 0 | 0) != (2 | 0)) {
          break label$9
         }
         $1 = 0;
         HEAP32[(0 + 84880 | 0) >> 2] = 0;
         break label$8;
        }
        $1 = 0;
        label$10 : {
         $0 = $4 - $0 | 0;
         $3 = (HEAP32[($3 + 12 | 0) >> 2] | 0) + $0 | 0;
         if (($3 | 0) > (0 | 0)) {
          break label$10
         }
         label$11 : while (1) {
          $2 = HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
          $6 = HEAP32[($2 + 4 | 0) >> 2] | 0;
          $4 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
          $3 = 0;
          label$12 : {
           if (!(HEAP32[($2 + 20 | 0) >> 2] | 0)) {
            break label$12
           }
           label$13 : {
            label$14 : {
             $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
             if (($3 | 0) > (0 | 0)) {
              break label$14
             }
             $3 = (($3 | 0) / (8 | 0) | 0) + $3 | 0;
             break label$13;
            }
            $3 = $3 << 1 | 0;
           }
           HEAP32[($2 + 12 | 0) >> 2] = $3;
           $3 = yyrealloc_28void__2c_20unsigned_20long_29($6 | 0, $3 + 2 | 0 | 0) | 0;
          }
          HEAP32[($2 + 4 | 0) >> 2] = $3;
          if (!$3) {
           break label$3
          }
          HEAP32[(0 + 84848 | 0) >> 2] = $3 + ($4 - $6 | 0) | 0;
          $3 = (HEAP32[((HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + $0 | 0;
          if (($3 | 0) < (1 | 0)) {
           continue label$11
          }
          break label$11;
         };
        }
        label$15 : {
         label$16 : {
          if (($3 | 0) >= (1 | 0)) {
           break label$16
          }
          $3 = 42;
          break label$15;
         }
         $3 = ($3 | 0) < (8192 | 0) ? $3 : 8192;
         $2 = ($3 | 0) > (1 | 0) ? $3 : 1;
         $1 = 0;
         label$17 : while (1) {
          label$18 : {
           $3 = getc(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0) | 0;
           switch ($3 + 1 | 0 | 0) {
           case 0:
           case 11:
            break label$15;
           default:
            break label$18;
           };
          }
          HEAP8[(((HEAP32[((HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + $5 | 0) + $1 | 0) >> 0] = $3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != ($2 | 0)) {
           continue label$17
          }
          break label$17;
         };
        }
        label$19 : {
         if (($3 | 0) != (10 | 0)) {
          break label$19
         }
         HEAP8[(((HEAP32[((HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + $5 | 0) + $1 | 0) >> 0] = 10;
         $1 = $1 + 1 | 0;
        }
        label$20 : {
         if (($3 | 0) != (-1 | 0)) {
          break label$20
         }
         if (ferror(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0) | 0) {
          break label$2
         }
        }
        HEAP32[(0 + 84880 | 0) >> 2] = $1;
        $3 = HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       }
       HEAP32[($3 + 16 | 0) >> 2] = $1;
       $6 = 0;
       label$21 : {
        if (HEAP32[(0 + 84880 | 0) >> 2] | 0) {
         break label$21
        }
        label$22 : {
         if ($5) {
          break label$22
         }
         yyrestart_28_IO_FILE__29(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0);
         $6 = 1;
         break label$21;
        }
        $6 = 2;
        HEAP32[((HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 44 | 0) >> 2] = 2;
       }
       label$23 : {
        $3 = HEAP32[(0 + 84880 | 0) >> 2] | 0;
        $2 = $3 + $5 | 0;
        $4 = HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        if (($2 | 0) <= (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0)) {
         break label$23
        }
        $183 = HEAP32[($4 + 4 | 0) >> 2] | 0;
        $4 = $2 + ($3 >> 1 | 0) | 0;
        $3 = yyrealloc_28void__2c_20unsigned_20long_29($183 | 0, $4 | 0) | 0;
        $2 = (HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0;
        HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] = $3;
        $3 = HEAP32[$2 >> 2] | 0;
        if (!(HEAP32[($3 + 4 | 0) >> 2] | 0)) {
         break label$1
        }
        HEAP32[($3 + 12 | 0) >> 2] = $4 + -2 | 0;
       }
       $3 = (HEAP32[(0 + 84880 | 0) >> 2] | 0) + $5 | 0;
       HEAP32[(0 + 84880 | 0) >> 2] = $3;
       $2 = (HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0;
       HEAP8[((HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0) + $3 | 0) >> 0] = 0;
       HEAP8[(($3 + (HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) + 1 | 0) >> 0] = 0;
       HEAP32[(0 + 84820 | 0) >> 2] = HEAP32[((HEAP32[$2 >> 2] | 0) + 4 | 0) >> 2] | 0;
       return $6 | 0;
      }
      yy_fatal_error_28char_20const__29(23762 | 0);
      abort();
     }
     return (($0 - $4 | 0 | 0) == (1 | 0) ? 1 : 2) | 0;
    }
    yy_fatal_error_28char_20const__29(23818 | 0);
    abort();
   }
   yy_fatal_error_28char_20const__29(23862 | 0);
   abort();
  }
  yy_fatal_error_28char_20const__29(23891 | 0);
  abort();
 }
 
 function yywrap() {
  var $0 = 0;
  $0 = 1;
  label$1 : {
   if (HEAPU8[(0 + 84892 | 0) >> 0] | 0) {
    break label$1
   }
   yyunput_28int_2c_20char__29(1 | 0, HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0);
   HEAP8[(0 + 84884 | 0) >> 0] = 1;
   HEAP8[(0 + 84892 | 0) >> 0] = 1;
   $0 = 0;
  }
  return $0 | 0;
 }
 
 function yyrestart_28_IO_FILE__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    if (HEAP32[($1 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) {
     break label$1
    }
   }
   yyensure_buffer_stack_28_29();
   $1 = yy_create_buffer_28_IO_FILE__2c_20int_29(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0, 16384 | 0) | 0;
   HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $1;
  }
  $1 = 0;
  label$3 : {
   $2 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
   if (!$2) {
    break label$3
   }
   $1 = HEAP32[($2 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  yy_init_buffer_28yy_buffer_state__2c_20_IO_FILE__29($1 | 0, $0 | 0);
  yy_load_buffer_state_28_29();
 }
 
 function yy_fatal_error_28char_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[$1 >> 2] = $0;
  fiprintf(HEAP32[(0 + 28204 | 0) >> 2] | 0 | 0, 23986 | 0, $1 | 0) | 0;
  exit(2 | 0);
  abort();
 }
 
 function yyalloc_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return dlmalloc($0 | 0) | 0 | 0;
 }
 
 function yyrealloc_28void__2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return dlrealloc($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function yy_init_buffer_28yy_buffer_state__2c_20_IO_FILE__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0;
  $2 = HEAP32[(__errno_location() | 0) >> 2] | 0;
  yy_flush_buffer_28yy_buffer_state__29($0 | 0);
  HEAP32[($0 + 40 | 0) >> 2] = 1;
  HEAP32[$0 >> 2] = $1;
  $3 = 0;
  label$1 : {
   $4 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
   if (!$4) {
    break label$1
   }
   $3 = HEAP32[($4 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  label$2 : {
   if (($3 | 0) == ($0 | 0)) {
    break label$2
   }
   HEAP32[($0 + 32 | 0) >> 2] = 1;
   HEAP32[($0 + 36 | 0) >> 2] = 0;
  }
  label$3 : {
   label$4 : {
    if ($1) {
     break label$4
    }
    $1 = 0;
    break label$3;
   }
   $1 = (isatty(fileno($1 | 0) | 0 | 0) | 0 | 0) > (0 | 0);
  }
  HEAP32[($0 + 24 | 0) >> 2] = $1;
  HEAP32[(__errno_location() | 0) >> 2] = $2;
 }
 
 function yyunput_28int_2c_20char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0;
  $2 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
  HEAP8[$2 >> 0] = HEAPU8[(0 + 84852 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    $3 = (HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    if ($2 >>> 0 >= ($5 + 2 | 0) >>> 0) {
     break label$2
    }
    $4 = ((HEAP32[($4 + 12 | 0) >> 2] | 0) + $5 | 0) + 2 | 0;
    label$3 : {
     $5 = ((HEAP32[(0 + 84880 | 0) >> 2] | 0) + $5 | 0) + 2 | 0;
     $6 = HEAP32[$3 >> 2] | 0;
     $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     if ($5 >>> 0 <= $7 >>> 0) {
      break label$3
     }
     label$4 : while (1) {
      $4 = $4 + -1 | 0;
      $5 = $5 + -1 | 0;
      HEAP8[$4 >> 0] = HEAPU8[$5 >> 0] | 0;
      $6 = HEAP32[$3 >> 2] | 0;
      $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
      if ($5 >>> 0 > $7 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $3 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    HEAP32[(0 + 84880 | 0) >> 2] = $3;
    HEAP32[($6 + 16 | 0) >> 2] = $3;
    $5 = $4 - $5 | 0;
    $2 = $2 + $5 | 0;
    if ($2 >>> 0 < ($7 + 2 | 0) >>> 0) {
     break label$1
    }
    $1 = $1 + $5 | 0;
   }
   $5 = $2 + -1 | 0;
   HEAP8[$5 >> 0] = $0;
   HEAP32[(0 + 84820 | 0) >> 2] = $1;
   $4 = HEAPU8[$5 >> 0] | 0;
   HEAP32[(0 + 84848 | 0) >> 2] = $5;
   HEAP8[(0 + 84852 | 0) >> 0] = $4;
   return;
  }
  yy_fatal_error_28char_20const__29(23990 | 0);
  abort();
 }
 
 function yy_flush_buffer_28yy_buffer_state__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP8[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 0] = 0;
   HEAP8[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 1 | 0) >> 0] = 0;
   HEAP32[($0 + 44 | 0) >> 2] = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 1;
   HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0;
   label$2 : {
    $2 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $1 = HEAP32[($2 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   }
   if (($1 | 0) != ($0 | 0)) {
    break label$1
   }
   yy_load_buffer_state_28_29();
  }
 }
 
 function yy_delete_buffer_28yy_buffer_state__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = 0;
   label$2 : {
    $2 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
    if (!$2) {
     break label$2
    }
    $1 = HEAP32[($2 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   }
   label$3 : {
    if (($1 | 0) != ($0 | 0)) {
     break label$3
    }
    HEAP32[($2 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
   }
   label$4 : {
    if (!(HEAP32[($0 + 20 | 0) >> 2] | 0)) {
     break label$4
    }
    yyfree_28void__29(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   }
   yyfree_28void__29($0 | 0);
  }
 }
 
 function yyfree_28void__29($0) {
  $0 = $0 | 0;
  dlfree($0 | 0);
 }
 
 function yypush_buffer_state_28yy_buffer_state__29($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   yyensure_buffer_stack_28_29();
   label$2 : {
    $1 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    label$3 : {
     $2 = $1 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0;
     if (!(HEAP32[$2 >> 2] | 0)) {
      break label$3
     }
     $3 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
     HEAP8[$3 >> 0] = HEAPU8[(0 + 84852 | 0) >> 0] | 0;
     HEAP32[((HEAP32[$2 >> 2] | 0) + 8 | 0) >> 2] = $3;
     HEAP32[((HEAP32[$2 >> 2] | 0) + 16 | 0) >> 2] = HEAP32[(0 + 84880 | 0) >> 2] | 0;
    }
    if (!$1) {
     break label$2
    }
    $2 = HEAP32[(0 + 84844 | 0) >> 2] | 0;
    if (!(HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[(0 + 84844 | 0) >> 2] = $2 + 1 | 0;
   }
   HEAP32[($1 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $0;
   yy_load_buffer_state_28_29();
   HEAP8[(0 + 84884 | 0) >> 0] = 1;
  }
 }
 
 function yypop_buffer_state_28_29() {
  var $0 = 0, $1 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   $0 = HEAP32[($0 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   yy_delete_buffer_28yy_buffer_state__29($0 | 0);
   $0 = HEAP32[(0 + 84840 | 0) >> 2] | 0;
   $1 = HEAP32[(0 + 84844 | 0) >> 2] | 0;
   HEAP32[($0 + ($1 << 2 | 0) | 0) >> 2] = 0;
   label$2 : {
    if (!$1) {
     break label$2
    }
    HEAP32[(0 + 84844 | 0) >> 2] = $1 + -1 | 0;
   }
   if (!$0) {
    break label$1
   }
   if (!(HEAP32[($0 + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
    break label$1
   }
   yy_load_buffer_state_28_29();
   HEAP8[(0 + 84884 | 0) >> 0] = 1;
  }
 }
 
 function initialize_scanner_28_IO_FILE__29($0) {
  $0 = $0 | 0;
  label$1 : {
   if ((HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
    break label$1
   }
   push_scanner_28_IO_FILE__29($0 | 0);
  }
  HEAP32[(0 + 84812 | 0) >> 2] = $0;
  yyrestart_28_IO_FILE__29($0 | 0);
  HEAP32[(0 + 84828 | 0) >> 2] = 1;
  HEAP8[(0 + 84832 | 0) >> 0] = 0;
  HEAP32[(0 + 84864 | 0) >> 2] = 0;
  HEAP8[(0 + 84888 | 0) >> 0] = 0;
  HEAP8[(0 + 84892 | 0) >> 0] = 0;
 }
 
 function push_scanner_28_IO_FILE__29($0) {
  $0 = $0 | 0;
  yypush_buffer_state_28yy_buffer_state__29(yy_create_buffer_28_IO_FILE__2c_20int_29($0 | 0, 16384 | 0) | 0 | 0);
 }
 
 function pop_scanner_28_29() {
  yypop_buffer_state_28_29();
 }
 
 function scanner_start_line_28_29() {
  HEAP8[(0 + 84888 | 0) >> 0] = 0;
  HEAP32[(0 + 84864 | 0) >> 2] = 0;
 }
 
 function erroneous_line_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $0 = __stack_pointer - 80 | 0;
  __stack_pointer = $0;
  $1 = HEAP32[(0 + 84864 | 0) >> 2] | 0;
  $2 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
  ss_init_28str_stm__29($0 + 64 | 0 | 0);
  label$1 : {
   if (!(HEAP32[(0 + 84864 | 0) >> 2] | 0)) {
    break label$1
   }
   ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23735 | 0, 0 | 0);
   $3 = HEAP32[(0 + 84864 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $2 = $2 - $1 | 0;
     if (($2 | 0) < (0 | 0)) {
      break label$3
     }
     $1 = $3 + $2 | 0;
     $4 = HEAPU8[$1 >> 0] | 0;
     HEAP8[$1 >> 0] = 0;
     HEAP32[($0 + 32 | 0) >> 2] = $3;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23739 | 0, $0 + 32 | 0 | 0);
     HEAP8[((HEAP32[(0 + 84864 | 0) >> 2] | 0) + $2 | 0) >> 0] = $4;
     HEAP32[($0 + 16 | 0) >> 2] = HEAP32[(0 + 84820 | 0) >> 2] | 0;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23739 | 0, $0 + 16 | 0 | 0);
     break label$2;
    }
    HEAP32[($0 + 48 | 0) >> 2] = $3;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23739 | 0, $0 + 48 | 0 | 0);
    $2 = strlen(HEAP32[(0 + 84864 | 0) >> 2] | 0 | 0) | 0;
   }
   $1 = 0;
   label$4 : {
    if ((HEAPU8[(HEAP32[(0 + 84820 | 0) >> 2] | 0) >> 0] | 0 | 0) == (10 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      label$7 : while (1) {
       label$8 : {
        $3 = yyinput_28_29() | 0;
        switch ($3 + 1 | 0 | 0) {
        case 0:
        case 2:
         break label$5;
        case 11:
         break label$6;
        default:
         break label$8;
        };
       }
       HEAP32[$0 >> 2] = $3;
       ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23742 | 0, $0 | 0);
       continue label$7;
      };
     }
     yyunput_28int_2c_20char__29(10 | 0, HEAP32[(0 + 84820 | 0) >> 2] | 0 | 0);
    }
    HEAP32[(0 + 84864 | 0) >> 2] = 0;
   }
   ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23745 | 0, 0 | 0);
   label$9 : {
    if (($2 | 0) < (1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23750 | 0, 0 | 0);
     $1 = $1 + 1 | 0;
     if (($1 | 0) != ($2 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   ss_printf_28str_stm__2c_20char__2c_20____29($0 + 64 | 0 | 0, 23752 | 0, 0 | 0);
  }
  $1 = ss_to_string_28str_stm__29($0 + 64 | 0 | 0) | 0;
  __stack_pointer = $0 + 80 | 0;
  return $1 | 0;
 }
 
 function yyinput_28_29() {
  var $1 = 0, $0 = 0, $2 = 0, $3 = 0;
  $0 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
  $1 = HEAPU8[(0 + 84852 | 0) >> 0] | 0;
  HEAP8[$0 >> 0] = $1;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    label$3 : {
     if ($0 >>> 0 >= ((HEAP32[((HEAP32[((HEAP32[(0 + 84840 | 0) >> 2] | 0) + ((HEAP32[(0 + 84844 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(0 + 84880 | 0) >> 2] | 0) | 0) >>> 0) {
      break label$3
     }
     HEAP8[$0 >> 0] = 0;
     break label$2;
    }
    $1 = 1;
    $2 = 0;
    HEAP32[(0 + 84848 | 0) >> 2] = $0 + 1 | 0;
    $3 = HEAP32[(0 + 84820 | 0) >> 2] | 0;
    label$4 : {
     label$5 : {
      switch (yy_get_next_buffer_28_29() | 0 | 0) {
      case 2:
       yyrestart_28_IO_FILE__29(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0);
      case 1:
       $1 = 0;
       if (yywrap() | 0) {
        break label$4
       }
       $1 = 0;
       label$8 : {
        if (HEAPU8[(0 + 84884 | 0) >> 0] | 0) {
         break label$8
        }
        yyrestart_28_IO_FILE__29(HEAP32[(0 + 84812 | 0) >> 2] | 0 | 0);
       }
       $2 = yyinput_28_29() | 0;
       break label$4;
      case 0:
       break label$5;
      default:
       break label$4;
      };
     }
     HEAP32[(0 + 84848 | 0) >> 2] = (HEAP32[(0 + 84820 | 0) >> 2] | 0) + ($0 - $3 | 0) | 0;
    }
    if (!$1) {
     break label$1
    }
   }
   $1 = HEAP32[(0 + 84848 | 0) >> 2] | 0;
   $2 = HEAPU8[$1 >> 0] | 0;
   HEAP8[$1 >> 0] = 0;
   HEAP32[(0 + 84848 | 0) >> 2] = $1 + 1 | 0;
   HEAP8[(0 + 84852 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
  }
  return $2 | 0;
 }
 
 function source_line_28_29() {
  var $4 = 0, $3 = 0, $0 = 0, $1 = 0, $2 = 0, $5 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $1 = 0;
  label$1 : {
   if (HEAPU8[(0 + 84888 | 0) >> 0] | 0) {
    break label$1
   }
   $2 = HEAP32[(0 + 84864 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = $2;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $4 = HEAPU8[$3 >> 0] | 0;
      switch ($4 | 0) {
      case 0:
      case 10:
       break label$2;
      default:
       break label$4;
      };
     }
     $3 = $3 + 1 | 0;
     continue label$3;
    };
   }
   label$5 : {
    label$6 : {
     if ($4) {
      break label$6
     }
     $4 = HEAPU8[(0 + 84852 | 0) >> 0] | 0;
     if (($4 & 255 | 0 | 0) == (10 | 0)) {
      break label$6
     }
     HEAP8[$3 >> 0] = $4;
     $4 = $3;
     label$7 : while (1) {
      label$8 : {
       switch (HEAPU8[$4 >> 0] | 0 | 0) {
       case 0:
       case 10:
        break label$5;
       default:
        break label$8;
       };
      }
      $4 = $4 + 1 | 0;
      continue label$7;
     };
    }
    $4 = $3;
    $3 = 0;
   }
   $5 = HEAPU8[$4 >> 0] | 0;
   HEAP8[$4 >> 0] = 0;
   $1 = xmalloc_28int_29(($4 - $2 | 0) + 10 | 0 | 0) | 0;
   HEAP32[$0 >> 2] = HEAP32[(0 + 84868 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = HEAP32[(0 + 84864 | 0) >> 2] | 0;
   siprintf($1 | 0, 23755 | 0, $0 | 0) | 0;
   HEAP8[$4 >> 0] = $5;
   label$9 : {
    if (!$3) {
     break label$9
    }
    HEAP8[$3 >> 0] = 0;
   }
   HEAP8[(0 + 84888 | 0) >> 0] = 1;
  }
  __stack_pointer = $0 + 16 | 0;
  return $1 | 0;
 }
 
 function do_syscall_28_29() {
  var $0 = 0, $1 = 0, $4 = 0, $2 = Math_fround(0), $3 = 0.0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : {
                     label$20 : {
                      $1 = HEAP32[(50672 + 8 | 0) >> 2] | 0;
                      switch ($1 + -1 | 0 | 0) {
                      case 11:
                       break label$10;
                      case 10:
                       break label$11;
                      case 8:
                       break label$12;
                      case 7:
                       break label$13;
                      case 6:
                       break label$14;
                      case 5:
                       break label$15;
                      case 4:
                       break label$16;
                      case 3:
                       break label$17;
                      case 2:
                       break label$18;
                      case 1:
                       break label$19;
                      case 0:
                       break label$20;
                      case 15:
                       break label$4;
                      case 14:
                       break label$5;
                      case 13:
                       break label$6;
                      case 12:
                       break label$7;
                      case 16:
                       break label$8;
                      case 9:
                       break label$9;
                      default:
                       break label$3;
                      };
                     }
                     $1 = HEAP32[(0 + 50440 | 0) >> 2] | 0;
                     HEAP32[($0 + 136 | 0) >> 2] = $1;
                     HEAP32[($0 + 28 | 0) >> 2] = $1;
                     HEAP32[($0 + 16 | 0) >> 2] = HEAP32[(50672 + 16 | 0) >> 2] | 0;
                     write_output_28port_2c_20char__2c_20____29($0 + 28 | 0 | 0, 26547 | 0, $0 + 16 | 0 | 0);
                     break label$2;
                    }
                    $2 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + 48 | 0) >> 2]);
                    $1 = HEAP32[(0 + 50440 | 0) >> 2] | 0;
                    HEAP32[($0 + 128 | 0) >> 2] = $1;
                    HEAP32[($0 + 44 | 0) >> 2] = $1;
                    HEAPF64[($0 + 32 | 0) >> 3] = +$2;
                    write_output_28port_2c_20char__2c_20____29($0 + 44 | 0 | 0, 26550 | 0, $0 + 32 | 0 | 0);
                    break label$2;
                   }
                   $1 = HEAP32[(0 + 50440 | 0) >> 2] | 0;
                   HEAP32[($0 + 120 | 0) >> 2] = $1;
                   $3 = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + 48 | 0) >> 3];
                   HEAP32[($0 + 60 | 0) >> 2] = $1;
                   HEAPF64[($0 + 48 | 0) >> 3] = $3;
                   write_output_28port_2c_20char__2c_20____29($0 + 60 | 0 | 0, 26555 | 0, $0 + 48 | 0 | 0);
                   break label$2;
                  }
                  HEAP32[($0 + 112 | 0) >> 2] = HEAP32[(0 + 50440 | 0) >> 2] | 0;
                  HEAP32[($0 + 64 | 0) >> 2] = mem_reference_28unsigned_20int_29(HEAP32[(50672 + 16 | 0) >> 2] | 0 | 0) | 0;
                  HEAP32[($0 + 76 | 0) >> 2] = HEAP32[($0 + 112 | 0) >> 2] | 0;
                  write_output_28port_2c_20char__2c_20____29($0 + 76 | 0 | 0, 26561 | 0, $0 + 64 | 0 | 0);
                  break label$2;
                 }
                 read_input_28char__2c_20int_29(84912 | 0, 256 | 0);
                 HEAP32[(50672 + 8 | 0) >> 2] = atol(84912 | 0) | 0;
                 break label$2;
                }
                read_input_28char__2c_20int_29(85168 | 0, 256 | 0);
                HEAPF32[(HEAP32[(0 + 50816 | 0) >> 2] | 0) >> 2] = Math_fround(+atof(85168 | 0));
                break label$2;
               }
               read_input_28char__2c_20int_29(85424 | 0, 256 | 0);
               HEAPF64[(HEAP32[(0 + 50812 | 0) >> 2] | 0) >> 3] = +atof(85424 | 0);
               break label$2;
              }
              read_input_28char__2c_20int_29(mem_reference_28unsigned_20int_29(HEAP32[(50672 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[(50672 + 20 | 0) >> 2] | 0 | 0);
              $1 = 1;
              HEAP8[(0 + 51872 | 0) >> 0] = 1;
              break label$1;
             }
             $4 = HEAP32[(0 + 51884 | 0) >> 2] | 0;
             expand_data_28int_29(HEAP32[(50672 + 16 | 0) >> 2] | 0 | 0);
             $1 = 1;
             HEAP8[(0 + 51872 | 0) >> 0] = 1;
             HEAP32[(50672 + 8 | 0) >> 2] = $4;
             break label$1;
            }
            $1 = HEAP32[(0 + 50440 | 0) >> 2] | 0;
            HEAP32[($0 + 104 | 0) >> 2] = $1;
            HEAP32[($0 + 92 | 0) >> 2] = $1;
            HEAP32[($0 + 80 | 0) >> 2] = HEAP32[(50672 + 16 | 0) >> 2] | 0;
            write_output_28port_2c_20char__2c_20____29($0 + 92 | 0 | 0, 26564 | 0, $0 + 80 | 0 | 0);
            break label$2;
           }
           read_input_28char__2c_20int_29(85680 | 0, 2 | 0);
           label$21 : {
            if (HEAPU8[(0 + 85680 | 0) >> 0] | 0) {
             break label$21
            }
            HEAP8[(0 + 85680 | 0) >> 0] = 10;
           }
           HEAP32[(50672 + 8 | 0) >> 2] = HEAP8[(0 + 85680 | 0) >> 0] | 0;
           break label$2;
          }
          $1 = 0;
          HEAP32[(0 + 50452 | 0) >> 2] = 0;
          break label$1;
         }
         $1 = 0;
         HEAP32[(0 + 50452 | 0) >> 2] = HEAP32[(50672 + 16 | 0) >> 2] | 0;
         break label$1;
        }
        $1 = mem_reference_28unsigned_20int_29(HEAP32[(50672 + 16 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($0 + 96 | 0) >> 2] = HEAP32[(50672 + 24 | 0) >> 2] | 0;
        HEAP32[(50672 + 8 | 0) >> 2] = open($1 | 0, HEAP32[(50672 + 20 | 0) >> 2] | 0 | 0, $0 + 96 | 0 | 0) | 0;
        break label$2;
       }
       mem_reference_28unsigned_20int_29(((HEAP32[(50672 + 20 | 0) >> 2] | 0) + (HEAP32[(50672 + 24 | 0) >> 2] | 0) | 0) + -1 | 0 | 0) | 0;
       $1 = 1;
       $4 = read(HEAP32[(50672 + 16 | 0) >> 2] | 0 | 0, mem_reference_28unsigned_20int_29(HEAP32[(50672 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[(50672 + 24 | 0) >> 2] | 0 | 0) | 0;
       HEAP8[(0 + 51872 | 0) >> 0] = 1;
       HEAP32[(50672 + 8 | 0) >> 2] = $4;
       break label$1;
      }
      mem_reference_28unsigned_20int_29(((HEAP32[(50672 + 20 | 0) >> 2] | 0) + (HEAP32[(50672 + 24 | 0) >> 2] | 0) | 0) + -1 | 0 | 0) | 0;
      HEAP32[(50672 + 8 | 0) >> 2] = write(HEAP32[(50672 + 16 | 0) >> 2] | 0 | 0, mem_reference_28unsigned_20int_29(HEAP32[(50672 + 20 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[(50672 + 24 | 0) >> 2] | 0 | 0) | 0;
      break label$2;
     }
     HEAP32[(50672 + 8 | 0) >> 2] = close(HEAP32[(50672 + 16 | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    HEAP32[$0 >> 2] = $1;
    run_error_28char__2c_20____29(26567 | 0, $0 | 0);
   }
   $1 = 1;
  }
  __stack_pointer = $0 + 144 | 0;
  return $1 | 0;
 }
 
 function handle_exception_28_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 96 | 0;
  __stack_pointer = $0;
  label$1 : {
   if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
    break label$1
   }
   if (!((HEAPU8[(51344 + 52 | 0) >> 0] | 0) & 124 | 0)) {
    break label$1
   }
   HEAP32[($0 + 80 | 0) >> 2] = HEAP32[(51344 + 56 | 0) >> 2] | 0;
   error_28char__2c_20____29(26592 | 0, $0 + 80 | 0 | 0);
  }
  HEAP32[(0 + 50808 | 0) >> 2] = -2147483264;
  HEAP32[(0 + 50632 | 0) >> 2] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               $1 = ((HEAP32[(51344 + 52 | 0) >> 2] | 0) >>> 2 | 0) & 31 | 0;
               switch ($1 | 0) {
               case 8:
                break label$10;
               case 7:
                break label$11;
               case 6:
                break label$12;
               case 5:
                break label$13;
               case 4:
                break label$14;
               case 0:
                break label$2;
               case 15:
                break label$4;
               case 13:
                break label$5;
               case 12:
                break label$6;
               case 11:
                break label$7;
               case 10:
                break label$8;
               case 9:
                break label$9;
               default:
                break label$3;
               };
              }
              if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
               break label$2
              }
              HEAP32[($0 + 16 | 0) >> 2] = HEAP32[(51344 + 32 | 0) >> 2] | 0;
              error_28char__2c_20____29(26625 | 0, $0 + 16 | 0 | 0);
              break label$2;
             }
             if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
              break label$2
             }
             HEAP32[($0 + 32 | 0) >> 2] = HEAP32[(51344 + 32 | 0) >> 2] | 0;
             error_28char__2c_20____29(26673 | 0, $0 + 32 | 0 | 0);
             break label$2;
            }
            if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
             break label$2
            }
            HEAP32[($0 + 48 | 0) >> 2] = HEAP32[(51344 + 32 | 0) >> 2] | 0;
            error_28char__2c_20____29(26711 | 0, $0 + 48 | 0 | 0);
            break label$2;
           }
           if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
            break label$2
           }
           HEAP32[($0 + 64 | 0) >> 2] = HEAP32[(51344 + 32 | 0) >> 2] | 0;
           error_28char__2c_20____29(26747 | 0, $0 + 64 | 0 | 0);
           break label$2;
          }
          if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
           break label$2
          }
          error_28char__2c_20____29(26789 | 0, 0 | 0);
          break label$2;
         }
         HEAP32[(0 + 50632 | 0) >> 2] = 0;
         break label$2;
        }
        if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
         break label$2
        }
        error_28char__2c_20____29(26809 | 0, 0 | 0);
        break label$2;
       }
       if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
        break label$2
       }
       error_28char__2c_20____29(26843 | 0, 0 | 0);
       break label$2;
      }
      if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
       break label$2
      }
      error_28char__2c_20____29(26866 | 0, 0 | 0);
      break label$2;
     }
     if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
      break label$2
     }
     error_28char__2c_20____29(26889 | 0, 0 | 0);
     break label$2;
    }
    if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
     break label$2
    }
    error_28char__2c_20____29(26897 | 0, 0 | 0);
    break label$2;
   }
   if (HEAPU8[(0 + 50432 | 0) >> 0] | 0) {
    break label$2
   }
   HEAP32[$0 >> 2] = $1;
   error_28char__2c_20____29(26915 | 0, $0 | 0);
  }
  __stack_pointer = $0 + 96 | 0;
 }
 
 function format_registers_28str_stm__2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $6 = 0, $5 = 0, $4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9 = Math_fround(0), $7 = 0.0, $8 = 0, $220 = 0;
  $3 = __stack_pointer - 464 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 448 | 0) >> 2] = HEAP32[(0 + 50808 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27034 | 0, $3 + 448 | 0 | 0);
  HEAP32[($3 + 432 | 0) >> 2] = HEAP32[(51344 + 56 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27053 | 0, $3 + 432 | 0 | 0);
  HEAP32[($3 + 416 | 0) >> 2] = HEAP32[(51344 + 52 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27070 | 0, $3 + 416 | 0 | 0);
  HEAP32[($3 + 400 | 0) >> 2] = HEAP32[(51344 + 32 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27088 | 0, $3 + 400 | 0 | 0);
  HEAP32[($3 + 384 | 0) >> 2] = HEAP32[(51344 + 48 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27105 | 0, $3 + 384 | 0 | 0);
  HEAP32[($3 + 368 | 0) >> 2] = HEAP32[(0 + 50800 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27124 | 0, $3 + 368 | 0 | 0);
  HEAP32[($3 + 352 | 0) >> 2] = HEAP32[(0 + 50804 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27141 | 0, $3 + 352 | 0 | 0);
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27202 | 0, 0 | 0);
  $4 = $1 ? 27158 : 27180;
  $5 = $1 ? 27177 : 27200;
  $1 = 0;
  label$1 : while (1) {
   HEAP32[($3 + 336 | 0) >> 2] = $1;
   $6 = $1 << 2 | 0;
   HEAP32[($3 + 340 | 0) >> 2] = HEAP32[($6 + 49472 | 0) >> 2] | 0;
   HEAP32[($3 + 344 | 0) >> 2] = HEAP32[(50672 + $6 | 0) >> 2] | 0;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 336 | 0 | 0);
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $5 | 0, 0 | 0);
   $6 = $1 + 8 | 0;
   HEAP32[($3 + 320 | 0) >> 2] = $6;
   $6 = $6 << 2 | 0;
   HEAP32[($3 + 324 | 0) >> 2] = HEAP32[($6 + 49472 | 0) >> 2] | 0;
   HEAP32[($3 + 328 | 0) >> 2] = HEAP32[(50672 + $6 | 0) >> 2] | 0;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 320 | 0 | 0);
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $5 | 0, 0 | 0);
   $6 = $1 + 16 | 0;
   HEAP32[($3 + 304 | 0) >> 2] = $6;
   $6 = $6 << 2 | 0;
   HEAP32[($3 + 308 | 0) >> 2] = HEAP32[($6 + 49472 | 0) >> 2] | 0;
   HEAP32[($3 + 312 | 0) >> 2] = HEAP32[(50672 + $6 | 0) >> 2] | 0;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 304 | 0 | 0);
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $5 | 0, 0 | 0);
   $6 = $1 + 24 | 0;
   HEAP32[($3 + 288 | 0) >> 2] = $6;
   $6 = $6 << 2 | 0;
   HEAP32[($3 + 292 | 0) >> 2] = HEAP32[($6 + 49472 | 0) >> 2] | 0;
   HEAP32[($3 + 296 | 0) >> 2] = HEAP32[(50672 + $6 | 0) >> 2] | 0;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 288 | 0 | 0);
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27226 | 0, 0 | 0);
   $1 = $1 + 1 | 0;
   if (($1 | 0) != (8 | 0)) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($3 + 272 | 0) >> 2] = HEAP32[(51344 + 128 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27228 | 0, $3 + 272 | 0 | 0);
  HEAP32[($3 + 256 | 0) >> 2] = HEAP32[(51344 + 252 | 0) >> 2] | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27247 | 0, $3 + 256 | 0 | 0);
  $1 = 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27266 | 0, 0 | 0);
  $4 = $2 ? 27308 : 27325;
  label$2 : {
   label$3 : {
    if ($2) {
     break label$3
    }
    label$4 : while (1) {
     $5 = $1 << 3 | 0;
     HEAPF64[($3 + 184 | 0) >> 3] = +HEAPF64[((HEAP32[(0 + 50812 | 0) >> 2] | 0) + $5 | 0) >> 3];
     $6 = $1 << 1 | 0;
     HEAP32[($3 + 176 | 0) >> 2] = $6;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 176 | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
     $7 = +HEAPF64[(($5 + (HEAP32[(0 + 50812 | 0) >> 2] | 0) | 0) + 32 | 0) >> 3];
     HEAP32[($3 + 160 | 0) >> 2] = $6 + 8 | 0;
     HEAPF64[($3 + 168 | 0) >> 3] = $7;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 160 | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
     $7 = +HEAPF64[(($5 + (HEAP32[(0 + 50812 | 0) >> 2] | 0) | 0) + 64 | 0) >> 3];
     HEAP32[($3 + 144 | 0) >> 2] = $6 + 16 | 0;
     HEAPF64[($3 + 152 | 0) >> 3] = $7;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 144 | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
     $7 = +HEAPF64[(($5 + (HEAP32[(0 + 50812 | 0) >> 2] | 0) | 0) + 96 | 0) >> 3];
     HEAP32[($3 + 128 | 0) >> 2] = $6 + 24 | 0;
     HEAPF64[($3 + 136 | 0) >> 3] = $7;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 128 | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27226 | 0, 0 | 0);
     $1 = $1 + 1 | 0;
     if (($1 | 0) != (4 | 0)) {
      continue label$4
     }
     break label$4;
    };
    $4 = 27325;
    break label$2;
   }
   label$5 : while (1) {
    $5 = $1 << 3 | 0;
    i64toi32_i32$2 = (HEAP32[(0 + 50812 | 0) >> 2] | 0) + $5 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $220 = i64toi32_i32$0;
    i64toi32_i32$0 = $3;
    HEAP32[($3 + 244 | 0) >> 2] = $220;
    HEAP32[($3 + 248 | 0) >> 2] = i64toi32_i32$1;
    $6 = $1 << 1 | 0;
    HEAP32[($3 + 240 | 0) >> 2] = $6;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 240 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
    i64toi32_i32$2 = ($5 + (HEAP32[(0 + 50812 | 0) >> 2] | 0) | 0) + 32 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $8 = i64toi32_i32$1;
    HEAP32[($3 + 224 | 0) >> 2] = $6 + 8 | 0;
    i64toi32_i32$1 = $3;
    HEAP32[($3 + 228 | 0) >> 2] = $8;
    HEAP32[($3 + 232 | 0) >> 2] = i64toi32_i32$0;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 224 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
    i64toi32_i32$2 = ($5 + (HEAP32[(0 + 50812 | 0) >> 2] | 0) | 0) + 64 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $8 = i64toi32_i32$0;
    HEAP32[($3 + 208 | 0) >> 2] = $6 + 16 | 0;
    i64toi32_i32$0 = $3;
    HEAP32[($3 + 212 | 0) >> 2] = $8;
    HEAP32[($3 + 216 | 0) >> 2] = i64toi32_i32$1;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 208 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
    i64toi32_i32$2 = ($5 + (HEAP32[(0 + 50812 | 0) >> 2] | 0) | 0) + 96 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $8 = i64toi32_i32$1;
    HEAP32[($3 + 192 | 0) >> 2] = $6 + 24 | 0;
    i64toi32_i32$1 = $3;
    HEAP32[($3 + 196 | 0) >> 2] = $8;
    HEAP32[($3 + 200 | 0) >> 2] = i64toi32_i32$0;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 192 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27226 | 0, 0 | 0);
    $1 = $1 + 1 | 0;
    if (($1 | 0) != (4 | 0)) {
     continue label$5
    }
    break label$5;
   };
   $4 = 27343;
  }
  $1 = 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27355 | 0, 0 | 0);
  label$6 : {
   label$7 : {
    if ($2) {
     break label$7
    }
    label$8 : while (1) {
     $9 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0) >> 2]);
     HEAP32[($3 + 48 | 0) >> 2] = $1;
     HEAPF64[($3 + 56 | 0) >> 3] = +$9;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 48 | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
     $5 = $1 + 8 | 0;
     $9 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2]);
     HEAP32[($3 + 32 | 0) >> 2] = $5;
     HEAPF64[($3 + 40 | 0) >> 3] = +$9;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 32 | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
     $5 = $1 + 16 | 0;
     $9 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2]);
     HEAP32[($3 + 16 | 0) >> 2] = $5;
     HEAPF64[($3 + 24 | 0) >> 3] = +$9;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 16 | 0 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
     $5 = $1 + 24 | 0;
     $9 = Math_fround(HEAPF32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2]);
     HEAP32[$3 >> 2] = $5;
     HEAPF64[($3 + 8 | 0) >> 3] = +$9;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 | 0);
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27226 | 0, 0 | 0);
     $1 = $1 + 1 | 0;
     if (($1 | 0) != (8 | 0)) {
      continue label$8
     }
     break label$6;
    };
   }
   label$9 : while (1) {
    $5 = HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3 + 112 | 0) >> 2] = $1;
    HEAP32[($3 + 116 | 0) >> 2] = $5;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 112 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
    $5 = $1 + 8 | 0;
    $6 = HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3 + 96 | 0) >> 2] = $5;
    HEAP32[($3 + 100 | 0) >> 2] = $6;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 96 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
    $5 = $1 + 16 | 0;
    $6 = HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3 + 80 | 0) >> 2] = $5;
    HEAP32[($3 + 84 | 0) >> 2] = $6;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 80 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27200 | 0, 0 | 0);
    $5 = $1 + 24 | 0;
    $6 = HEAP32[((HEAP32[(0 + 50816 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($3 + 64 | 0) >> 2] = $5;
    HEAP32[($3 + 68 | 0) >> 2] = $6;
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, $4 | 0, $3 + 64 | 0 | 0);
    ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27226 | 0, 0 | 0);
    $1 = $1 + 1 | 0;
    if (($1 | 0) != (8 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  __stack_pointer = $3 + 464 | 0;
 }
 
 function format_insts_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $3 = read_mem_inst_28unsigned_20int_29($1 | 0) | 0;
     if (!$3) {
      break label$3
     }
     format_an_inst_28str_stm__2c_20inst_s__2c_20unsigned_20int_29($0 | 0, $3 | 0, $1 | 0);
    }
    $1 = $1 + 4 | 0;
    if ($1 >>> 0 < $2 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function format_data_segs_28str_stm__29($0) {
  $0 = $0 | 0;
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27397 | 0, 0 | 0);
  format_mem_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29($0 | 0, 268435456 | 0, HEAP32[(0 + 51884 | 0) >> 2] | 0 | 0);
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27404 | 0, 0 | 0);
  format_mem_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29($0 | 0, (HEAP32[(50672 + 116 | 0) >> 2] | 0) & -4 | 0 | 0, -2147483648 | 0);
  ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27413 | 0, 0 | 0);
  format_mem_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29($0 | 0, -1879048192 | 0, HEAP32[(0 + 51928 | 0) >> 2] | 0 | 0);
 }
 
 function format_mem_28str_stm__2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  label$1 : {
   $1 = format_partial_line_28str_stm__2c_20unsigned_20int_29($0 | 0, ($1 + 3 | 0) & -4 | 0 | 0) | 0;
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    $4 = $1;
    $5 = 0;
    label$3 : {
     if ($1 >>> 0 >= $2 >>> 0) {
      break label$3
     }
     label$4 : while (1) {
      if (read_mem_word_28unsigned_20int_29($4 | 0) | 0) {
       break label$3
      }
      $5 = $5 + 1 | 0;
      $4 = ($5 << 2 | 0) + $1 | 0;
      if ($4 >>> 0 < $2 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     label$6 : {
      if ($5 >>> 0 < 4 >>> 0) {
       break label$6
      }
      HEAP32[($3 + 4 | 0) >> 2] = $4;
      HEAP32[$3 >> 2] = $1;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27428 | 0, $3 | 0);
      $1 = format_partial_line_28str_stm__2c_20unsigned_20int_29($0 | 0, $4 | 0) | 0;
      break label$5;
     }
     HEAP32[($3 + 32 | 0) >> 2] = $1;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27460 | 0, $3 + 32 | 0 | 0);
     label$7 : while (1) {
      HEAP32[($3 + 16 | 0) >> 2] = read_mem_word_28unsigned_20int_29($1 | 0) | 0;
      ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27477 | 0, $3 + 16 | 0 | 0);
      $1 = $1 + 4 | 0;
      if ($1 & 15 | 0) {
       continue label$7
      }
      break label$7;
     };
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27226 | 0, 0 | 0);
    }
    if ($1 >>> 0 < $2 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function format_partial_line_28str_stm__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   $3 = $1 & 15 | 0;
   if (!$3) {
    break label$1
   }
   HEAP32[($2 + 16 | 0) >> 2] = $1;
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27460 | 0, $2 + 16 | 0 | 0);
   label$2 : {
    if (!$3) {
     break label$2
    }
    label$3 : while (1) {
     HEAP32[$2 >> 2] = read_mem_word_28unsigned_20int_29($1 | 0) | 0;
     ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27477 | 0, $2 | 0);
     $1 = $1 + 4 | 0;
     if ($1 & 15 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   ss_printf_28str_stm__2c_20char__2c_20____29($0 | 0, 27226 | 0, 0 | 0);
  }
  __stack_pointer = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function ss_init_28str_stm__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = dlmalloc(256 | 0) | 0;
  HEAP32[($0 + 12 | 0) >> 2] = 1;
  HEAP32[($0 + 4 | 0) >> 2] = 256;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  HEAP32[$0 >> 2] = $1;
 }
 
 function ss_clear_28str_stm__29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   ss_init_28str_stm__29($0 | 0);
  }
  HEAP32[($0 + 8 | 0) >> 2] = 0;
 }
 
 function ss_erase_28str_stm__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   ss_init_28str_stm__29($0 | 0);
  }
  $1 = (HEAP32[($0 + 8 | 0) >> 2] | 0) - $1 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = ($1 | 0) > (0 | 0) ? $1 : 0;
 }
 
 function ss_length_28str_stm__29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   ss_init_28str_stm__29($0 | 0);
  }
  return HEAP32[($0 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function ss_to_string_28str_stm__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   ss_init_28str_stm__29($0 | 0);
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if ((HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$2
   }
   $1 = $1 + 1 | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $1;
   $1 = dlrealloc(HEAP32[$0 >> 2] | 0 | 0, $1 | 0) | 0;
   HEAP32[$0 >> 2] = $1;
   if ($1) {
    break label$2
   }
   fatal_error_28char__2c_20____29(27486 | 0, 0 | 0);
  }
  HEAP8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0) >> 0] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = (HEAP32[($0 + 8 | 0) >> 2] | 0) + 1 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function ss_printf_28str_stm__2c_20char__2c_20____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $19 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  label$1 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   ss_init_28str_stm__29($0 | 0);
  }
  label$2 : {
   $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   $19 = (HEAP32[$0 >> 2] | 0) + $4 | 0;
   $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - $4 | 0;
   $5 = vsnprintf($19 | 0, $4 | 0, $1 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
   if (($5 | 0) < ($4 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) << 1 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $4;
    $5 = dlrealloc(HEAP32[$0 >> 2] | 0 | 0, $4 | 0) | 0;
    HEAP32[$0 >> 2] = $5;
    $4 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
    label$4 : {
     if ($5) {
      break label$4
     }
     fatal_error_28char__2c_20____29(27486 | 0, 0 | 0);
    }
    HEAP32[($3 + 12 | 0) >> 2] = $2;
    $5 = vsnprintf((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0 | 0, $4 | 0, $1 | 0, $2 | 0) | 0;
    if (($5 | 0) >= ($4 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $4 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $5 | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $4;
  label$5 : {
   if (($4 | 0) >= (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
    break label$5
   }
   HEAP8[((HEAP32[$0 >> 2] | 0) + $4 | 0) >> 0] = 0;
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function tcgetattr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[$2 >> 2] = $1;
  $0 = ioctl($0 | 0, 21505 | 0, $2 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return ($0 ? -1 : 0) | 0;
 }
 
 function tcsetattr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 < 3 >>> 0) {
     break label$2
    }
    HEAP32[(__errno_location() | 0) >> 2] = 28;
    $1 = -1;
    break label$1;
   }
   HEAP32[$3 >> 2] = $2;
   $1 = ioctl($0 | 0, $1 + 21506 | 0 | 0, $3 | 0) | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return $1 | 0;
 }
 
 function open($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    if ($1 & 64 | 0) {
     break label$2
    }
    $4 = 0;
    if (($1 & 4259840 | 0 | 0) != (4259840 | 0)) {
     break label$1
    }
   }
   HEAP32[($3 + 12 | 0) >> 2] = $2 + 4 | 0;
   $4 = HEAP32[$2 >> 2] | 0;
  }
  HEAP32[$3 >> 2] = $4;
  $1 = __syscall_ret(__syscall5($0 | 0, $1 | 32768 | 0 | 0, $3 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $1 | 0;
 }
 
 function tolower($0) {
  $0 = $0 | 0;
  return (isupper($0 | 0) | 0 ? $0 | 32 | 0 : $0) | 0;
 }
 
 function isupper($0) {
  $0 = $0 | 0;
  return ($0 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function __syscall_ret($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[(__errno_location() | 0) >> 2] = 0 - $0 | 0;
   $0 = -1;
  }
  return $0 | 0;
 }
 
 function select($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return __syscall_ret(__syscall142($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0 | 0) | 0 | 0;
 }
 
 function ioctl($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2 + 4 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2] | 0;
  $2 = __syscall_ret(__syscall54($0 | 0, $1 | 0, $3 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function htonl($0) {
  $0 = $0 | 0;
  return __bswap_32($0 | 0) | 0 | 0;
 }
 
 function __bswap_32($0) {
  $0 = $0 | 0;
  return $0 << 24 | 0 | (($0 << 8 | 0) & 16711680 | 0) | 0 | (($0 >>> 8 | 0) & 65280 | 0 | ($0 >>> 24 | 0) | 0) | 0 | 0;
 }
 
 function __errno_location() {
  return 85684 | 0;
 }
 
 function write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  HEAP32[($3 + 8 | 0) >> 2] = $1;
  $0 = __wasi_syscall_ret(__wasi_fd_write($0 | 0, $3 + 8 | 0 | 0, 1 | 0, $3 + 4 | 0 | 0) | 0 | 0) | 0;
  $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return ($0 ? -1 : $1) | 0;
 }
 
 function read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  HEAP32[($3 + 8 | 0) >> 2] = $1;
  $0 = __wasi_syscall_ret(__wasi_fd_read($0 | 0, $3 + 8 | 0 | 0, 1 | 0, $3 + 4 | 0 | 0) | 0 | 0) | 0;
  $1 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return ($0 ? -1 : $1) | 0;
 }
 
 function dummy($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function close($0) {
  $0 = $0 | 0;
  $0 = __wasi_fd_close(dummy($0 | 0) | 0 | 0) | 0;
  return __wasi_syscall_ret((($0 | 0) == (27 | 0) ? 0 : $0) | 0) | 0 | 0;
 }
 
 function isatty($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $0 = __wasi_fd_fdstat_get($0 | 0, $1 + 8 | 0 | 0) | 0;
    if ($0) {
     break label$2
    }
    $0 = 59;
    $2 = 1;
    if ((HEAPU8[($1 + 8 | 0) >> 0] | 0 | 0) == (2 | 0)) {
     break label$1
    }
   }
   HEAP32[(__errno_location() | 0) >> 2] = $0;
   $2 = 0;
  }
  __stack_pointer = $1 + 32 | 0;
  return $2 | 0;
 }
 
 function strtok($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $2 = 0;
    $0 = HEAP32[(0 + 85688 | 0) >> 2] | 0;
    if (!$0) {
     break label$1
    }
   }
   label$3 : {
    $2 = $0 + (strspn($0 | 0, $1 | 0) | 0) | 0;
    if (HEAPU8[$2 >> 0] | 0) {
     break label$3
    }
    HEAP32[(0 + 85688 | 0) >> 2] = 0;
    return 0 | 0;
   }
   label$4 : {
    $0 = $2 + (strcspn($2 | 0, $1 | 0) | 0) | 0;
    if (!(HEAPU8[$0 >> 0] | 0)) {
     break label$4
    }
    HEAP32[(0 + 85688 | 0) >> 2] = $0 + 1 | 0;
    HEAP8[$0 >> 0] = 0;
    return $2 | 0;
   }
   HEAP32[(0 + 85688 | 0) >> 2] = 0;
  }
  return $2 | 0;
 }
 
 function __stpcpy($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   label$2 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2 = HEAPU8[$1 >> 0] | 0;
      HEAP8[$0 >> 0] = $2;
      if (!$2) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      $1 = $1 + 1 | 0;
      if ($1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2 = HEAP32[$1 >> 2] | 0;
    if ((($2 ^ -1 | 0) & ($2 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0 >> 2] = $2;
     $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $0 = $0 + 4 | 0;
     $1 = $1 + 4 | 0;
     if (!((($2 ^ -1 | 0) & ($2 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2 = HEAPU8[$1 >> 0] | 0;
   HEAP8[$0 >> 0] = $2;
   if (!$2) {
    break label$1
   }
   label$6 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($0 + 1 | 0) >> 0] = $2;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    if ($2) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0 | 0;
 }
 
 function strcpy($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  __stpcpy($0 | 0, $1 | 0) | 0;
  return $0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function __strchrnul($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $2 = $1 & 255 | 0;
    if (!$2) {
     break label$2
    }
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3 = HEAPU8[$0 >> 0] | 0;
      if (!$3) {
       break label$1
      }
      if (($3 | 0) == ($1 & 255 | 0 | 0)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2 = Math_imul($2, 16843009);
     label$6 : while (1) {
      $3 = $3 ^ $2 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $0 = $0 + 4 | 0;
      if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3 = $0;
      $2 = HEAPU8[$3 >> 0] | 0;
      if (!$2) {
       break label$7
      }
      $0 = $3 + 1 | 0;
      if (($2 | 0) != ($1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3 | 0;
   }
   return $0 + (strlen($0 | 0) | 0) | 0 | 0;
  }
  return $0 | 0;
 }
 
 function strcspn($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAP8[$1 >> 0] | 0;
     if (!$3) {
      break label$3
     }
     if (HEAPU8[($1 + 1 | 0) >> 0] | 0) {
      break label$2
     }
    }
    $4 = __strchrnul($0 | 0, $3 | 0) | 0;
    break label$1;
   }
   memset($2 | 0, 0 | 0, 32 | 0) | 0;
   label$4 : {
    $3 = HEAPU8[$1 >> 0] | 0;
    if (!$3) {
     break label$4
    }
    label$5 : while (1) {
     $4 = $2 + (($3 >>> 3 | 0) & 28 | 0) | 0;
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 0 | (1 << ($3 & 31 | 0) | 0) | 0;
     $3 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
     $1 = $1 + 1 | 0;
     if ($3) {
      continue label$5
     }
     break label$5;
    };
   }
   $4 = $0;
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   $1 = $0;
   label$6 : while (1) {
    label$7 : {
     if (!(((HEAP32[($2 + (($3 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($3 & 31 | 0) | 0) & 1 | 0)) {
      break label$7
     }
     $4 = $1;
     break label$1;
    }
    $3 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $4 = $1 + 1 | 0;
    $1 = $4;
    if ($3) {
     continue label$6
    }
    break label$6;
   };
  }
  __stack_pointer = $2 + 32 | 0;
  return $4 - $0 | 0 | 0;
 }
 
 function strspn($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  i64toi32_i32$1 = $2 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $3 = HEAPU8[$1 >> 0] | 0;
   if ($3) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   $4 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
   if ($4) {
    break label$2
   }
   $4 = $0;
   label$3 : while (1) {
    $1 = $4;
    $4 = $1 + 1 | 0;
    if ((HEAPU8[$1 >> 0] | 0 | 0) == ($3 | 0)) {
     continue label$3
    }
    break label$3;
   };
   return $1 - $0 | 0 | 0;
  }
  $5 = $2 + (($3 >>> 3 | 0) & 28 | 0) | 0;
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 0 | (1 << ($3 & 31 | 0) | 0) | 0;
  label$4 : while (1) {
   $3 = $4 & 31 | 0;
   $5 = $4 >>> 3 | 0;
   $4 = HEAPU8[($1 + 2 | 0) >> 0] | 0;
   $5 = $2 + ($5 & 28 | 0) | 0;
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 0 | (1 << $3 | 0) | 0;
   $1 = $1 + 1 | 0;
   if ($4) {
    continue label$4
   }
   break label$4;
  };
  $3 = $0;
  label$5 : {
   $4 = HEAPU8[$3 >> 0] | 0;
   if (!$4) {
    break label$5
   }
   $1 = $0;
   label$6 : while (1) {
    label$7 : {
     if (((HEAP32[($2 + (($4 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($4 & 31 | 0) | 0) & 1 | 0) {
      break label$7
     }
     $3 = $1;
     break label$5;
    }
    $4 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = $1 + 1 | 0;
    $1 = $3;
    if ($4) {
     continue label$6
    }
    break label$6;
   };
  }
  return $3 - $0 | 0 | 0;
 }
 
 function __strdup($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = (strlen($0 | 0) | 0) + 1 | 0;
   $2 = dlmalloc($1 | 0) | 0;
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  return memcpy($2 | 0, $0 | 0, $1 | 0) | 0 | 0;
 }
 
 function fputc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if (__lockfile($1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $2 = $0 & 255 | 0;
    if (($2 | 0) == (HEAP8[($1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if ($3 >>> 0 >= (HEAP32[($1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($1 + 20 | 0) >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $0;
    return $2 | 0;
   }
   return __overflow($1 | 0, $0 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $2 = $0 & 255 | 0;
    if (($2 | 0) == (HEAP8[($1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if ($3 >>> 0 >= (HEAP32[($1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($1 + 20 | 0) >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $0;
    break label$4;
   }
   $2 = __overflow($1 | 0, $0 | 0) | 0;
  }
  __unlockfile($1 | 0);
  return $2 | 0;
 }
 
 function ferror($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    break label$1;
   }
   $2 = __lockfile($0 | 0) | 0;
   $1 = HEAP32[$0 >> 2] | 0;
   if (!$2) {
    break label$1
   }
   __unlockfile($0 | 0);
  }
  return ($1 >>> 5 | 0) & 1 | 0 | 0;
 }
 
 function dummy_1($0) {
  $0 = $0 | 0;
 }
 
 function fclose($0) {
  $0 = $0 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1 = __lockfile($0 | 0) | 0;
  }
  dummy_1($0 | 0);
  label$2 : {
   $2 = (HEAP32[$0 >> 2] | 0) & 1 | 0;
   if ($2) {
    break label$2
   }
   $3 = __ofl_lock() | 0;
   label$3 : {
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    if (!$4) {
     break label$3
    }
    HEAP32[($4 + 56 | 0) >> 2] = HEAP32[($0 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    if (!$5) {
     break label$4
    }
    HEAP32[($5 + 52 | 0) >> 2] = $4;
   }
   label$5 : {
    if ((HEAP32[$3 >> 2] | 0 | 0) != ($0 | 0)) {
     break label$5
    }
    HEAP32[$3 >> 2] = $5;
   }
   __ofl_unlock();
  }
  $3 = fflush($0 | 0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[($0 + 12 | 0) >> 2] | 0 | 0]($0) | 0;
  label$6 : {
   $5 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   if (!$5) {
    break label$6
   }
   dlfree($5 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2) {
     break label$8
    }
    dlfree($0 | 0);
    break label$7;
   }
   if (!$1) {
    break label$7
   }
   __unlockfile($0 | 0);
  }
  return $4 | $3 | 0 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return __fflush_unlocked($0 | 0) | 0 | 0;
    }
    $1 = __lockfile($0 | 0) | 0;
    $2 = __fflush_unlocked($0 | 0) | 0;
    if (!$1) {
     break label$1
    }
    __unlockfile($0 | 0);
    return $2 | 0;
   }
   $2 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 49744 | 0) >> 2] | 0)) {
     break label$4
    }
    $2 = fflush(HEAP32[(0 + 49744 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break label$5
    }
    label$6 : while (1) {
     $1 = 0;
     label$7 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1 = __lockfile($0 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2 = __fflush_unlocked($0 | 0) | 0 | $2 | 0;
     }
     label$9 : {
      if (!$1) {
       break label$9
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label$6
     }
     break label$6;
    };
   }
   __ofl_unlock();
  }
  return $2 | 0;
 }
 
 function __fflush_unlocked($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $2 = 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
   if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0;
  i64toi32_i32$1 = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function strchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = __strchrnul($0 | 0, $1 | 0) | 0;
  return ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0) ? $0 : 0) | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  $4 = HEAP32[($0 + 48 | 0) >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $2 - (($4 | 0) != (0 | 0)) | 0;
  $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $4;
  HEAP32[($3 + 24 | 0) >> 2] = $5;
  $4 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     if (($4 | 0) > (0 | 0)) {
      break label$2
     }
    }
    HEAP32[$0 >> 2] = ($4 & 48 | 0) ^ 16 | 0 | (HEAP32[$0 >> 2] | 0) | 0;
    break label$1;
   }
   $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   if ($4 >>> 0 <= $6 >>> 0) {
    break label$1
   }
   $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $5;
   HEAP32[($0 + 8 | 0) >> 2] = $5 + ($4 - $6 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
    HEAP8[(($2 + $1 | 0) + -1 | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
   }
   $4 = $2;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function __fdopen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (strchr(27502 | 0, HEAP8[$1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[(__errno_location() | 0) >> 2] = 28;
      break label$3;
     }
     $3 = dlmalloc(1176 | 0) | 0;
     if ($3) {
      break label$2
     }
    }
    $3 = 0;
    break label$1;
   }
   memset($3 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if (strchr($1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3 >> 2] = (HEAPU8[$1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1 = HEAP32[$3 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1 = __syscall221($0 | 0, 3 | 0, 0 | 0) | 0;
     if ($1 & 1024 | 0) {
      break label$8
     }
     HEAP32[($2 + 16 | 0) >> 2] = $1 | 1024 | 0;
     __syscall221($0 | 0, 4 | 0, $2 + 16 | 0 | 0) | 0;
    }
    $1 = HEAP32[$3 >> 2] | 0 | 128 | 0;
    HEAP32[$3 >> 2] = $1;
   }
   HEAP8[($3 + 75 | 0) >> 0] = 255;
   HEAP32[($3 + 48 | 0) >> 2] = 1024;
   HEAP32[($3 + 60 | 0) >> 2] = $0;
   HEAP32[($3 + 44 | 0) >> 2] = $3 + 152 | 0;
   label$9 : {
    if ($1 & 8 | 0) {
     break label$9
    }
    HEAP32[$2 >> 2] = $2 + 24 | 0;
    if (__syscall54($0 | 0, 21523 | 0, $2 | 0) | 0) {
     break label$9
    }
    HEAP8[($3 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3 + 40 | 0) >> 2] = 27;
   HEAP32[($3 + 36 | 0) >> 2] = 28;
   HEAP32[($3 + 32 | 0) >> 2] = 29;
   HEAP32[($3 + 12 | 0) >> 2] = 30;
   label$10 : {
    if (HEAP32[(85692 + 4 | 0) >> 2] | 0) {
     break label$10
    }
    HEAP32[($3 + 76 | 0) >> 2] = -1;
   }
   $3 = __ofl_add($3 | 0) | 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return $3 | 0;
 }
 
 function fopen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     if (strchr(27506 | 0, HEAP8[$1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[(__errno_location() | 0) >> 2] = 28;
     break label$2;
    }
    $3 = __fmodeflags($1 | 0) | 0;
    HEAP32[$2 >> 2] = 438;
    $4 = 0;
    $0 = __syscall_ret(__syscall5($0 | 0, $3 | 32768 | 0 | 0, $2 | 0) | 0 | 0) | 0;
    if (($0 | 0) < (0 | 0)) {
     break label$1
    }
    $4 = __fdopen($0 | 0, $1 | 0) | 0;
    if ($4) {
     break label$1
    }
    __wasi_fd_close($0 | 0) | 0;
   }
   $4 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 | 0;
 }
 
 function vsnprintf($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  memcpy($4 + 8 | 0 | 0, 27512 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1) {
      break label$2
     }
     $0 = $4 + 159 | 0;
     $1 = 1;
    }
    HEAP32[($4 + 52 | 0) >> 2] = $0;
    HEAP32[($4 + 28 | 0) >> 2] = $0;
    $5 = -2 - $0 | 0;
    $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
    HEAP32[($4 + 56 | 0) >> 2] = $1;
    $0 = $0 + $1 | 0;
    HEAP32[($4 + 36 | 0) >> 2] = $0;
    HEAP32[($4 + 24 | 0) >> 2] = $0;
    $0 = vfprintf($4 + 8 | 0 | 0, $2 | 0, $3 | 0) | 0;
    if (!$1) {
     break label$1
    }
    $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    HEAP8[($1 - (($1 | 0) == (HEAP32[($4 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[(__errno_location() | 0) >> 2] = 61;
   $0 = -1;
  }
  __stack_pointer = $4 + 160 | 0;
  return $0 | 0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $6 = 0;
  $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  $6 = $3;
  $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) - $3 | 0;
  $3 = $3 >>> 0 > $2 >>> 0 ? $2 : $3;
  memcpy($6 | 0, $1 | 0, $3 | 0) | 0;
  HEAP32[($0 + 20 | 0) >> 2] = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $3 | 0;
  return $2 | 0;
 }
 
 function vsniprintf($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  memcpy($4 + 8 | 0 | 0, 27512 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1) {
      break label$2
     }
     $0 = $4 + 159 | 0;
     $1 = 1;
    }
    HEAP32[($4 + 52 | 0) >> 2] = $0;
    HEAP32[($4 + 28 | 0) >> 2] = $0;
    $5 = -2 - $0 | 0;
    $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
    HEAP32[($4 + 56 | 0) >> 2] = $1;
    $0 = $0 + $1 | 0;
    HEAP32[($4 + 36 | 0) >> 2] = $0;
    HEAP32[($4 + 24 | 0) >> 2] = $0;
    $0 = vfiprintf($4 + 8 | 0 | 0, $2 | 0, $3 | 0) | 0;
    if (!$1) {
     break label$1
    }
    $1 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    HEAP8[($1 - (($1 | 0) == (HEAP32[($4 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[(__errno_location() | 0) >> 2] = 61;
   $0 = -1;
  }
  __stack_pointer = $4 + 160 | 0;
  return $0 | 0;
 }
 
 function vsiprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return vsniprintf($0 | 0, 2147483647 | 0, $1 | 0, $2 | 0) | 0 | 0;
 }
 
 function siprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vsiprintf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = $1$hi;
  $0 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0 ? -1 : $1;
  i64toi32_i32$2 = $0 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function isdigit($0) {
  $0 = $0 | 0;
  return ($0 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function memchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2) {
      break label$3
     }
     if (!($0 & 3 | 0)) {
      break label$3
     }
     $4 = $1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0 >> 0] | 0 | 0) == ($4 | 0)) {
       break label$2
      }
      $0 = $0 + 1 | 0;
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != (0 | 0);
      if (!$2) {
       break label$3
      }
      if ($0 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4 = Math_imul($1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3 = (HEAP32[$0 >> 2] | 0) ^ $4 | 0;
     if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0 = $0 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2) {
    break label$1
   }
   $3 = $1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) != ($3 | 0)) {
      break label$8
     }
     return $0 | 0;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function wcrtomb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 1;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ($1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[((__pthread_self() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[(__errno_location() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0 + 1 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0 + 2 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0 + 3 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0 + 2 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 25;
    }
    $3 = -1;
   }
   return $3 | 0;
  }
  HEAP8[$0 >> 0] = $1;
  return 1 | 0;
 }
 
 function wctomb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  return wcrtomb($0 | 0, $1 | 0, 0 | 0) | 0 | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2 = 0, $10 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3 = $10 & 2047 | 0;
   if (($3 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0 != 0.0) {
       break label$4
      }
      $3 = 0;
      break label$3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $3 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $3;
    return +$0;
   }
   HEAP32[$1 >> 2] = $3 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 204 | 0) >> 2] = $2;
  $2 = 0;
  memset($5 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5 + 200 | 0) >> 2] = HEAP32[($5 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((printf_core(0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2 = __lockfile($0 | 0) | 0;
   }
   $6 = HEAP32[$0 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0 >> 2] = $6 & -33 | 0;
   }
   $6 = $6 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1 = printf_core($0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0;
     break label$5;
    }
    HEAP32[($0 + 48 | 0) >> 2] = 80;
    HEAP32[($0 + 16 | 0) >> 2] = $5 + 80 | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $5;
    HEAP32[($0 + 20 | 0) >> 2] = $5;
    $7 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 44 | 0) >> 2] = $5;
    $1 = printf_core($0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0;
    if (!$7) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
    HEAP32[($0 + 48 | 0) >> 2] = 0;
    HEAP32[($0 + 44 | 0) >> 2] = $7;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    HEAP32[($0 + 20 | 0) >> 2] = 0;
    $1 = $3 ? $1 : -1;
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $3 | $6 | 0;
   $1 = $3 & 32 | 0 ? -1 : $1;
   if (!$2) {
    break label$1
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $5 + 208 | 0;
  return $1 | 0;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $13 = 0, $14 = 0, $19 = 0, i64toi32_i32$1 = 0, $15 = 0, $12 = 0, $20 = 0, i64toi32_i32$0 = 0, $17 = 0, $11 = 0, $18 = 0, i64toi32_i32$2 = 0, $16 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9 = 0, $22 = 0, $22$hi = 0, $10 = 0, $21 = 0, $30 = 0, $31 = 0, $32 = 0, $8 = 0, $275 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 76 | 0) >> 2] = $1;
  $8 = $7 + 55 | 0;
  $9 = $7 + 56 | 0;
  $10 = 0;
  $11 = 0;
  $1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1 | 0) <= (2147483647 - $11 | 0 | 0)) {
       break label$4
      }
      HEAP32[(__errno_location() | 0) >> 2] = 61;
      $11 = -1;
      break label$3;
     }
     $11 = $1 + $11 | 0;
    }
    $12 = HEAP32[($7 + 76 | 0) >> 2] | 0;
    $1 = $12;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13 = HEAPU8[$1 >> 0] | 0;
         if (!$13) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13 = $13 & 255 | 0;
             if ($13) {
              break label$13
             }
             $13 = $1;
             break label$12;
            }
            if (($13 | 0) != (37 | 0)) {
             break label$11
            }
            $13 = $1;
            label$14 : while (1) {
             if ((HEAPU8[($1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14 = $1 + 2 | 0;
             HEAP32[($7 + 76 | 0) >> 2] = $14;
             $13 = $13 + 1 | 0;
             $15 = HEAPU8[($1 + 2 | 0) >> 0] | 0;
             $1 = $14;
             if (($15 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1 = $13 - $12 | 0;
           label$15 : {
            if (!$0) {
             break label$15
            }
            out($0 | 0, $12 | 0, $1 | 0);
           }
           if ($1) {
            continue label$2
           }
           $1 = isdigit(HEAP8[((HEAP32[($7 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $13 = HEAP32[($7 + 76 | 0) >> 2] | 0;
           label$16 : {
            label$17 : {
             if (!$1) {
              break label$17
             }
             if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
              break label$17
             }
             $1 = $13 + 3 | 0;
             $16 = (HEAP8[($13 + 1 | 0) >> 0] | 0) + -48 | 0;
             $10 = 1;
             break label$16;
            }
            $1 = $13 + 1 | 0;
            $16 = -1;
           }
           HEAP32[($7 + 76 | 0) >> 2] = $1;
           $17 = 0;
           label$18 : {
            label$19 : {
             $15 = HEAP8[$1 >> 0] | 0;
             $14 = $15 + -32 | 0;
             if ($14 >>> 0 <= 31 >>> 0) {
              break label$19
             }
             $13 = $1;
             break label$18;
            }
            $17 = 0;
            $13 = $1;
            $14 = 1 << $14 | 0;
            if (!($14 & 75913 | 0)) {
             break label$18
            }
            label$20 : while (1) {
             $13 = $1 + 1 | 0;
             HEAP32[($7 + 76 | 0) >> 2] = $13;
             $17 = $14 | $17 | 0;
             $15 = HEAP8[($1 + 1 | 0) >> 0] | 0;
             $14 = $15 + -32 | 0;
             if ($14 >>> 0 >= 32 >>> 0) {
              break label$18
             }
             $1 = $13;
             $14 = 1 << $14 | 0;
             if ($14 & 75913 | 0) {
              continue label$20
             }
             break label$20;
            };
           }
           label$21 : {
            label$22 : {
             if (($15 | 0) != (42 | 0)) {
              break label$22
             }
             label$23 : {
              label$24 : {
               if (!(isdigit(HEAP8[($13 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$24
               }
               $13 = HEAP32[($7 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$24
               }
               HEAP32[((((HEAP8[($13 + 1 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
               $1 = $13 + 3 | 0;
               $18 = HEAP32[((((HEAP8[($13 + 1 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
               $10 = 1;
               break label$23;
              }
              if ($10) {
               break label$8
              }
              $10 = 0;
              $18 = 0;
              label$25 : {
               if (!$0) {
                break label$25
               }
               $1 = HEAP32[$2 >> 2] | 0;
               HEAP32[$2 >> 2] = $1 + 4 | 0;
               $18 = HEAP32[$1 >> 2] | 0;
              }
              $1 = (HEAP32[($7 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7 + 76 | 0) >> 2] = $1;
             if (($18 | 0) > (-1 | 0)) {
              break label$21
             }
             $18 = 0 - $18 | 0;
             $17 = $17 | 8192 | 0;
             break label$21;
            }
            $18 = getint($7 + 76 | 0 | 0) | 0;
            if (($18 | 0) < (0 | 0)) {
             break label$8
            }
            $1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
           }
           $19 = -1;
           label$26 : {
            if ((HEAPU8[$1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$26
            }
            label$27 : {
             if ((HEAPU8[($1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$27
             }
             label$28 : {
              if (!(isdigit(HEAP8[($1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$28
              }
              $1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$28
              }
              HEAP32[((((HEAP8[($1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
              $19 = HEAP32[((((HEAP8[($1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
              $1 = $1 + 4 | 0;
              HEAP32[($7 + 76 | 0) >> 2] = $1;
              break label$26;
             }
             if ($10) {
              break label$8
             }
             label$29 : {
              label$30 : {
               if ($0) {
                break label$30
               }
               $19 = 0;
               break label$29;
              }
              $1 = HEAP32[$2 >> 2] | 0;
              HEAP32[$2 >> 2] = $1 + 4 | 0;
              $19 = HEAP32[$1 >> 2] | 0;
             }
             $1 = (HEAP32[($7 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7 + 76 | 0) >> 2] = $1;
             break label$26;
            }
            HEAP32[($7 + 76 | 0) >> 2] = $1 + 1 | 0;
            $19 = getint($7 + 76 | 0 | 0) | 0;
            $1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
           }
           $13 = 0;
           label$31 : while (1) {
            $14 = $13;
            $20 = -1;
            if (((HEAP8[$1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15 = $1 + 1 | 0;
            HEAP32[($7 + 76 | 0) >> 2] = $15;
            $13 = HEAP8[$1 >> 0] | 0;
            $1 = $15;
            $13 = HEAPU8[(($13 + Math_imul($14, 58) | 0) + 27615 | 0) >> 0] | 0;
            if (($13 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$31
            }
            break label$31;
           };
           label$32 : {
            label$33 : {
             label$34 : {
              if (($13 | 0) == (19 | 0)) {
               break label$34
              }
              if (!$13) {
               break label$1
              }
              label$35 : {
               if (($16 | 0) < (0 | 0)) {
                break label$35
               }
               HEAP32[($4 + ($16 << 2 | 0) | 0) >> 2] = $13;
               i64toi32_i32$2 = $3 + ($16 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $275 = i64toi32_i32$0;
               i64toi32_i32$0 = $7;
               HEAP32[($7 + 64 | 0) >> 2] = $275;
               HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$33;
              }
              if (!$0) {
               break label$5
              }
              pop_arg($7 + 64 | 0 | 0, $13 | 0, $2 | 0, $6 | 0);
              $15 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              break label$32;
             }
             $20 = -1;
             if (($16 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1 = 0;
            if (!$0) {
             continue label$2
            }
           }
           $21 = $17 & -65537 | 0;
           $13 = $17 & 8192 | 0 ? $21 : $17;
           $20 = 0;
           $16 = 27656;
           $17 = $9;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                label$41 : {
                 label$42 : {
                  label$43 : {
                   label$44 : {
                    label$45 : {
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         label$50 : {
                          label$51 : {
                           $1 = HEAP8[($15 + -1 | 0) >> 0] | 0;
                           $1 = $14 ? (($1 & 15 | 0 | 0) == (3 | 0) ? $1 & -33 | 0 : $1) : $1;
                           switch ($1 + -88 | 0 | 0) {
                           case 11:
                            break label$36;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$37;
                           case 27:
                            break label$42;
                           case 12:
                           case 17:
                            break label$45;
                           case 23:
                            break label$46;
                           case 0:
                           case 32:
                            break label$47;
                           case 24:
                            break label$48;
                           case 22:
                            break label$49;
                           case 29:
                            break label$50;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          $17 = $9;
                          label$52 : {
                           switch ($1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$37;
                           case 2:
                            break label$40;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$52;
                           };
                          }
                          if (($1 | 0) == (83 | 0)) {
                           break label$41
                          }
                          break label$7;
                         }
                         $20 = 0;
                         $16 = 27656;
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         $22 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$44;
                        }
                        $1 = 0;
                        label$53 : {
                         switch ($14 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 1] = $11;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 0] = $11;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                          continue label$2;
                         case 7:
                          break label$53;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19 = $19 >>> 0 > 8 >>> 0 ? $19 : 8;
                       $13 = $13 | 8 | 0;
                       $1 = 120;
                      }
                      $20 = 0;
                      $16 = 27656;
                      i64toi32_i32$2 = $7;
                      i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                      $12 = fmt_x(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0, $1 & 32 | 0 | 0) | 0;
                      if (!($13 & 8 | 0)) {
                       break label$43
                      }
                      i64toi32_i32$2 = $7;
                      i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$43
                      }
                      $16 = ($1 >>> 4 | 0) + 27656 | 0;
                      $20 = 2;
                      break label$43;
                     }
                     $20 = 0;
                     $16 = 27656;
                     i64toi32_i32$2 = $7;
                     i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                     $12 = fmt_o(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0) | 0;
                     if (!($13 & 8 | 0)) {
                      break label$43
                     }
                     $1 = $9 - $12 | 0;
                     $19 = ($19 | 0) > ($1 | 0) ? $19 : $1 + 1 | 0;
                     break label$43;
                    }
                    label$60 : {
                     i64toi32_i32$2 = $7;
                     i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                     $22 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31 = 0
                       } else {
                        $31 = 1
                       }
                       $32 = $31;
                      } else {
                       $32 = 0
                      }
                      $30 = $32;
                     }
                     if ($30) {
                      break label$60
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7;
                     HEAP32[($7 + 64 | 0) >> 2] = $22;
                     HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20 = 1;
                     $16 = 27656;
                     break label$44;
                    }
                    label$61 : {
                     if (!($13 & 2048 | 0)) {
                      break label$61
                     }
                     $20 = 1;
                     $16 = 27657;
                     break label$44;
                    }
                    $20 = $13 & 1 | 0;
                    $16 = $20 ? 27658 : 27656;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12 = fmt_u($22 | 0, i64toi32_i32$5 | 0, $9 | 0) | 0;
                  }
                  $13 = ($19 | 0) > (-1 | 0) ? $13 & -65537 | 0 : $13;
                  i64toi32_i32$2 = $7;
                  i64toi32_i32$5 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                  $22 = i64toi32_i32$5;
                  $22$hi = i64toi32_i32$3;
                  label$62 : {
                   if ($19) {
                    break label$62
                   }
                   i64toi32_i32$3 = $22$hi;
                   if (!!($22 | i64toi32_i32$3 | 0)) {
                    break label$62
                   }
                   $19 = 0;
                   $12 = $9;
                   break label$7;
                  }
                  i64toi32_i32$3 = $22$hi;
                  $1 = ($9 - $12 | 0) + !($22 | i64toi32_i32$3 | 0) | 0;
                  $19 = ($19 | 0) > ($1 | 0) ? $19 : $1;
                  break label$7;
                 }
                 $20 = 0;
                 $1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                 $12 = $1 ? $1 : 27666;
                 $1 = memchr($12 | 0, 0 | 0, $19 | 0) | 0;
                 $17 = $1 ? $1 : $12 + $19 | 0;
                 $13 = $21;
                 $19 = $1 ? $1 - $12 | 0 : $19;
                 break label$6;
                }
                label$63 : {
                 if (!$19) {
                  break label$63
                 }
                 $14 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                 break label$39;
                }
                $1 = 0;
                pad($0 | 0, 32 | 0, $18 | 0, 0 | 0, $13 | 0);
                break label$38;
               }
               HEAP32[($7 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7;
               i64toi32_i32$3 = HEAP32[($7 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7 + 68 | 0) >> 2] | 0;
               HEAP32[($7 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7 + 64 | 0) >> 2] = $7 + 8 | 0;
               $19 = -1;
               $14 = $7 + 8 | 0;
              }
              $1 = 0;
              label$64 : {
               label$65 : while (1) {
                $15 = HEAP32[$14 >> 2] | 0;
                if (!$15) {
                 break label$64
                }
                label$66 : {
                 $15 = wctomb($7 + 4 | 0 | 0, $15 | 0) | 0;
                 $12 = ($15 | 0) < (0 | 0);
                 if ($12) {
                  break label$66
                 }
                 if ($15 >>> 0 > ($19 - $1 | 0) >>> 0) {
                  break label$66
                 }
                 $14 = $14 + 4 | 0;
                 $1 = $15 + $1 | 0;
                 if ($19 >>> 0 > $1 >>> 0) {
                  continue label$65
                 }
                 break label$64;
                }
                break label$65;
               };
               $20 = -1;
               if ($12) {
                break label$1
               }
              }
              pad($0 | 0, 32 | 0, $18 | 0, $1 | 0, $13 | 0);
              label$67 : {
               if ($1) {
                break label$67
               }
               $1 = 0;
               break label$38;
              }
              $14 = 0;
              $15 = HEAP32[($7 + 64 | 0) >> 2] | 0;
              label$68 : while (1) {
               $12 = HEAP32[$15 >> 2] | 0;
               if (!$12) {
                break label$38
               }
               $12 = wctomb($7 + 4 | 0 | 0, $12 | 0) | 0;
               $14 = $12 + $14 | 0;
               if (($14 | 0) > ($1 | 0)) {
                break label$38
               }
               out($0 | 0, $7 + 4 | 0 | 0, $12 | 0);
               $15 = $15 + 4 | 0;
               if ($14 >>> 0 < $1 >>> 0) {
                continue label$68
               }
               break label$68;
              };
             }
             pad($0 | 0, 32 | 0, $18 | 0, $1 | 0, $13 ^ 8192 | 0 | 0);
             $1 = ($18 | 0) > ($1 | 0) ? $18 : $1;
             continue label$2;
            }
            $1 = FUNCTION_TABLE[$5 | 0]($0, +HEAPF64[($7 + 64 | 0) >> 3], $18, $19, $13, $1) | 0;
            continue label$2;
           }
           i64toi32_i32$2 = $7;
           i64toi32_i32$5 = HEAP32[($7 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
           HEAP8[($7 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19 = 1;
           $12 = $8;
           $17 = $9;
           $13 = $21;
           break label$6;
          }
          $14 = $1 + 1 | 0;
          HEAP32[($7 + 76 | 0) >> 2] = $14;
          $13 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
          $1 = $14;
          continue label$10;
         };
        }
        $20 = $11;
        if ($0) {
         break label$1
        }
        if (!$10) {
         break label$5
        }
        $1 = 1;
        label$69 : {
         label$70 : while (1) {
          $13 = HEAP32[($4 + ($1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13) {
           break label$69
          }
          pop_arg($3 + ($1 << 3 | 0) | 0 | 0, $13 | 0, $2 | 0, $6 | 0);
          $20 = 1;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != (10 | 0)) {
           continue label$70
          }
          break label$1;
         };
        }
        $20 = 1;
        if ($1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$71 : while (1) {
         if (HEAP32[($4 + ($1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20 = 1;
         $1 = $1 + 1 | 0;
         if (($1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$71;
        };
       }
       $20 = -1;
       break label$1;
      }
      $17 = $9;
     }
     $15 = $17 - $12 | 0;
     $17 = ($19 | 0) < ($15 | 0) ? $15 : $19;
     $14 = $20 + $17 | 0;
     $1 = ($18 | 0) < ($14 | 0) ? $14 : $18;
     pad($0 | 0, 32 | 0, $1 | 0, $14 | 0, $13 | 0);
     out($0 | 0, $16 | 0, $20 | 0);
     pad($0 | 0, 48 | 0, $1 | 0, $14 | 0, $13 ^ 65536 | 0 | 0);
     pad($0 | 0, 48 | 0, $17 | 0, $15 | 0, 0 | 0);
     out($0 | 0, $12 | 0, $15 | 0);
     pad($0 | 0, 32 | 0, $1 | 0, $14 | 0, $13 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20 = 0;
  }
  __stack_pointer = $7 + 80 | 0;
  return $20 | 0;
 }
 
 function out($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ((HEAPU8[$0 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   __fwritex($1 | 0, $2 | 0, $0 | 0) | 0;
  }
 }
 
 function getint($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = 0;
  label$1 : {
   if (!(isdigit(HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP8[$2 >> 0] | 0;
    HEAP32[$0 >> 2] = $2 + 1 | 0;
    $1 = ($3 + Math_imul($1, 10) | 0) + -48 | 0;
    if (isdigit(HEAP8[($2 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function pop_arg($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23 = 0, $31 = 0, $41 = 0, $49 = 0, $57 = 0, $65 = 0, $73 = 0;
  label$1 : {
   if ($1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1 + -9 | 0 | 0) {
    case 0:
     $1 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $1 + 4 | 0;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
     return;
    case 1:
     $1 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[i64toi32_i32$0 >> 2] = $23;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31 = i64toi32_i32$1;
     i64toi32_i32$1 = $0;
     HEAP32[i64toi32_i32$1 >> 2] = $31;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2 >> 2] = $1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $41 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[i64toi32_i32$0 >> 2] = $41;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49 = i64toi32_i32$1;
     i64toi32_i32$1 = $0;
     HEAP32[i64toi32_i32$1 >> 2] = $49;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[i64toi32_i32$0 >> 2] = $57;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65 = i64toi32_i32$1;
     i64toi32_i32$1 = $0;
     HEAP32[i64toi32_i32$1 >> 2] = $65;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     HEAP32[i64toi32_i32$0 >> 2] = $73;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2 >> 2] = $1 + 8 | 0;
     HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3 | 0]($0, $2);
  }
 }
 
 function fmt_x($0, $0$hi, $1, $2) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = HEAPU8[(($0 & 15 | 0) + 28144 | 0) >> 0] | 0 | $2 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $9;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_o($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = $0 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $8;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_u($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$3 = 0, $2 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4 = 0, $16 = 0, $16$hi = 0, $5 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2 = $0;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16;
    i64toi32_i32$5 = ($0 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1 >> 0] = $0 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0 = $2;
    $0$hi = i64toi32_i32$2;
    if ($3) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3 = $2;
   if (!$3) {
    break label$4
   }
   label$5 : while (1) {
    $1 = $1 + -1 | 0;
    $4 = ($3 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1 >> 0] = $3 - Math_imul($4, 10) | 0 | 48 | 0;
    $5 = $3 >>> 0 > 9 >>> 0;
    $3 = $4;
    if ($5) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 | 0;
 }
 
 function pad($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  label$1 : {
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   if ($4 & 73728 | 0) {
    break label$1
   }
   $2 = $2 - $3 | 0;
   $3 = $2 >>> 0 < 256 >>> 0;
   memset($5 | 0, $1 & 255 | 0 | 0, ($3 ? $2 : 256) | 0) | 0;
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : while (1) {
     out($0 | 0, $5 | 0, 256 | 0);
     $2 = $2 + -256 | 0;
     if ($2 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   out($0 | 0, $5 | 0, $2 | 0);
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function vfprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __vfprintf_internal($0 | 0, $1 | 0, $2 | 0, 32 | 0, 33 | 0) | 0 | 0;
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $12 = 0, $19 = 0, $18 = 0, $25 = 0, $6 = 0, $11 = 0, i64toi32_i32$1 = 0, $15 = 0, i64toi32_i32$0 = 0, $23 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $24 = 0, $17 = 0, $13 = 0, $21 = 0, $26 = 0.0, $8 = 0, $10 = 0, $8$hi = 0, $9 = 0, $14 = 0, $16 = 0, $22 = 0, $7 = 0, $44 = 0, $45 = 0, $46 = 0, $20$hi = 0, $47 = 0, $20 = 0, $158 = 0, $160$hi = 0, $162$hi = 0, $164 = 0, $164$hi = 0, $166$hi = 0, $170 = 0, $170$hi = 0, $818 = 0;
  $6 = __stack_pointer - 560 | 0;
  __stack_pointer = $6;
  $7 = 0;
  HEAP32[($6 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45 = 0
      } else {
       $45 = 1
      }
      $46 = $45;
     } else {
      $46 = 0
     }
     $44 = $46;
    }
    if ($44) {
     break label$2
    }
    $9 = 1;
    $10 = 28160;
    $1 = -$1;
    i64toi32_i32$2 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$1;
    break label$1;
   }
   $9 = 1;
   label$3 : {
    if (!($4 & 2048 | 0)) {
     break label$3
    }
    $10 = 28163;
    break label$1;
   }
   $10 = 28166;
   if ($4 & 1 | 0) {
    break label$1
   }
   $9 = 0;
   $7 = 1;
   $10 = 28161;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $11 = $9 + 3 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 & -65537 | 0 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    $12 = $5 & 32 | 0;
    out($0 | 0, ($1 != $1 ? ($12 ? 28187 : 28191) : $12 ? 28179 : 28183) | 0, 3 | 0);
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
    break label$4;
   }
   $13 = $6 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1 = +frexp(+$1, $6 + 44 | 0 | 0);
       $1 = $1 + $1;
       if ($1 == 0.0) {
        break label$9
       }
       $12 = HEAP32[($6 + 44 | 0) >> 2] | 0;
       HEAP32[($6 + 44 | 0) >> 2] = $12 + -1 | 0;
       $14 = $5 | 32 | 0;
       if (($14 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $14 = $5 | 32 | 0;
      if (($14 | 0) == (97 | 0)) {
       break label$6
      }
      $15 = ($3 | 0) < (0 | 0) ? 6 : $3;
      $16 = HEAP32[($6 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $16 = $12 + -29 | 0;
     HEAP32[($6 + 44 | 0) >> 2] = $16;
     $15 = ($3 | 0) < (0 | 0) ? 6 : $3;
     $1 = $1 * 268435456.0;
    }
    $17 = ($16 | 0) < (0 | 0) ? $6 + 48 | 0 : $6 + 336 | 0;
    $18 = $17;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1 < 4294967296.0 & $1 >= 0.0 | 0)) {
        break label$12
       }
       $12 = ~~$1 >>> 0;
       break label$11;
      }
      $12 = 0;
     }
     HEAP32[$18 >> 2] = $12;
     $18 = $18 + 4 | 0;
     $1 = ($1 - +($12 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($16 | 0) >= (1 | 0)) {
       break label$14
      }
      $3 = $16;
      $12 = $18;
      $19 = $17;
      break label$13;
     }
     $19 = $17;
     $3 = $16;
     label$15 : while (1) {
      $3 = ($3 | 0) < (29 | 0) ? $3 : 29;
      label$16 : {
       $12 = $18 + -4 | 0;
       if ($12 >>> 0 < $19 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $20 = $3;
       $20$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $8 = 0;
       $8$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $158 = $12;
        i64toi32_i32$0 = $12;
        i64toi32_i32$1 = HEAP32[$12 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $160$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$2 = $160$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$3 = $20;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $162$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $8;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $164 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $164$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $162$hi;
        i64toi32_i32$1 = $47;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$3 = $164;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $8 = i64toi32_i32$4;
        $8$hi = i64toi32_i32$5;
        $166$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $8 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($8 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $170 = i64toi32_i32$1;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $166$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $170$hi;
        i64toi32_i32$3 = $170;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$158 >> 2] = i64toi32_i32$2;
        $12 = $12 + -4 | 0;
        if ($12 >>> 0 >= $19 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $8$hi;
       $12 = $8;
       if (!$12) {
        break label$16
       }
       $19 = $19 + -4 | 0;
       HEAP32[$19 >> 2] = $12;
      }
      label$18 : {
       label$19 : while (1) {
        $12 = $18;
        if ($12 >>> 0 <= $19 >>> 0) {
         break label$18
        }
        $18 = $12 + -4 | 0;
        if (!(HEAP32[$18 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) - $3 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $18 = $12;
      if (($3 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3 | 0) > (-1 | 0)) {
      break label$20
     }
     $21 = (($15 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $22 = ($14 | 0) == (102 | 0);
     label$21 : while (1) {
      $11 = ($3 | 0) < (-9 | 0) ? 9 : 0 - $3 | 0;
      label$22 : {
       label$23 : {
        if ($19 >>> 0 < $12 >>> 0) {
         break label$23
        }
        $19 = HEAP32[$19 >> 2] | 0 ? $19 : $19 + 4 | 0;
        break label$22;
       }
       $23 = 1e9 >>> $11 | 0;
       $24 = (-1 << $11 | 0) ^ -1 | 0;
       $3 = 0;
       $18 = $19;
       label$24 : while (1) {
        $25 = HEAP32[$18 >> 2] | 0;
        HEAP32[$18 >> 2] = ($25 >>> $11 | 0) + $3 | 0;
        $3 = Math_imul($25 & $24 | 0, $23);
        $18 = $18 + 4 | 0;
        if ($18 >>> 0 < $12 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $19 = HEAP32[$19 >> 2] | 0 ? $19 : $19 + 4 | 0;
       if (!$3) {
        break label$22
       }
       HEAP32[$12 >> 2] = $3;
       $12 = $12 + 4 | 0;
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) + $11 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $18 = $22 ? $17 : $19;
      $12 = (($12 - $18 | 0) >> 2 | 0 | 0) > ($21 | 0) ? $18 + ($21 << 2 | 0) | 0 : $12;
      if (($3 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $18 = 0;
    label$25 : {
     if ($19 >>> 0 >= $12 >>> 0) {
      break label$25
     }
     $18 = Math_imul(($17 - $19 | 0) >> 2 | 0, 9);
     $3 = 10;
     $25 = HEAP32[$19 >> 2] | 0;
     if ($25 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $18 = $18 + 1 | 0;
      $3 = Math_imul($3, 10);
      if ($25 >>> 0 >= $3 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3 = ($15 - (($14 | 0) == (102 | 0) ? 0 : $18) | 0) - (($15 | 0) != (0 | 0) & ($14 | 0) == (103 | 0) | 0) | 0;
     if (($3 | 0) >= (Math_imul(($12 - $17 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $25 = $3 + 9216 | 0;
     $23 = ($25 | 0) / (9 | 0) | 0;
     $11 = (($23 << 2 | 0) + (($16 | 0) < (0 | 0) ? $6 + 48 | 0 | 4 | 0 : $6 + 340 | 0) | 0) + -4096 | 0;
     $3 = 10;
     label$28 : {
      $25 = $25 - Math_imul($23, 9) | 0;
      if (($25 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3 = Math_imul($3, 10);
       $25 = $25 + 1 | 0;
       if (($25 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $23 = HEAP32[$11 >> 2] | 0;
     $24 = ($23 >>> 0) / ($3 >>> 0) | 0;
     $25 = $23 - Math_imul($24, $3) | 0;
     label$30 : {
      label$31 : {
       $21 = $11 + 4 | 0;
       if (($21 | 0) != ($12 | 0)) {
        break label$31
       }
       if (!$25) {
        break label$30
       }
      }
      $22 = $3 >>> 1 | 0;
      $26 = $25 >>> 0 < $22 >>> 0 ? .5 : ($21 | 0) == ($12 | 0) ? (($25 | 0) == ($22 | 0) ? 1.0 : 1.5) : 1.5;
      $1 = $24 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7) {
        break label$32
       }
       if ((HEAPU8[$10 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26 = -$26;
       $1 = -$1;
      }
      $25 = $23 - $25 | 0;
      HEAP32[$11 >> 2] = $25;
      if ($1 + $26 == $1) {
       break label$30
      }
      $18 = $25 + $3 | 0;
      HEAP32[$11 >> 2] = $18;
      label$33 : {
       if ($18 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$11 >> 2] = 0;
        label$35 : {
         $11 = $11 + -4 | 0;
         if ($11 >>> 0 >= $19 >>> 0) {
          break label$35
         }
         $19 = $19 + -4 | 0;
         HEAP32[$19 >> 2] = 0;
        }
        $18 = (HEAP32[$11 >> 2] | 0) + 1 | 0;
        HEAP32[$11 >> 2] = $18;
        if ($18 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $18 = Math_imul(($17 - $19 | 0) >> 2 | 0, 9);
      $3 = 10;
      $25 = HEAP32[$19 >> 2] | 0;
      if ($25 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $18 = $18 + 1 | 0;
       $3 = Math_imul($3, 10);
       if ($25 >>> 0 >= $3 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3 = $11 + 4 | 0;
     $12 = $12 >>> 0 > $3 >>> 0 ? $3 : $12;
    }
    label$37 : {
     label$38 : while (1) {
      $3 = $12;
      $25 = $12 >>> 0 <= $19 >>> 0;
      if ($25) {
       break label$37
      }
      $12 = $3 + -4 | 0;
      if (!(HEAP32[$12 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($14 | 0) == (103 | 0)) {
       break label$40
      }
      $24 = $4 & 8 | 0;
      break label$39;
     }
     $12 = $15 ? $15 : 1;
     $11 = ($12 | 0) > ($18 | 0) & ($18 | 0) > (-5 | 0) | 0;
     $15 = ($11 ? $18 ^ -1 | 0 : -1) + $12 | 0;
     $5 = ($11 ? -1 : -2) + $5 | 0;
     $24 = $4 & 8 | 0;
     if ($24) {
      break label$39
     }
     $12 = -9;
     label$41 : {
      if ($25) {
       break label$41
      }
      $11 = HEAP32[($3 + -4 | 0) >> 2] | 0;
      if (!$11) {
       break label$41
      }
      $25 = 10;
      $12 = 0;
      if (($11 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $23 = $12;
       $12 = $12 + 1 | 0;
       $25 = Math_imul($25, 10);
       if (!(($11 >>> 0) % ($25 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $12 = $23 ^ -1 | 0;
     }
     $25 = Math_imul(($3 - $17 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $24 = 0;
      $12 = ($25 + $12 | 0) + -9 | 0;
      $12 = ($12 | 0) > (0 | 0) ? $12 : 0;
      $15 = ($15 | 0) < ($12 | 0) ? $15 : $12;
      break label$39;
     }
     $24 = 0;
     $12 = (($18 + $25 | 0) + $12 | 0) + -9 | 0;
     $12 = ($12 | 0) > (0 | 0) ? $12 : 0;
     $15 = ($15 | 0) < ($12 | 0) ? $15 : $12;
    }
    $22 = $15 | $24 | 0;
    $25 = ($22 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $23 = $5 & -33 | 0;
      if (($23 | 0) != (70 | 0)) {
       break label$45
      }
      $12 = ($18 | 0) > (0 | 0) ? $18 : 0;
      break label$44;
     }
     label$46 : {
      $12 = $18 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $12 = fmt_u(($18 + $12 | 0) ^ $12 | 0 | 0, i64toi32_i32$4 | 0, $13 | 0) | 0;
      if (($13 - $12 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $12 = $12 + -1 | 0;
       HEAP8[$12 >> 0] = 48;
       if (($13 - $12 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $21 = $12 + -2 | 0;
     HEAP8[$21 >> 0] = $5;
     HEAP8[($12 + -1 | 0) >> 0] = ($18 | 0) < (0 | 0) ? 45 : 43;
     $12 = $13 - $21 | 0;
    }
    $11 = ((($9 + $15 | 0) + $25 | 0) + $12 | 0) + 1 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    pad($0 | 0, 48 | 0, $2 | 0, $11 | 0, $4 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($23 | 0) != (70 | 0)) {
         break label$51
        }
        $23 = $6 + 16 | 0 | 8 | 0;
        $18 = $6 + 16 | 0 | 9 | 0;
        $25 = $19 >>> 0 > $17 >>> 0 ? $17 : $19;
        $19 = $25;
        label$52 : while (1) {
         i64toi32_i32$5 = $19;
         i64toi32_i32$4 = HEAP32[$19 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $12 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $18 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($19 | 0) == ($25 | 0)) {
            break label$54
           }
           if ($12 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $12 = $12 + -1 | 0;
            HEAP8[$12 >> 0] = 48;
            if ($12 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($12 | 0) != ($18 | 0)) {
           break label$53
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $12 = $23;
         }
         out($0 | 0, $12 | 0, $18 - $12 | 0 | 0);
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 <= $17 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        label$56 : {
         if (!$22) {
          break label$56
         }
         out($0 | 0, 28195 | 0, 1 | 0);
        }
        if ($19 >>> 0 >= $3 >>> 0) {
         break label$50
        }
        if (($15 | 0) < (1 | 0)) {
         break label$50
        }
        label$57 : while (1) {
         label$58 : {
          i64toi32_i32$5 = $19;
          i64toi32_i32$0 = HEAP32[$19 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $12 = fmt_u(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $18 | 0) | 0;
          if ($12 >>> 0 <= ($6 + 16 | 0) >>> 0) {
           break label$58
          }
          label$59 : while (1) {
           $12 = $12 + -1 | 0;
           HEAP8[$12 >> 0] = 48;
           if ($12 >>> 0 > ($6 + 16 | 0) >>> 0) {
            continue label$59
           }
           break label$59;
          };
         }
         out($0 | 0, $12 | 0, (($15 | 0) < (9 | 0) ? $15 : 9) | 0);
         $12 = $15 + -9 | 0;
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 >= $3 >>> 0) {
          break label$49
         }
         $25 = ($15 | 0) > (9 | 0);
         $15 = $12;
         if ($25) {
          continue label$57
         }
         break label$49;
        };
       }
       label$60 : {
        if (($15 | 0) < (0 | 0)) {
         break label$60
        }
        $23 = $3 >>> 0 > $19 >>> 0 ? $3 : $19 + 4 | 0;
        $17 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $18 = $19;
        label$61 : while (1) {
         label$62 : {
          i64toi32_i32$5 = $18;
          i64toi32_i32$4 = HEAP32[$18 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $12 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
          if (($12 | 0) != ($3 | 0)) {
           break label$62
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $12 = $17;
         }
         label$63 : {
          label$64 : {
           if (($18 | 0) == ($19 | 0)) {
            break label$64
           }
           if ($12 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$63
           }
           label$65 : while (1) {
            $12 = $12 + -1 | 0;
            HEAP8[$12 >> 0] = 48;
            if ($12 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$65
            }
            break label$63;
           };
          }
          out($0 | 0, $12 | 0, 1 | 0);
          $12 = $12 + 1 | 0;
          label$66 : {
           if ($24) {
            break label$66
           }
           if (($15 | 0) < (1 | 0)) {
            break label$63
           }
          }
          out($0 | 0, 28195 | 0, 1 | 0);
         }
         $25 = $3 - $12 | 0;
         out($0 | 0, $12 | 0, (($15 | 0) > ($25 | 0) ? $25 : $15) | 0);
         $15 = $15 - $25 | 0;
         $18 = $18 + 4 | 0;
         if ($18 >>> 0 >= $23 >>> 0) {
          break label$60
         }
         if (($15 | 0) > (-1 | 0)) {
          continue label$61
         }
         break label$61;
        };
       }
       pad($0 | 0, 48 | 0, $15 + 18 | 0 | 0, 18 | 0, 0 | 0);
       out($0 | 0, $21 | 0, $13 - $21 | 0 | 0);
       break label$48;
      }
      $12 = $15;
     }
     pad($0 | 0, 48 | 0, $12 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
    break label$4;
   }
   $18 = $5 & 32 | 0;
   $15 = $18 ? $10 + 9 | 0 : $10;
   label$67 : {
    if ($3 >>> 0 > 11 >>> 0) {
     break label$67
    }
    $12 = 12 - $3 | 0;
    if (!$12) {
     break label$67
    }
    $26 = 8.0;
    label$68 : while (1) {
     $26 = $26 * 16.0;
     $12 = $12 + -1 | 0;
     if ($12) {
      continue label$68
     }
     break label$68;
    };
    label$69 : {
     if ((HEAPU8[$15 >> 0] | 0 | 0) != (45 | 0)) {
      break label$69
     }
     $1 = -($26 + (-$1 - $26));
     break label$67;
    }
    $1 = $1 + $26 - $26;
   }
   label$70 : {
    $12 = HEAP32[($6 + 44 | 0) >> 2] | 0;
    $818 = $12;
    $12 = $12 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $12 = fmt_u(($818 + $12 | 0) ^ $12 | 0 | 0, i64toi32_i32$0 | 0, $13 | 0) | 0;
    if (($12 | 0) != ($13 | 0)) {
     break label$70
    }
    HEAP8[($6 + 15 | 0) >> 0] = 48;
    $12 = $6 + 15 | 0;
   }
   $24 = $9 | 2 | 0;
   $19 = HEAP32[($6 + 44 | 0) >> 2] | 0;
   $23 = $12 + -2 | 0;
   HEAP8[$23 >> 0] = $5 + 15 | 0;
   HEAP8[($12 + -1 | 0) >> 0] = ($19 | 0) < (0 | 0) ? 45 : 43;
   $25 = $4 & 8 | 0;
   $19 = $6 + 16 | 0;
   label$71 : while (1) {
    $12 = $19;
    label$72 : {
     label$73 : {
      if (!(Math_abs($1) < 2147483648.0)) {
       break label$73
      }
      $19 = ~~$1;
      break label$72;
     }
     $19 = -2147483648;
    }
    HEAP8[$12 >> 0] = HEAPU8[($19 + 28144 | 0) >> 0] | 0 | $18 | 0;
    $1 = ($1 - +($19 | 0)) * 16.0;
    label$74 : {
     $19 = $12 + 1 | 0;
     if (($19 - ($6 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$74
     }
     label$75 : {
      if ($25) {
       break label$75
      }
      if (($3 | 0) > (0 | 0)) {
       break label$75
      }
      if ($1 == 0.0) {
       break label$74
      }
     }
     HEAP8[($12 + 1 | 0) >> 0] = 46;
     $19 = $12 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue label$71
    }
    break label$71;
   };
   label$76 : {
    label$77 : {
     if (!$3) {
      break label$77
     }
     if ((($19 - ($6 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3 | 0)) {
      break label$77
     }
     $12 = (($3 + $13 | 0) - $23 | 0) + 2 | 0;
     break label$76;
    }
    $12 = (($13 - ($6 + 16 | 0) | 0) - $23 | 0) + $19 | 0;
   }
   $11 = $12 + $24 | 0;
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 | 0);
   out($0 | 0, $15 | 0, $24 | 0);
   pad($0 | 0, 48 | 0, $2 | 0, $11 | 0, $4 ^ 65536 | 0 | 0);
   $19 = $19 - ($6 + 16 | 0) | 0;
   out($0 | 0, $6 + 16 | 0 | 0, $19 | 0);
   $18 = $13 - $23 | 0;
   pad($0 | 0, 48 | 0, $12 - ($19 + $18 | 0) | 0 | 0, 0 | 0, 0 | 0);
   out($0 | 0, $23 | 0, $18 | 0);
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
  }
  __stack_pointer = $6 + 560 | 0;
  return (($11 | 0) < ($2 | 0) ? $2 : $11) | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2 = 0, $12 = 0, $12$hi = 0, $14 = 0, $14$hi = 0;
  $2 = ((HEAP32[$1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1 >> 2] = $2 + 16 | 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0 >> 3] = +__trunctfdf2($12 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$1 | 0);
 }
 
 function __DOUBLE_BITS($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, $2 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return $2 | 0;
 }
 
 function vfiprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __vfprintf_internal($0 | 0, $1 | 0, $2 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(dummy(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function fiprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vfiprintf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function __ofl_add($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __ofl_lock() | 0;
  HEAP32[($0 + 56 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  label$1 : {
   $2 = HEAP32[$1 >> 2] | 0;
   if (!$2) {
    break label$1
   }
   HEAP32[($2 + 52 | 0) >> 2] = $0;
  }
  HEAP32[$1 >> 2] = $0;
  __ofl_unlock();
  return $0 | 0;
 }
 
 function __toread($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAPU8[($0 + 74 | 0) >> 0] | 0;
  HEAP8[($0 + 74 | 0) >> 0] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  $2 = (HEAP32[($0 + 44 | 0) >> 2] | 0) + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  return ($1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function __uflow($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = -1;
  label$1 : {
   if (__toread($0 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0 + 32 | 0) >> 2] | 0 | 0]($0, $1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2 = HEAPU8[($1 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function getc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if (__lockfile($0 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($1 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
    return HEAPU8[$1 >> 0] | 0 | 0;
   }
   return __uflow($0 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($1 >>> 0 >= (HEAP32[($0 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
    $1 = HEAPU8[$1 >> 0] | 0;
    break label$4;
   }
   $1 = __uflow($0 | 0) | 0;
  }
  __unlockfile($0 | 0);
  return $1 | 0;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function isspace($0) {
  $0 = $0 | 0;
  return ($0 | 0) == (32 | 0) | ($0 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function __shlim($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, $4 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2 - $3 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21 = $3 + $1 | 0;
  $22 = $2;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15 = 0
    } else {
     $15 = 1
    }
    $16 = $15;
   } else {
    $16 = 0
   }
   $14 = $16;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17 + 104 | 0) >> 2] = ($1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14 ? $21 : $22) : $2;
 }
 
 function __shgetc($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $1$hi = 0, i64toi32_i32$4 = 0, $4 = 0, $1 = 0, $3 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $26 = 0, $27 = 0, $28 = 0, $11$hi = 0, $30 = 0, $30$hi = 0, $38 = 0, $38$hi = 0, $50 = 0, $52 = 0, $52$hi = 0, $57 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24 = 0
       } else {
        $24 = 1
       }
       $25 = $24;
      } else {
       $25 = 0
      }
      $23 = $25;
     }
     if ($23) {
      break label$2
     }
    }
    $2 = __uflow($0 | 0) | 0;
    if (($2 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $4 = $3;
  label$4 : {
   i64toi32_i32$3 = $0;
   i64toi32_i32$2 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0 + 116 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $4 = $3;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$5;
   $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3 - $5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27 = 0
     } else {
      $27 = 1
     }
     $28 = $27;
    } else {
     $28 = 0
    }
    $26 = $28;
   }
   if ($26) {
    break label$4
   }
   i64toi32_i32$0 = $1$hi;
   $4 = $5 + $1 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $4;
  $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$3) {
    break label$5
   }
   $50 = $0;
   i64toi32_i32$1 = $0;
   i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
   $52 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($3 - $4 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0 = $4 + -1 | 0;
   if (($2 | 0) == (HEAPU8[$0 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0 >> 0] = $2;
  }
  return $2 | 0;
 }
 
 function copysignl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $11 = 0, $18$hi = 0, $20 = 0, $20$hi = 0, $21 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11 = $22 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11 | ($23 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function scalbnl($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $20 = 0, $70 = 0, $71 = 0, $71$hi = 0, $72 = 0, $72$hi = 0, $76$hi = 0, $80 = 0, $83 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  label$1 : {
   label$2 : {
    if (($3 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    __multf3($4 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3 = $3 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    __multf3($4 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3 = (($3 | 0) < (49149 | 0) ? $3 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   __multf3($4 + 64 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3 = $3 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   __multf3($4 + 48 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3 = (($3 | 0) > (-49146 | 0) ? $3 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70 = $4;
  i64toi32_i32$0 = $1$hi;
  $71 = $1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72 = $2;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  __multf3($70 | 0, $71 | 0, i64toi32_i32$1 | 0, $72 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80 = i64toi32_i32$3;
  i64toi32_i32$3 = $0;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $83;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = i64toi32_i32$2 + 80 | 0;
 }
 
 function fabsl($0, $1, $1$hi, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function __floatscan($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $10 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $9 = 0, $11 = 0, $11$hi = 0, $5 = 0, $5$hi = 0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  i64toi32_i32$0 = 0;
  $5 = 0;
  $5$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $6 = $1 + 4 | 0;
    $2 = $2 << 2 | 0;
    $7 = HEAP32[($2 + 28284 | 0) >> 2] | 0;
    $8 = HEAP32[($2 + 28272 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$6 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$4;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     if (isspace($2 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $9 = 1;
    label$6 : {
     label$7 : {
      switch ($2 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $9 = ($2 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$6 >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$6;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    $10 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($10 + 28208 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($10 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$6 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$13;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($10 | 0) == (3 | 0)) {
        break label$15
       }
       if (($10 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3) {
        break label$9
       }
       if ($10 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($10 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1 = HEAP32[($1 + 104 | 0) >> 2] | 0;
       if (!$1) {
        break label$16
       }
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      if (!$3) {
       break label$10
      }
      if ($10 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1) {
         break label$18
        }
        HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
       }
       $10 = $10 + -1 | 0;
       if ($10 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     __extendsftf2($4 | 0, Math_fround(Math_fround(Math_fround($9 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $5 = i64toi32_i32$1;
     $5$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($10) {
        break label$21
       }
       $10 = 0;
       label$22 : while (1) {
        if (($2 | 32 | 0 | 0) != (HEAP8[($10 + 28217 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($10 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$6 >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$23;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($10 | 0) {
       case 0:
        label$27 : {
         if (($2 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $10 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if ($10 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$6 >> 2] = $10 + 1 | 0;
           $10 = HEAPU8[$10 >> 0] | 0;
           break label$28;
          }
          $10 = __shgetc($1 | 0) | 0;
         }
         label$30 : {
          if (($10 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          hexfloat($4 + 16 | 0 | 0, $1 | 0, $8 | 0, $7 | 0, $9 | 0, $3 | 0);
          i64toi32_i32$2 = $4;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
          $11 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $5 = i64toi32_i32$1;
          $5$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
        }
        decfloat($4 + 32 | 0 | 0, $1 | 0, $2 | 0, $8 | 0, $7 | 0, $9 | 0, $3 | 0);
        i64toi32_i32$2 = $4;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $11 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $5 = i64toi32_i32$1;
        $5$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      }
      HEAP32[(__errno_location() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$6 >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$32;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2 | 0) != (40 | 0)) {
        break label$35
       }
       $10 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$6 >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$37;
       }
       $2 = __shgetc($1 | 0) | 0;
      }
      $9 = $2 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($9 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $9 = $2 + -97 | 0;
        if (($2 | 0) == (95 | 0)) {
         break label$40
        }
        if ($9 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $10 = $10 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2 = HEAP32[($1 + 104 | 0) >> 2] | 0;
      if (!$2) {
       break label$41
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3) {
       break label$42
      }
      if (!$10) {
       break label$1
      }
      label$43 : while (1) {
       $10 = $10 + -1 | 0;
       label$44 : {
        if (!$2) {
         break label$44
        }
        HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1 | 0;
       }
       if ($10) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[(__errno_location() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $5;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $4 + 48 | 0;
 }
 
 function hexfloat($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6 = 0, i64toi32_i32$4 = 0, $7 = 0, $13$hi = 0, $17$hi = 0, $13 = 0, $17 = 0, $11$hi = 0, $14$hi = 0, $9$hi = 0, $11 = 0, $14 = 0, $15$hi = 0, $9 = 0, $12 = 0, $15 = 0, $8 = 0, $10 = 0, $20$hi = 0, $20 = 0, $16 = 0, $18 = 0, $19 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $133 = 0, $133$hi = 0, $137 = 0, $137$hi = 0, $142 = 0, $142$hi = 0, $146 = 0, $146$hi = 0, $164 = 0, $164$hi = 0, $168 = 0, $168$hi = 0, $258$hi = 0, $265$hi = 0, $274 = 0, $274$hi = 0, $278 = 0, $278$hi = 0, $282 = 0, $282$hi = 0, $286 = 0, $286$hi = 0, $296 = 0, $296$hi = 0, $313 = 0, $313$hi = 0, $317 = 0, $317$hi = 0, $322 = 0, $322$hi = 0, $324 = 0, $324$hi = 0, $342$hi = 0, $350 = 0, $351 = 0, $354$hi = 0, $378 = 0, $378$hi = 0, $382 = 0, $382$hi = 0, $396 = 0, $416 = 0, $416$hi = 0, $420 = 0, $420$hi = 0, $424 = 0, $424$hi = 0, $428 = 0, $428$hi = 0, $435 = 0, $435$hi = 0, $438 = 0, $438$hi = 0, $444 = 0, $444$hi = 0, $448 = 0, $448$hi = 0, $450 = 0, $450$hi = 0, $454 = 0, $454$hi = 0, $458 = 0, $458$hi = 0, $462 = 0, $462$hi = 0, $492 = 0, $492$hi = 0, $496 = 0, $496$hi = 0, $500 = 0, $500$hi = 0, $504 = 0, $504$hi = 0;
  $6 = __stack_pointer - 432 | 0;
  __stack_pointer = $6;
  label$1 : {
   label$2 : {
    $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
    $7 = HEAPU8[$7 >> 0] | 0;
    break label$1;
   }
   $7 = __shgetc($1 | 0) | 0;
  }
  $8 = 0;
  i64toi32_i32$0 = 0;
  $9 = 0;
  $9$hi = i64toi32_i32$0;
  $10 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7 | 0) != (46 | 0)) {
        break label$3
       }
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $10 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       continue label$6;
      }
      $10 = 1;
      $7 = __shgetc($1 | 0) | 0;
      continue label$6;
     };
    }
    $7 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $9 = 0;
   $9$hi = i64toi32_i32$0;
   if (($7 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
      $7 = HEAPU8[$7 >> 0] | 0;
      break label$10;
     }
     $7 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    if (($7 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8 = 1;
   $10 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $11 = 0;
  $11$hi = i64toi32_i32$5;
  $12 = 0;
  i64toi32_i32$5 = 0;
  $13 = 0;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $14 = 0;
  $14$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $15 = 0;
  $15$hi = i64toi32_i32$5;
  $16 = 0;
  i64toi32_i32$5 = 0;
  $17 = 0;
  $17$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $18 = $7 | 32 | 0;
    label$14 : {
     label$15 : {
      $19 = $7 + -48 | 0;
      if ($19 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($7 | 0) == (46 | 0)) {
        break label$16
       }
       if (($18 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$12
       }
      }
      if (($7 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8) {
       break label$12
      }
      $8 = 1;
      i64toi32_i32$5 = $17$hi;
      $9 = $17;
      $9$hi = i64toi32_i32$5;
      break label$14;
     }
     $7 = ($7 | 0) > (57 | 0) ? $18 + -87 | 0 : $19;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$0 = $17;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $107 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $108 = 0
         } else {
          $108 = 1
         }
         $109 = $108;
        } else {
         $109 = 0
        }
        $107 = $109;
       }
       if ($107) {
        break label$18
       }
       $12 = $7 + ($12 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$3 = $17;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $110 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $111 = 0
         } else {
          $111 = 1
         }
         $112 = $111;
        } else {
         $112 = 0
        }
        $110 = $112;
       }
       if ($110) {
        break label$19
       }
       __floatsitf($6 + 48 | 0 | 0, $7 | 0);
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       __multf3($6 + 32 | 0 | 0, $15 | 0, i64toi32_i32$3 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $15 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $11 = i64toi32_i32$2;
       $11$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $133 = i64toi32_i32$5;
       $133$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $137 = i64toi32_i32$2;
       $137$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$0 = $133$hi;
       i64toi32_i32$3 = $137$hi;
       __multf3($6 + 16 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$2 | 0, $133 | 0, i64toi32_i32$0 | 0, $137 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = $14$hi;
       i64toi32_i32$2 = $6;
       i64toi32_i32$3 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6 + 20 | 0) >> 2] | 0;
       $142 = i64toi32_i32$3;
       $142$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $146 = i64toi32_i32$0;
       $146$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$2 = $142$hi;
       i64toi32_i32$5 = $146$hi;
       __addtf3($6 | 0, $13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$0 | 0, $142 | 0, i64toi32_i32$2 | 0, $146 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $14 = i64toi32_i32$5;
       $14$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $13 = i64toi32_i32$2;
       $13$hi = i64toi32_i32$5;
       break label$17;
      }
      if ($16) {
       break label$17
      }
      if (!$7) {
       break label$17
      }
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      __multf3($6 + 80 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = HEAP32[($6 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6 + 84 | 0) >> 2] | 0;
      $164 = i64toi32_i32$3;
      $164$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168 = i64toi32_i32$0;
      $168$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$2 = $164$hi;
      i64toi32_i32$5 = $168$hi;
      __addtf3($6 + 64 | 0 | 0, $13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$0 | 0, $164 | 0, i64toi32_i32$2 | 0, $168 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $14 = i64toi32_i32$5;
      $14$hi = i64toi32_i32$2;
      $16 = 1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $13 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$4;
     $10 = 1;
    }
    label$20 : {
     $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     if ($7 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$20
     }
     HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
     $7 = HEAPU8[$7 >> 0] | 0;
     continue label$13;
    }
    $7 = __shgetc($1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    label$23 : {
     label$24 : {
      if ($10) {
       break label$24
      }
      label$25 : {
       if (HEAP32[($1 + 104 | 0) >> 2] | 0) {
        break label$25
       }
       if ($5) {
        break label$22
       }
       break label$23;
      }
      $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -1 | 0;
      if (!$5) {
       break label$23
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -2 | 0;
      if (!$8) {
       break label$22
      }
      HEAP32[($1 + 4 | 0) >> 2] = $7 + -3 | 0;
      break label$22;
     }
     label$26 : {
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = $17;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $113 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $114 = 0
        } else {
         $114 = 1
        }
        $115 = $114;
       } else {
        $115 = 0
       }
       $113 = $115;
      }
      if ($113) {
       break label$26
      }
      i64toi32_i32$5 = $17$hi;
      $11 = $17;
      $11$hi = i64toi32_i32$5;
      label$27 : while (1) {
       $12 = $12 << 4 | 0;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $11 = i64toi32_i32$2;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$27
       }
       break label$27;
      };
     }
     label$28 : {
      label$29 : {
       if (($7 & -33 | 0 | 0) != (80 | 0)) {
        break label$29
       }
       i64toi32_i32$5 = scanexp($1 | 0, $5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $11 = i64toi32_i32$5;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$28
       }
       label$30 : {
        if (!$5) {
         break label$30
        }
        i64toi32_i32$0 = 0;
        $11 = 0;
        $11$hi = i64toi32_i32$0;
        if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
         break label$28
        }
        HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$28;
       }
       i64toi32_i32$0 = 0;
       $13 = 0;
       $13$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $17 = 0;
       $17$hi = i64toi32_i32$0;
       break label$21;
      }
      i64toi32_i32$0 = 0;
      $11 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
       break label$28
      }
      HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$31 : {
      if ($12) {
       break label$31
      }
      __extenddftf2($6 + 112 | 0 | 0, +(+($4 | 0) * 0.0));
      i64toi32_i32$3 = $6 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $17 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $13 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$0;
      break label$21;
     }
     label$32 : {
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$4 = $8;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $9 : $17;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $116 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $116 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $258$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $258$hi;
      i64toi32_i32$3 = $116;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$0 = $11;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $17 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $265$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $265$hi;
      i64toi32_i32$0 = 0 - $3 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $117 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $118 = 0
        } else {
         $118 = 1
        }
        $119 = $118;
       } else {
        $119 = 0
       }
       $117 = $119;
      }
      if ($117) {
       break label$32
      }
      HEAP32[(__errno_location() | 0) >> 2] = 68;
      __floatsitf($6 + 160 | 0 | 0, $4 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $274 = i64toi32_i32$2;
      $274$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $278 = i64toi32_i32$1;
      $278$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$1 = $278$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      __multf3($6 + 144 | 0 | 0, $274 | 0, i64toi32_i32$2 | 0, $278 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $282 = i64toi32_i32$5;
      $282$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $286 = i64toi32_i32$0;
      $286$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $282$hi;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      __multf3($6 + 128 | 0 | 0, $282 | 0, i64toi32_i32$5 | 0, $286 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $13 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$2;
      break label$21;
     }
     label$33 : {
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$1 = $3 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $296 = i64toi32_i32$1;
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = $17;
      i64toi32_i32$1 = $296$hi;
      i64toi32_i32$5 = $296;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $120 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $121 = 0
        } else {
         $121 = 1
        }
        $122 = $121;
       } else {
        $122 = 0
       }
       $120 = $122;
      }
      if ($120) {
       break label$33
      }
      label$34 : {
       if (($12 | 0) <= (-1 | 0)) {
        break label$34
       }
       label$35 : while (1) {
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        __addtf3($6 + 416 | 0 | 0, $13 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7 = __getf2($13 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $313 = i64toi32_i32$0;
        $313$hi = i64toi32_i32$2;
        $1 = ($7 | 0) < (0 | 0);
        i64toi32_i32$3 = $1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $313$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $13 : $313;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $317 = i64toi32_i32$1;
        $317$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$3 = ($6 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $322 = i64toi32_i32$5;
        $322$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1;
        i64toi32_i32$1 = $14$hi;
        i64toi32_i32$5 = $322$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $14 : $322;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $324 = i64toi32_i32$2;
        $324$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $13$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $317$hi;
        i64toi32_i32$1 = $324$hi;
        __addtf3($6 + 400 | 0 | 0, $13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$2 | 0, $317 | 0, i64toi32_i32$0 | 0, $324 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$2 = $17;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $17 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $14 = i64toi32_i32$4;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $13 = i64toi32_i32$2;
        $13$hi = i64toi32_i32$4;
        $12 = $12 << 1 | 0 | ($7 | 0) > (-1 | 0) | 0;
        if (($12 | 0) > (-1 | 0)) {
         continue label$35
        }
        break label$35;
       };
      }
      label$36 : {
       label$37 : {
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$2 = $3;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $342$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$1 = $17;
        i64toi32_i32$2 = $342$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $9 = i64toi32_i32$2;
        $9$hi = i64toi32_i32$0;
        $7 = i64toi32_i32$2;
        $350 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $351 = $2;
        i64toi32_i32$0 = 0;
        $354$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $354$hi;
        i64toi32_i32$3 = $2;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $123 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $124 = 0
          } else {
           $124 = 1
          }
          $125 = $124;
         } else {
          $125 = 0
         }
         $123 = $125;
        }
        $7 = $123 ? $350 : $351;
        if (($7 | 0) < (113 | 0)) {
         break label$37
        }
        __floatsitf($6 + 384 | 0 | 0, $4 | 0);
        i64toi32_i32$3 = $6 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $9 = i64toi32_i32$5;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $11 = 0;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $15 = i64toi32_i32$0;
        $15$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20 = 0;
        $20$hi = i64toi32_i32$5;
        break label$36;
       }
       __extenddftf2($6 + 352 | 0 | 0, +(+scalbn(+(1.0), 144 - $7 | 0 | 0)));
       __floatsitf($6 + 336 | 0 | 0, $4 | 0);
       i64toi32_i32$3 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $378 = i64toi32_i32$5;
       $378$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $382 = i64toi32_i32$0;
       $382$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $15 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $9 = i64toi32_i32$0;
       $9$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $378$hi;
       i64toi32_i32$0 = $382$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$4 = $9$hi;
       copysignl($6 + 368 | 0 | 0, $378 | 0, i64toi32_i32$5 | 0, $382 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$3 | 0, $9 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $20 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $11 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$4;
      }
      $396 = $6 + 320 | 0;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7 = !($12 & 1 | 0) & ((__letf2($13 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7 | 0) < (32 | 0) | 0) | 0;
      __floatunsitf($396 | 0, $12 + $7 | 0 | 0);
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$3 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $416 = i64toi32_i32$5;
      $416$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $420 = i64toi32_i32$0;
      $420$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$3 = $416$hi;
      i64toi32_i32$4 = $420$hi;
      __multf3($6 + 304 | 0 | 0, $15 | 0, i64toi32_i32$5 | 0, $9 | 0, i64toi32_i32$0 | 0, $416 | 0, i64toi32_i32$3 | 0, $420 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $424 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $428 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$5 = $20$hi;
      __addtf3($6 + 272 | 0 | 0, $424 | 0, i64toi32_i32$4 | 0, $428 | 0, i64toi32_i32$3 | 0, $11 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $13;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $435 = i64toi32_i32$4;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $14;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $438 = i64toi32_i32$5;
      $438$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $435$hi;
      i64toi32_i32$5 = $438$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $9$hi;
      __multf3($6 + 288 | 0 | 0, $435 | 0, i64toi32_i32$1 | 0, $438 | 0, i64toi32_i32$5 | 0, $15 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $444 = i64toi32_i32$3;
      $444$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $448 = i64toi32_i32$0;
      $448$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $450 = i64toi32_i32$3;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $454 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $444$hi;
      i64toi32_i32$0 = $448$hi;
      i64toi32_i32$5 = $450$hi;
      i64toi32_i32$1 = $454$hi;
      __addtf3($6 + 256 | 0 | 0, $444 | 0, i64toi32_i32$3 | 0, $448 | 0, i64toi32_i32$0 | 0, $450 | 0, i64toi32_i32$5 | 0, $454 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $458 = i64toi32_i32$1;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $462 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $458$hi;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$3 = $20$hi;
      __subtf3($6 + 240 | 0 | 0, $458 | 0, i64toi32_i32$1 | 0, $462 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
      label$38 : {
       i64toi32_i32$5 = $6;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $13 = i64toi32_i32$3;
       $13$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $14 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if (__letf2($13 | 0, i64toi32_i32$3 | 0, $14 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$38
       }
       HEAP32[(__errno_location() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $14$hi;
      scalbnl($6 + 224 | 0 | 0, $13 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$5 | 0, $17 | 0);
      i64toi32_i32$0 = $6;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $17 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $13 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$5;
      break label$21;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 68;
     __floatsitf($6 + 208 | 0 | 0, $4 | 0);
     i64toi32_i32$0 = $6;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $492 = i64toi32_i32$5;
     $492$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $496 = i64toi32_i32$1;
     $496$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$1 = $496$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     __multf3($6 + 192 | 0 | 0, $492 | 0, i64toi32_i32$5 | 0, $496 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $500 = i64toi32_i32$3;
     $500$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $504 = i64toi32_i32$0;
     $504$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $500$hi;
     i64toi32_i32$0 = $504$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     __multf3($6 + 176 | 0 | 0, $500 | 0, i64toi32_i32$3 | 0, $504 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $13 = i64toi32_i32$1;
     $13$hi = i64toi32_i32$5;
     break label$21;
    }
    i64toi32_i32$5 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   __extenddftf2($6 + 96 | 0 | 0, +(+($4 | 0) * 0.0));
   i64toi32_i32$0 = $6 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $17 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $13 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $13$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $13;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $17$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $6 + 432 | 0;
 }
 
 function decfloat($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $11$hi = 0, $11 = 0, $15 = 0, $16$hi = 0, $14 = 0, i64toi32_i32$0 = 0, $16 = 0, $8 = 0, $12 = 0, $17 = 0, $22$hi = 0, $18 = 0, $20$hi = 0, $22 = 0, $20 = 0, $13 = 0, $19 = 0, $23$hi = 0, $24$hi = 0, $23 = 0, $24 = 0, $9 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $21 = 0, $25 = 0.0, $10 = 0, $127 = 0, $233 = 0, $233$hi = 0, $237 = 0, $237$hi = 0, $239 = 0, $239$hi = 0, $243 = 0, $243$hi = 0, $253$hi = 0, $262 = 0, $262$hi = 0, $266 = 0, $266$hi = 0, $270 = 0, $270$hi = 0, $274 = 0, $274$hi = 0, $284 = 0, $284$hi = 0, $293 = 0, $293$hi = 0, $297 = 0, $297$hi = 0, $301 = 0, $301$hi = 0, $305 = 0, $305$hi = 0, $354 = 0, $354$hi = 0, $358 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $364 = 0, $364$hi = 0, $383 = 0, $383$hi = 0, $387 = 0, $387$hi = 0, $389 = 0, $389$hi = 0, $393 = 0, $393$hi = 0, $404 = 0, $404$hi = 0, $408 = 0, $408$hi = 0, $410 = 0, $410$hi = 0, $414 = 0, $414$hi = 0, $442 = 0, $442$hi = 0, $446 = 0, $446$hi = 0, $448 = 0, $448$hi = 0, $452 = 0, $452$hi = 0, $462 = 0, $462$hi = 0, $466 = 0, $466$hi = 0, $468 = 0, $468$hi = 0, $472 = 0, $472$hi = 0, $511 = 0, $589$hi = 0, $591$hi = 0, $599 = 0, $599$hi = 0, $740 = 0, $740$hi = 0, $744 = 0, $744$hi = 0, $746 = 0, $746$hi = 0, $750 = 0, $750$hi = 0, $769 = 0, $769$hi = 0, $773 = 0, $773$hi = 0, $815 = 0, $877 = 0, $877$hi = 0, $881 = 0, $881$hi = 0, $898 = 0, $898$hi = 0, $902 = 0, $902$hi = 0, $918 = 0, $918$hi = 0, $922 = 0, $922$hi = 0, $959 = 0, $959$hi = 0, $963 = 0, $963$hi = 0, $982 = 0, $982$hi = 0, $986 = 0, $986$hi = 0, $1009 = 0, $1009$hi = 0, $1013 = 0, $1013$hi = 0, $1029 = 0, $1029$hi = 0, $1033 = 0, $1033$hi = 0, $1047 = 0, $1047$hi = 0, $1049 = 0, $1049$hi = 0, $1069 = 0, $1069$hi = 0, $1073 = 0, $1073$hi = 0, $1096 = 0, $1096$hi = 0, $1098 = 0, $1098$hi = 0, $1104 = 0, $1104$hi = 0, $1111 = 0, $1111$hi = 0;
  $7 = __stack_pointer - 8976 | 0;
  __stack_pointer = $7;
  $8 = 0;
  $9 = $4 + $3 | 0;
  $10 = 0 - $9 | 0;
  i64toi32_i32$0 = 0;
  $11 = 0;
  $11$hi = i64toi32_i32$0;
  $12 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2 | 0) != (46 | 0)) {
        break label$1
       }
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $12 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       continue label$4;
      }
      $12 = 1;
      $2 = __shgetc($1 | 0) | 0;
      continue label$4;
     };
    }
    $2 = __shgetc($1 | 0) | 0;
   }
   $8 = 1;
   i64toi32_i32$0 = 0;
   $11 = 0;
   $11$hi = i64toi32_i32$0;
   if (($2 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$8;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$5;
    if (($2 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $12 = 1;
   $8 = 1;
  }
  $13 = 0;
  HEAP32[($7 + 784 | 0) >> 2] = 0;
  $14 = $2 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          break label$16
         }
         i64toi32_i32$5 = 0;
         $16 = 0;
         $16$hi = i64toi32_i32$5;
         if ($14 >>> 0 <= 9 >>> 0) {
          break label$16
         }
         $17 = 0;
         $18 = 0;
         break label$15;
        }
        i64toi32_i32$5 = 0;
        $16 = 0;
        $16$hi = i64toi32_i32$5;
        $18 = 0;
        $17 = 0;
        $13 = 0;
        label$17 : while (1) {
         label$18 : {
          label$19 : {
           if (!($15 & 1 | 0)) {
            break label$19
           }
           label$20 : {
            if ($8) {
             break label$20
            }
            i64toi32_i32$5 = $16$hi;
            $11 = $16;
            $11$hi = i64toi32_i32$5;
            $8 = 1;
            break label$18;
           }
           $15 = !$12;
           break label$14;
          }
          i64toi32_i32$5 = $16$hi;
          i64toi32_i32$0 = $16;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $16 = i64toi32_i32$1;
          $16$hi = i64toi32_i32$4;
          label$21 : {
           if (($17 | 0) > (2044 | 0)) {
            break label$21
           }
           $12 = ($2 | 0) == (48 | 0);
           i64toi32_i32$4 = $16$hi;
           $19 = $16;
           $15 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
           label$22 : {
            if (!$18) {
             break label$22
            }
            $14 = ($2 + Math_imul(HEAP32[$15 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $13 = $12 ? $13 : $19;
           HEAP32[$15 >> 2] = $14;
           $12 = 1;
           $2 = $18 + 1 | 0;
           $127 = $2;
           $2 = ($2 | 0) == (9 | 0);
           $18 = $2 ? 0 : $127;
           $17 = $17 + $2 | 0;
           break label$18;
          }
          if (($2 | 0) == (48 | 0)) {
           break label$18
          }
          HEAP32[($7 + 8960 | 0) >> 2] = HEAP32[($7 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $13 = 18396;
         }
         label$23 : {
          label$24 : {
           $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if ($2 >>> 0 >= (HEAP32[($1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$24
           }
           HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
           $2 = HEAPU8[$2 >> 0] | 0;
           break label$23;
          }
          $2 = __shgetc($1 | 0) | 0;
         }
         $14 = $2 + -48 | 0;
         $15 = ($2 | 0) == (46 | 0);
         if ($15) {
          continue label$17
         }
         if ($14 >>> 0 < 10 >>> 0) {
          continue label$17
         }
         break label$17;
        };
       }
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$4 = $16$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$0 = $16$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $11 : $16;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $11 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$5;
       label$25 : {
        if (!$12) {
         break label$25
        }
        if (($2 & -33 | 0 | 0) != (69 | 0)) {
         break label$25
        }
        label$26 : {
         i64toi32_i32$5 = scanexp($1 | 0, $6 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $20 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$26
         }
         if (!$6) {
          break label$12
         }
         i64toi32_i32$2 = 0;
         $20 = 0;
         $20$hi = i64toi32_i32$2;
         if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
          break label$26
         }
         HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$4 = $20;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$5 = $11;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $11 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        break label$11;
       }
       $15 = !$12;
       if (($2 | 0) < (0 | 0)) {
        break label$13
       }
      }
      if (!(HEAP32[($1 + 104 | 0) >> 2] | 0)) {
       break label$13
      }
      HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$15) {
      break label$11
     }
     HEAP32[(__errno_location() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $16 = 0;
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $11 = 0;
    $11$hi = i64toi32_i32$1;
    break label$10;
   }
   label$27 : {
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    if ($1) {
     break label$27
    }
    __extenddftf2($7 | 0, +(+($5 | 0) * 0.0));
    i64toi32_i32$2 = $7 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[$7 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$1;
    break label$10;
   }
   label$28 : {
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$2 = $16;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $168 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $169 = 0
      } else {
       $169 = 1
      }
      $170 = $169;
     } else {
      $170 = 0
     }
     $168 = $170;
    }
    if ($168) {
     break label$28
    }
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$5 = $11;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$4 = $16;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$28
    }
    label$29 : {
     if (($3 | 0) > (30 | 0)) {
      break label$29
     }
     if ($1 >>> $3 | 0) {
      break label$28
     }
    }
    __floatsitf($7 + 48 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 32 | 0 | 0, $1 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
    $233 = i64toi32_i32$5;
    $233$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $237 = i64toi32_i32$2;
    $237$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
    $239 = i64toi32_i32$5;
    $239$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $243 = i64toi32_i32$2;
    $243$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $233$hi;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$4 = $239$hi;
    i64toi32_i32$1 = $243$hi;
    __multf3($7 + 16 | 0 | 0, $233 | 0, i64toi32_i32$5 | 0, $237 | 0, i64toi32_i32$2 | 0, $239 | 0, i64toi32_i32$4 | 0, $243 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$1;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$1 = 0;
    $253$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11;
    i64toi32_i32$4 = $253$hi;
    i64toi32_i32$5 = ($4 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $171 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $172 = 0
      } else {
       $172 = 1
      }
      $173 = $172;
     } else {
      $173 = 0
     }
     $171 = $173;
    }
    if ($171) {
     break label$30
    }
    HEAP32[(__errno_location() | 0) >> 2] = 68;
    __floatsitf($7 + 96 | 0 | 0, $5 | 0);
    i64toi32_i32$5 = $7;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    $262 = i64toi32_i32$2;
    $262$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $266 = i64toi32_i32$1;
    $266$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $262$hi;
    i64toi32_i32$1 = $266$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    __multf3($7 + 80 | 0 | 0, $262 | 0, i64toi32_i32$2 | 0, $266 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $270 = i64toi32_i32$4;
    $270$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $274 = i64toi32_i32$5;
    $274$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $270$hi;
    i64toi32_i32$5 = $274$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($7 + 64 | 0 | 0, $270 | 0, i64toi32_i32$4 | 0, $274 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $16 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$1 = $4 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $284 = i64toi32_i32$1;
    $284$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$5 = $11;
    i64toi32_i32$1 = $284$hi;
    i64toi32_i32$4 = $284;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $174 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $175 = 0
      } else {
       $175 = 1
      }
      $176 = $175;
     } else {
      $176 = 0
     }
     $174 = $176;
    }
    if ($174) {
     break label$31
    }
    HEAP32[(__errno_location() | 0) >> 2] = 68;
    __floatsitf($7 + 144 | 0 | 0, $5 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
    $293 = i64toi32_i32$5;
    $293$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $297 = i64toi32_i32$2;
    $297$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $293$hi;
    i64toi32_i32$2 = $297$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    __multf3($7 + 128 | 0 | 0, $293 | 0, i64toi32_i32$5 | 0, $297 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 132 | 0) >> 2] | 0;
    $301 = i64toi32_i32$1;
    $301$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $305 = i64toi32_i32$4;
    $305$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $301$hi;
    i64toi32_i32$4 = $305$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    __multf3($7 + 112 | 0 | 0, $301 | 0, i64toi32_i32$1 | 0, $305 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    $16 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$5;
    break label$10;
   }
   label$32 : {
    if (!$18) {
     break label$32
    }
    label$33 : {
     if (($18 | 0) > (8 | 0)) {
      break label$33
     }
     $2 = ($7 + 784 | 0) + ($17 << 2 | 0) | 0;
     $1 = HEAP32[$2 >> 2] | 0;
     label$34 : while (1) {
      $1 = Math_imul($1, 10);
      $18 = $18 + 1 | 0;
      if (($18 | 0) != (9 | 0)) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2 >> 2] = $1;
    }
    $17 = $17 + 1 | 0;
   }
   i64toi32_i32$5 = $11$hi;
   $8 = $11;
   label$35 : {
    if (($13 | 0) >= (9 | 0)) {
     break label$35
    }
    if (($13 | 0) > ($8 | 0)) {
     break label$35
    }
    if (($8 | 0) > (17 | 0)) {
     break label$35
    }
    label$36 : {
     if (($8 | 0) != (9 | 0)) {
      break label$36
     }
     __floatsitf($7 + 192 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 176 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 196 | 0) >> 2] | 0;
     $354 = i64toi32_i32$5;
     $354$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $358 = i64toi32_i32$2;
     $358$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
     $360 = i64toi32_i32$5;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $364 = i64toi32_i32$2;
     $364$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $354$hi;
     i64toi32_i32$2 = $358$hi;
     i64toi32_i32$4 = $360$hi;
     i64toi32_i32$1 = $364$hi;
     __multf3($7 + 160 | 0 | 0, $354 | 0, i64toi32_i32$5 | 0, $358 | 0, i64toi32_i32$2 | 0, $360 | 0, i64toi32_i32$4 | 0, $364 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 164 | 0) >> 2] | 0;
     $16 = i64toi32_i32$4;
     $16$hi = i64toi32_i32$1;
     break label$10;
    }
    label$37 : {
     if (($8 | 0) > (8 | 0)) {
      break label$37
     }
     __floatsitf($7 + 272 | 0 | 0, $5 | 0);
     __floatunsitf($7 + 256 | 0 | 0, HEAP32[($7 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 276 | 0) >> 2] | 0;
     $383 = i64toi32_i32$1;
     $383$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $387 = i64toi32_i32$4;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 260 | 0) >> 2] | 0;
     $389 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $393 = i64toi32_i32$4;
     $393$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $383$hi;
     i64toi32_i32$4 = $387$hi;
     i64toi32_i32$2 = $389$hi;
     i64toi32_i32$5 = $393$hi;
     __multf3($7 + 240 | 0 | 0, $383 | 0, i64toi32_i32$1 | 0, $387 | 0, i64toi32_i32$4 | 0, $389 | 0, i64toi32_i32$2 | 0, $393 | 0, i64toi32_i32$5 | 0);
     __floatsitf($7 + 224 | 0 | 0, HEAP32[(((8 - $8 | 0) << 2 | 0) + 28240 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $404 = i64toi32_i32$5;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $408 = i64toi32_i32$2;
     $408$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
     $410 = i64toi32_i32$5;
     $410$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $414 = i64toi32_i32$2;
     $414$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $404$hi;
     i64toi32_i32$2 = $408$hi;
     i64toi32_i32$4 = $410$hi;
     i64toi32_i32$1 = $414$hi;
     __divtf3($7 + 208 | 0 | 0, $404 | 0, i64toi32_i32$5 | 0, $408 | 0, i64toi32_i32$2 | 0, $410 | 0, i64toi32_i32$4 | 0, $414 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7;
     i64toi32_i32$4 = HEAP32[($7 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7 + 212 | 0) >> 2] | 0;
     $16 = i64toi32_i32$4;
     $16$hi = i64toi32_i32$1;
     break label$10;
    }
    $1 = HEAP32[($7 + 784 | 0) >> 2] | 0;
    label$38 : {
     $2 = ($3 + Math_imul($8, -3) | 0) + 27 | 0;
     if (($2 | 0) > (30 | 0)) {
      break label$38
     }
     if ($1 >>> $2 | 0) {
      break label$35
     }
    }
    __floatsitf($7 + 352 | 0 | 0, $5 | 0);
    __floatunsitf($7 + 336 | 0 | 0, $1 | 0);
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 356 | 0) >> 2] | 0;
    $442 = i64toi32_i32$1;
    $442$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $446 = i64toi32_i32$4;
    $446$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 340 | 0) >> 2] | 0;
    $448 = i64toi32_i32$1;
    $448$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $452 = i64toi32_i32$4;
    $452$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $442$hi;
    i64toi32_i32$4 = $446$hi;
    i64toi32_i32$2 = $448$hi;
    i64toi32_i32$5 = $452$hi;
    __multf3($7 + 320 | 0 | 0, $442 | 0, i64toi32_i32$1 | 0, $446 | 0, i64toi32_i32$4 | 0, $448 | 0, i64toi32_i32$2 | 0, $452 | 0, i64toi32_i32$5 | 0);
    __floatsitf($7 + 304 | 0 | 0, HEAP32[(($8 << 2 | 0) + 28200 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 324 | 0) >> 2] | 0;
    $462 = i64toi32_i32$5;
    $462$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $466 = i64toi32_i32$2;
    $466$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $468 = i64toi32_i32$5;
    $468$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $472 = i64toi32_i32$2;
    $472$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $462$hi;
    i64toi32_i32$2 = $466$hi;
    i64toi32_i32$4 = $468$hi;
    i64toi32_i32$1 = $472$hi;
    __multf3($7 + 288 | 0 | 0, $462 | 0, i64toi32_i32$5 | 0, $466 | 0, i64toi32_i32$2 | 0, $468 | 0, i64toi32_i32$4 | 0, $472 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 292 | 0) >> 2] | 0;
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$1;
    break label$10;
   }
   label$39 : while (1) {
    $2 = $17;
    $17 = $2 + -1 | 0;
    if (!(HEAP32[(($7 + 784 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$39
    }
    break label$39;
   };
   $18 = 0;
   label$40 : {
    label$41 : {
     $1 = ($8 | 0) % (9 | 0) | 0;
     if ($1) {
      break label$41
     }
     $15 = 0;
     break label$40;
    }
    $6 = ($8 | 0) > (-1 | 0) ? $1 : $1 + 9 | 0;
    label$42 : {
     label$43 : {
      if ($2) {
       break label$43
      }
      $15 = 0;
      $2 = 0;
      break label$42;
     }
     $12 = HEAP32[(((8 - $6 | 0) << 2 | 0) + 28240 | 0) >> 2] | 0;
     $19 = (1e9 | 0) / ($12 | 0) | 0;
     $14 = 0;
     $1 = 0;
     $15 = 0;
     label$44 : while (1) {
      $17 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
      $511 = $17;
      $17 = HEAP32[$17 >> 2] | 0;
      $13 = ($17 >>> 0) / ($12 >>> 0) | 0;
      $14 = $13 + $14 | 0;
      HEAP32[$511 >> 2] = $14;
      $14 = ($1 | 0) == ($15 | 0) & !$14 | 0;
      $15 = $14 ? ($15 + 1 | 0) & 2047 | 0 : $15;
      $8 = $14 ? $8 + -9 | 0 : $8;
      $14 = Math_imul($19, $17 - Math_imul($13, $12) | 0);
      $1 = $1 + 1 | 0;
      if (($1 | 0) != ($2 | 0)) {
       continue label$44
      }
      break label$44;
     };
     if (!$14) {
      break label$42
     }
     HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $14;
     $2 = $2 + 1 | 0;
    }
    $8 = ($8 - $6 | 0) + 9 | 0;
   }
   label$45 : while (1) {
    $13 = ($7 + 784 | 0) + ($15 << 2 | 0) | 0;
    label$46 : {
     label$47 : while (1) {
      label$48 : {
       if (($8 | 0) < (36 | 0)) {
        break label$48
       }
       if (($8 | 0) != (36 | 0)) {
        break label$46
       }
       if ((HEAP32[$13 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$46
       }
      }
      $17 = $2 + 2047 | 0;
      $14 = 0;
      $12 = $2;
      label$49 : while (1) {
       $2 = $12;
       label$50 : {
        label$51 : {
         $1 = $17 & 2047 | 0;
         $12 = ($7 + 784 | 0) + ($1 << 2 | 0) | 0;
         i64toi32_i32$2 = $12;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $177 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $177 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $589$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $591$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $589$hi;
         i64toi32_i32$4 = $177;
         i64toi32_i32$2 = $591$hi;
         i64toi32_i32$5 = $14;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $11 = i64toi32_i32$3;
         $11$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$51
         }
         $14 = 0;
         break label$50;
        }
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($11 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $16 = i64toi32_i32$0;
        $16$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($16 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $599 = i64toi32_i32$0;
        $599$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$5 = $11;
        i64toi32_i32$0 = $599$hi;
        i64toi32_i32$4 = $599;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $11 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        $14 = $16;
       }
       i64toi32_i32$3 = $11$hi;
       $17 = $11;
       HEAP32[$12 >> 2] = $11;
       $12 = ($1 | 0) != (($2 + -1 | 0) & 2047 | 0 | 0) ? $2 : ($1 | 0) == ($15 | 0) ? $2 : $11 ? $2 : $1;
       $17 = $1 + -1 | 0;
       if (($1 | 0) != ($15 | 0)) {
        continue label$49
       }
       break label$49;
      };
      $18 = $18 + -29 | 0;
      if (!$14) {
       continue label$47
      }
      break label$47;
     };
     label$52 : {
      $15 = ($15 + -1 | 0) & 2047 | 0;
      if (($15 | 0) != ($12 | 0)) {
       break label$52
      }
      $1 = ($7 + 784 | 0) + ((($12 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $2 = ($12 + -1 | 0) & 2047 | 0;
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | (HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8 = $8 + 9 | 0;
     HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] = $14;
     continue label$45;
    }
    break label$45;
   };
   label$53 : {
    label$54 : while (1) {
     $6 = ($2 + 1 | 0) & 2047 | 0;
     $21 = ($7 + 784 | 0) + ((($2 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$55 : while (1) {
      $17 = ($8 | 0) > (45 | 0) ? 9 : 1;
      label$56 : {
       label$57 : while (1) {
        $12 = $15;
        $1 = 0;
        label$58 : {
         label$59 : {
          label$60 : while (1) {
           $15 = ($1 + $12 | 0) & 2047 | 0;
           if (($15 | 0) == ($2 | 0)) {
            break label$59
           }
           $15 = HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] | 0;
           $14 = HEAP32[(($1 << 2 | 0) + 28224 | 0) >> 2] | 0;
           if ($15 >>> 0 < $14 >>> 0) {
            break label$59
           }
           if ($15 >>> 0 > $14 >>> 0) {
            break label$58
           }
           $1 = $1 + 1 | 0;
           if (($1 | 0) != (4 | 0)) {
            continue label$60
           }
           break label$60;
          };
         }
         if (($8 | 0) != (36 | 0)) {
          break label$58
         }
         i64toi32_i32$3 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$3;
         $1 = 0;
         i64toi32_i32$3 = 0;
         $16 = 0;
         $16$hi = i64toi32_i32$3;
         label$61 : while (1) {
          label$62 : {
           $15 = ($1 + $12 | 0) & 2047 | 0;
           if (($15 | 0) != ($2 | 0)) {
            break label$62
           }
           $2 = ($2 + 1 | 0) & 2047 | 0;
           HEAP32[((($2 << 2 | 0) + ($7 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$3 = $16$hi;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$5 = $16$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          __multf3($7 + 768 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          __floatunsitf($7 + 752 | 0 | 0, HEAP32[(($7 + 784 | 0) + ($15 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7;
          i64toi32_i32$4 = HEAP32[($7 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7 + 772 | 0) >> 2] | 0;
          $740 = i64toi32_i32$4;
          $740$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $744 = i64toi32_i32$1;
          $744$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7;
          i64toi32_i32$4 = HEAP32[($7 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7 + 756 | 0) >> 2] | 0;
          $746 = i64toi32_i32$4;
          $746$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $750 = i64toi32_i32$1;
          $750$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $740$hi;
          i64toi32_i32$1 = $744$hi;
          i64toi32_i32$5 = $746$hi;
          i64toi32_i32$3 = $750$hi;
          __addtf3($7 + 736 | 0 | 0, $740 | 0, i64toi32_i32$4 | 0, $744 | 0, i64toi32_i32$1 | 0, $746 | 0, i64toi32_i32$5 | 0, $750 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $16 = i64toi32_i32$3;
          $16$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7;
          i64toi32_i32$5 = HEAP32[($7 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7 + 740 | 0) >> 2] | 0;
          $11 = i64toi32_i32$5;
          $11$hi = i64toi32_i32$3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != (4 | 0)) {
           continue label$61
          }
          break label$61;
         };
         __floatsitf($7 + 720 | 0 | 0, $5 | 0);
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$1 = $7;
         i64toi32_i32$3 = HEAP32[($7 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7 + 724 | 0) >> 2] | 0;
         $769 = i64toi32_i32$3;
         $769$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $773 = i64toi32_i32$5;
         $773$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$5 = $16$hi;
         i64toi32_i32$1 = $769$hi;
         i64toi32_i32$4 = $773$hi;
         __multf3($7 + 704 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$5 | 0, $769 | 0, i64toi32_i32$1 | 0, $773 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $16 = i64toi32_i32$4;
         $16$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $11 = 0;
         $11$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7;
         i64toi32_i32$1 = HEAP32[($7 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7 + 708 | 0) >> 2] | 0;
         $20 = i64toi32_i32$1;
         $20$hi = i64toi32_i32$4;
         $14 = $18 + 113 | 0;
         $1 = $14 - $4 | 0;
         $17 = ($1 | 0) < ($3 | 0);
         $15 = $17 ? (($1 | 0) > (0 | 0) ? $1 : 0) : $3;
         if (($15 | 0) <= (112 | 0)) {
          break label$56
         }
         i64toi32_i32$4 = 0;
         $22 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24 = 0;
         $24$hi = i64toi32_i32$4;
         break label$53;
        }
        $18 = $17 + $18 | 0;
        $15 = $2;
        if (($12 | 0) == ($2 | 0)) {
         continue label$57
        }
        break label$57;
       };
       $13 = 1e9 >>> $17 | 0;
       $19 = (-1 << $17 | 0) ^ -1 | 0;
       $1 = 0;
       $15 = $12;
       label$63 : while (1) {
        $14 = ($7 + 784 | 0) + ($12 << 2 | 0) | 0;
        $815 = $14;
        $14 = HEAP32[$14 >> 2] | 0;
        $1 = ($14 >>> $17 | 0) + $1 | 0;
        HEAP32[$815 >> 2] = $1;
        $1 = ($12 | 0) == ($15 | 0) & !$1 | 0;
        $15 = $1 ? ($15 + 1 | 0) & 2047 | 0 : $15;
        $8 = $1 ? $8 + -9 | 0 : $8;
        $1 = Math_imul($14 & $19 | 0, $13);
        $12 = ($12 + 1 | 0) & 2047 | 0;
        if (($12 | 0) != ($2 | 0)) {
         continue label$63
        }
        break label$63;
       };
       if (!$1) {
        continue label$55
       }
       label$64 : {
        if (($6 | 0) == ($15 | 0)) {
         break label$64
        }
        HEAP32[(($7 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
        $2 = $6;
        continue label$54;
       }
       HEAP32[$21 >> 2] = HEAP32[$21 >> 2] | 0 | 1 | 0;
       $15 = $6;
       continue label$55;
      }
      break label$55;
     };
     break label$54;
    };
    __extenddftf2($7 + 656 | 0 | 0, +(+scalbn(+(1.0), 225 - $15 | 0 | 0)));
    i64toi32_i32$5 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 660 | 0) >> 2] | 0;
    $877 = i64toi32_i32$4;
    $877$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $881 = i64toi32_i32$1;
    $881$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$4 = $877$hi;
    i64toi32_i32$1 = $881$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$3 = $16$hi;
    copysignl($7 + 688 | 0 | 0, $877 | 0, i64toi32_i32$4 | 0, $881 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 696 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 700 | 0) >> 2] | 0;
    $24 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 692 | 0) >> 2] | 0;
    $23 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    __extenddftf2($7 + 640 | 0 | 0, +(+scalbn(+(1.0), 113 - $15 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 644 | 0) >> 2] | 0;
    $898 = i64toi32_i32$3;
    $898$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $902 = i64toi32_i32$5;
    $902$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$1 = $898$hi;
    i64toi32_i32$4 = $902$hi;
    fmodl($7 + 672 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$5 | 0, $898 | 0, i64toi32_i32$1 | 0, $902 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 676 | 0) >> 2] | 0;
    $11 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 680 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 684 | 0) >> 2] | 0;
    $22 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$3 = $22$hi;
    __subtf3($7 + 624 | 0 | 0, $20 | 0, i64toi32_i32$4 | 0, $16 | 0, i64toi32_i32$1 | 0, $11 | 0, i64toi32_i32$5 | 0, $22 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 628 | 0) >> 2] | 0;
    $918 = i64toi32_i32$3;
    $918$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $922 = i64toi32_i32$5;
    $922$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $918$hi;
    i64toi32_i32$4 = $922$hi;
    __addtf3($7 + 608 | 0 | 0, $23 | 0, i64toi32_i32$3 | 0, $24 | 0, i64toi32_i32$5 | 0, $918 | 0, i64toi32_i32$1 | 0, $922 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 612 | 0) >> 2] | 0;
    $20 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$4;
   }
   label$65 : {
    $8 = ($12 + 4 | 0) & 2047 | 0;
    if (($8 | 0) == ($2 | 0)) {
     break label$65
    }
    label$66 : {
     label$67 : {
      $8 = HEAP32[(($7 + 784 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0;
      if ($8 >>> 0 > 499999999 >>> 0) {
       break label$67
      }
      label$68 : {
       if ($8) {
        break label$68
       }
       if ((($12 + 5 | 0) & 2047 | 0 | 0) == ($2 | 0)) {
        break label$66
       }
      }
      __extenddftf2($7 + 496 | 0 | 0, +(+($5 | 0) * .25));
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = HEAP32[($7 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7 + 500 | 0) >> 2] | 0;
      $959 = i64toi32_i32$4;
      $959$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $963 = i64toi32_i32$1;
      $963$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $959$hi;
      i64toi32_i32$3 = $963$hi;
      __addtf3($7 + 480 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, $959 | 0, i64toi32_i32$5 | 0, $963 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7 + 484 | 0) >> 2] | 0;
      $11 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$3;
      break label$66;
     }
     label$69 : {
      if (($8 | 0) == (5e8 | 0)) {
       break label$69
      }
      __extenddftf2($7 + 592 | 0 | 0, +(+($5 | 0) * .75));
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$3 = HEAP32[($7 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7 + 596 | 0) >> 2] | 0;
      $982 = i64toi32_i32$3;
      $982$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $986 = i64toi32_i32$5;
      $986$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $982$hi;
      i64toi32_i32$4 = $986$hi;
      __addtf3($7 + 576 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, $982 | 0, i64toi32_i32$1 | 0, $986 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7;
      i64toi32_i32$1 = HEAP32[($7 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7 + 580 | 0) >> 2] | 0;
      $11 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$4;
      break label$66;
     }
     $25 = +($5 | 0);
     label$70 : {
      if ((($12 + 5 | 0) & 2047 | 0 | 0) != ($2 | 0)) {
       break label$70
      }
      __extenddftf2($7 + 528 | 0 | 0, +($25 * .5));
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$4 = HEAP32[($7 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7 + 532 | 0) >> 2] | 0;
      $1009 = i64toi32_i32$4;
      $1009$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1013 = i64toi32_i32$1;
      $1013$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1009$hi;
      i64toi32_i32$3 = $1013$hi;
      __addtf3($7 + 512 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, $1009 | 0, i64toi32_i32$5 | 0, $1013 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7;
      i64toi32_i32$5 = HEAP32[($7 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7 + 516 | 0) >> 2] | 0;
      $11 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$3;
      break label$66;
     }
     __extenddftf2($7 + 560 | 0 | 0, +($25 * .75));
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$3 = HEAP32[($7 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7 + 564 | 0) >> 2] | 0;
     $1029 = i64toi32_i32$3;
     $1029$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1033 = i64toi32_i32$5;
     $1033$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1029$hi;
     i64toi32_i32$4 = $1033$hi;
     __addtf3($7 + 544 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$5 | 0, $1029 | 0, i64toi32_i32$1 | 0, $1033 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7;
     i64toi32_i32$1 = HEAP32[($7 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7 + 548 | 0) >> 2] | 0;
     $11 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$4;
    }
    if (($15 | 0) > (111 | 0)) {
     break label$65
    }
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    fmodl($7 + 464 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7;
    i64toi32_i32$3 = HEAP32[($7 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7 + 468 | 0) >> 2] | 0;
    $1047 = i64toi32_i32$3;
    $1047$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 476 | 0) >> 2] | 0;
    $1049 = i64toi32_i32$5;
    $1049$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1047$hi;
    i64toi32_i32$5 = $1049$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if (__letf2($1047 | 0, i64toi32_i32$3 | 0, $1049 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$65
    }
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    __addtf3($7 + 448 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7 + 456 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7;
    i64toi32_i32$5 = HEAP32[($7 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7 + 452 | 0) >> 2] | 0;
    $11 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$4 = $22$hi;
   __addtf3($7 + 432 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$5 | 0, $11 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7;
   i64toi32_i32$4 = HEAP32[($7 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7 + 436 | 0) >> 2] | 0;
   $1069 = i64toi32_i32$4;
   $1069$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1073 = i64toi32_i32$1;
   $1073$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1069$hi;
   i64toi32_i32$1 = $1073$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   __subtf3($7 + 416 | 0 | 0, $1069 | 0, i64toi32_i32$4 | 0, $1073 | 0, i64toi32_i32$1 | 0, $23 | 0, i64toi32_i32$5 | 0, $24 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $16 = i64toi32_i32$3;
   $16$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7;
   i64toi32_i32$5 = HEAP32[($7 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7 + 420 | 0) >> 2] | 0;
   $20 = i64toi32_i32$5;
   $20$hi = i64toi32_i32$3;
   label$71 : {
    if (($14 & 2147483647 | 0 | 0) <= (-2 - $9 | 0 | 0)) {
     break label$71
    }
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $16$hi;
    fabsl($7 + 400 | 0 | 0, $20 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    __multf3($7 + 384 | 0 | 0, $20 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7;
    i64toi32_i32$4 = HEAP32[($7 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7 + 404 | 0) >> 2] | 0;
    $1096 = i64toi32_i32$4;
    $1096$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 408 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 412 | 0) >> 2] | 0;
    $1098 = i64toi32_i32$1;
    $1098$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1096$hi;
    i64toi32_i32$1 = $1098$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2 = __getf2($1096 | 0, i64toi32_i32$4 | 0, $1098 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$1 = ($7 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1104 = i64toi32_i32$5;
    $1104$hi = i64toi32_i32$3;
    $14 = ($2 | 0) < (0 | 0);
    i64toi32_i32$0 = $14;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$5 = $1104$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $16 : $1104;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $16 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$0 = $7;
    i64toi32_i32$1 = HEAP32[($7 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7 + 388 | 0) >> 2] | 0;
    $1111 = i64toi32_i32$1;
    $1111$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $14;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$1 = $1111$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $20 : $1111;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $20 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    $18 = $18 + (($2 | 0) > (-1 | 0)) | 0;
    label$72 : {
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 0;
     if ((__letf2($11 | 0, $11$hi | 0, $22 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) & ($17 & ($14 | ($15 | 0) != ($1 | 0) | 0) | 0) | 0) {
      break label$72
     }
     if (($18 + 110 | 0 | 0) <= ($10 | 0)) {
      break label$71
     }
    }
    HEAP32[(__errno_location() | 0) >> 2] = 68;
   }
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$5 = $16$hi;
   scalbnl($7 + 368 | 0 | 0, $20 | 0, i64toi32_i32$4 | 0, $16 | 0, i64toi32_i32$5 | 0, $18 | 0);
   i64toi32_i32$3 = $7;
   i64toi32_i32$5 = HEAP32[($7 + 376 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($7 + 380 | 0) >> 2] | 0;
   $11 = i64toi32_i32$5;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $7;
   i64toi32_i32$4 = HEAP32[($7 + 368 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7 + 372 | 0) >> 2] | 0;
   $16 = i64toi32_i32$4;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $16;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $11$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $11;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $7 + 8976 | 0;
 }
 
 function scanexp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5 = 0, $6 = 0, i64toi32_i32$2 = 0, $4 = 0, $18 = 0, $19 = 0, $20 = 0, $85$hi = 0, $87 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
    $2 = HEAPU8[$2 >> 0] | 0;
    break label$1;
   }
   $2 = __shgetc($0 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2 + -43 | 0 | 0) {
    default:
     $3 = $2 + -48 | 0;
     $4 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if ($3 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0 + 4 | 0) >> 2] = $3 + 1 | 0;
     $5 = HEAPU8[$3 >> 0] | 0;
     break label$6;
    }
    $5 = __shgetc($0 | 0) | 0;
   }
   $4 = ($2 | 0) == (45 | 0);
   $3 = $5 + -48 | 0;
   label$8 : {
    if (!$1) {
     break label$8
    }
    if ($3 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2 = $5;
  }
  label$9 : {
   label$10 : {
    if ($3 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3 = 0;
    label$11 : while (1) {
     $3 = $2 + Math_imul($3, 10) | 0;
     label$12 : {
      label$13 : {
       $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$12;
      }
      $2 = __shgetc($0 | 0) | 0;
     }
     $3 = $3 + -48 | 0;
     label$14 : {
      $5 = $2 + -48 | 0;
      if ($5 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87;
      i64toi32_i32$4 = $2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$17;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5 = $2 + -48 | 0;
      if ($5 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19 = 0
        } else {
         $19 = 1
        }
        $20 = $19;
       } else {
        $20 = 0
       }
       $18 = $20;
      }
      if ($18) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if ($2 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0 + 4 | 0) >> 2] = $2 + 1 | 0;
        $2 = HEAPU8[$2 >> 0] | 0;
        break label$21;
       }
       $2 = __shgetc($0 | 0) | 0;
      }
      if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function __intscan($0, $1, $2, $3, $3$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $7$hi = 0, i64toi32_i32$1 = 0, $7 = 0, $8$hi = 0, $9$hi = 0, $8 = 0, $10 = 0, $9 = 0, $6 = 0, $4 = 0, $11 = 0, $11$hi = 0, $12 = 0, $32 = 0, $33 = 0, $185 = 0, $185$hi = 0, $242 = 0, $242$hi = 0, $324$hi = 0, $327 = 0, $327$hi = 0, $406$hi = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
            $5 = HEAPU8[$5 >> 0] | 0;
            break label$9;
           }
           $5 = __shgetc($0 | 0) | 0;
          }
          if (isspace($5 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6 = 0;
         label$11 : {
          label$12 : {
           switch ($5 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6 = ($5 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
           $5 = HEAPU8[$5 >> 0] | 0;
           break label$11;
          }
          $5 = __shgetc($0 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1 & -17 | 0) {
            break label$15
           }
           if (($5 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
             $5 = HEAPU8[$5 >> 0] | 0;
             break label$16;
            }
            $5 = __shgetc($0 | 0) | 0;
           }
           label$18 : {
            if (($5 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
              $5 = HEAPU8[$5 >> 0] | 0;
              break label$19;
             }
             $5 = __shgetc($0 | 0) | 0;
            }
            $1 = 16;
            if ((HEAPU8[($5 + 28305 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2) {
              break label$1
             }
             break label$2;
            }
            $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            HEAP32[($0 + 4 | 0) >> 2] = $5 + -1 | 0;
            if (!$2) {
             break label$2
            }
            HEAP32[($0 + 4 | 0) >> 2] = $5 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1) {
            break label$14
           }
           $1 = 8;
           break label$5;
          }
          $1 = $1 ? $1 : 10;
          if ($1 >>> 0 > (HEAPU8[($5 + 28305 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          __shlim($0 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[(__errno_location() | 0) >> 2] = 28;
          break label$1;
         }
         if (($1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $7 = 0;
         $7$hi = i64toi32_i32$0;
         label$23 : {
          $2 = $5 + -48 | 0;
          if ($2 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1 = 0;
          label$24 : while (1) {
           $1 = Math_imul($1, 10);
           label$25 : {
            label$26 : {
             $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
             $5 = HEAPU8[$5 >> 0] | 0;
             break label$25;
            }
            $5 = __shgetc($0 | 0) | 0;
           }
           $1 = $1 + $2 | 0;
           label$27 : {
            $2 = $5 + -48 | 0;
            if ($2 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1 >>> 0 < 429496729 >>> 0) {
             continue label$24
            }
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $7 = $1;
          $7$hi = i64toi32_i32$0;
         }
         if ($2 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $7$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($7 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $8 = i64toi32_i32$1;
         $8$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $9 = $2;
         $9$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
            if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
            $5 = HEAPU8[$5 >> 0] | 0;
            break label$29;
           }
           $5 = __shgetc($0 | 0) | 0;
          }
          i64toi32_i32$0 = $8$hi;
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$0 = $8$hi;
          i64toi32_i32$2 = $8;
          i64toi32_i32$1 = $9$hi;
          i64toi32_i32$3 = $9;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $7 = i64toi32_i32$4;
          $7$hi = i64toi32_i32$5;
          $2 = $5 + -48 | 0;
          if ($2 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $7$hi;
          i64toi32_i32$0 = $7;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $7$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $8 = i64toi32_i32$5;
          $8$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $9 = $2;
          $9$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $8$hi;
          i64toi32_i32$0 = $8;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1 = 10;
         break label$4;
        }
        HEAP32[(__errno_location() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1 = 10;
       if ($2 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1 & ($1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $7 = 0;
       $7$hi = i64toi32_i32$0;
       label$32 : {
        $2 = HEAPU8[($5 + 28305 | 0) >> 0] | 0;
        if ($1 >>> 0 <= $2 >>> 0) {
         break label$32
        }
        $10 = 0;
        label$33 : while (1) {
         $10 = $2 + Math_imul($10, $1) | 0;
         label$34 : {
          label$35 : {
           $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
           $5 = HEAPU8[$5 >> 0] | 0;
           break label$34;
          }
          $5 = __shgetc($0 | 0) | 0;
         }
         $2 = HEAPU8[($5 + 28305 | 0) >> 0] | 0;
         label$36 : {
          if ($10 >>> 0 > 119304646 >>> 0) {
           break label$36
          }
          if ($1 >>> 0 > $2 >>> 0) {
           continue label$33
          }
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $7 = $10;
        $7$hi = i64toi32_i32$0;
       }
       if ($1 >>> 0 <= $2 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $8 = $1;
       $8$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $7$hi;
        i64toi32_i32$0 = $8$hi;
        i64toi32_i32$0 = $7$hi;
        i64toi32_i32$5 = $8$hi;
        i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$0 | 0, $8 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $9 = i64toi32_i32$5;
        $9$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $11 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $11$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $11;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $242 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $242$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$5 = $9;
        i64toi32_i32$0 = $242$hi;
        i64toi32_i32$3 = $242;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
          $5 = HEAPU8[$5 >> 0] | 0;
          break label$38;
         }
         $5 = __shgetc($0 | 0) | 0;
        }
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$3 = $9;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$0 = $11;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $7 = i64toi32_i32$1;
        $7$hi = i64toi32_i32$4;
        $2 = HEAPU8[($5 + 28305 | 0) >> 0] | 0;
        if ($1 >>> 0 <= $2 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $8$hi;
        i64toi32_i32$4 = $7$hi;
        i64toi32_i32$4 = $8$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $7$hi;
        i64toi32_i32$0 = 0;
        __multi3($4 | 0, $8 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $7 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $12 = HEAP8[(((Math_imul($1, 23) >>> 5 | 0) & 7 | 0) + 28561 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $7 = 0;
      $7$hi = i64toi32_i32$3;
      label$40 : {
       $2 = HEAPU8[($5 + 28305 | 0) >> 0] | 0;
       if ($1 >>> 0 <= $2 >>> 0) {
        break label$40
       }
       $10 = 0;
       label$41 : while (1) {
        $10 = $2 | ($10 << $12 | 0) | 0;
        label$42 : {
         label$43 : {
          $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
          $5 = HEAPU8[$5 >> 0] | 0;
          break label$42;
         }
         $5 = __shgetc($0 | 0) | 0;
        }
        $2 = HEAPU8[($5 + 28305 | 0) >> 0] | 0;
        label$44 : {
         if ($10 >>> 0 > 134217727 >>> 0) {
          break label$44
         }
         if ($1 >>> 0 > $2 >>> 0) {
          continue label$41
         }
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $7 = $10;
       $7$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $8 = $12;
      $8$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$0 = $8;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $32 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $32 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $9 = $32;
      $9$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$3 = $9;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$0 = $7;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      if ($1 >>> 0 <= $2 >>> 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$0 = $7;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$4 = $8;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $33 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $33 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $324$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $327 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $327$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $324$hi;
       i64toi32_i32$5 = $33;
       i64toi32_i32$3 = $327$hi;
       i64toi32_i32$4 = $327;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $7 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $7$hi = i64toi32_i32$3;
       label$46 : {
        label$47 : {
         $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
         $5 = HEAPU8[$5 >> 0] | 0;
         break label$46;
        }
        $5 = __shgetc($0 | 0) | 0;
       }
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$0 = $7;
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$4 = $9;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$4
       }
       $2 = HEAPU8[($5 + 28305 | 0) >> 0] | 0;
       if ($1 >>> 0 > $2 >>> 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1 >>> 0 <= (HEAPU8[($5 + 28305 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if ($5 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0 + 4 | 0) >> 2] = $5 + 1 | 0;
        $5 = HEAPU8[$5 >> 0] | 0;
        break label$49;
       }
       $5 = __shgetc($0 | 0) | 0;
      }
      if ($1 >>> 0 > (HEAPU8[($5 + 28305 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     HEAP32[(__errno_location() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $7 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3 & 1 | 0) {
       break label$53
      }
      if ($6) {
       break label$53
      }
      HEAP32[(__errno_location() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3;
     if ($7$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($7$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     HEAP32[(__errno_location() | 0) >> 2] = 68;
     break label$1;
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$1 = $6;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$4 = $7;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $406$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $406$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   __shlim($0 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function mbrtowc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $5 = 0, $8 = 0, $4 = 0, $7 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = $3 ? $3 : 86800;
  $3 = HEAP32[$5 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1) {
       break label$4
      }
      if ($3) {
       break label$3
      }
      $6 = 0;
      break label$1;
     }
     $6 = -2;
     if (!$2) {
      break label$1
     }
     $7 = $0 ? $0 : $4 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3) {
        break label$6
       }
       $0 = $2;
       break label$5;
      }
      label$7 : {
       $3 = HEAPU8[$1 >> 0] | 0;
       $0 = ($3 << 24 | 0) >> 24 | 0;
       if (($0 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7 >> 2] = $3;
       $6 = ($0 | 0) != (0 | 0);
       break label$1;
      }
      $3 = HEAP32[(HEAP32[((__pthread_self() | 0) + 172 | 0) >> 2] | 0) >> 2] | 0;
      $0 = HEAP8[$1 >> 0] | 0;
      label$8 : {
       if ($3) {
        break label$8
       }
       HEAP32[$7 >> 2] = $0 & 57343 | 0;
       $6 = 1;
       break label$1;
      }
      $3 = ($0 & 255 | 0) + -194 | 0;
      if ($3 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3 = HEAP32[(28576 + ($3 << 2 | 0) | 0) >> 2] | 0;
      $0 = $2 + -1 | 0;
      if (!$0) {
       break label$2
      }
      $1 = $1 + 1 | 0;
     }
     $8 = HEAPU8[$1 >> 0] | 0;
     $9 = $8 >>> 3 | 0;
     if (($9 + -16 | 0 | (($3 >> 26 | 0) + $9 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0 = $0 + -1 | 0;
      label$10 : {
       $3 = ($8 & 255 | 0) + -128 | 0 | ($3 << 6 | 0) | 0;
       if (($3 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5 >> 2] = 0;
       HEAP32[$7 >> 2] = $3;
       $6 = $2 - $0 | 0;
       break label$1;
      }
      if (!$0) {
       break label$2
      }
      $1 = $1 + 1 | 0;
      $8 = HEAPU8[$1 >> 0] | 0;
      if (($8 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5 >> 2] = 0;
    HEAP32[(__errno_location() | 0) >> 2] = 25;
    $6 = -1;
    break label$1;
   }
   HEAP32[$5 >> 2] = $3;
  }
  __stack_pointer = $4 + 16 | 0;
  return $6 | 0;
 }
 
 function mbsinit($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0 >> 2] | 0) | 0;
 }
 
 function vfscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $8 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $14 = 0, $3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $7$hi = 0, $16 = 0, $17$hi = 0, $7 = 0, $17 = 0, $18$hi = 0, $4 = 0, $9 = 0, $15 = 0, $18 = 0, $19 = 0, i64toi32_i32$6 = 0, $5 = 0, $58 = 0, $68$hi = 0, $70$hi = 0, $75 = 0, $75$hi = 0, $174 = 0, $184 = 0, $246$hi = 0, $248$hi = 0, $253 = 0, $253$hi = 0, $294 = 0, $294$hi = 0, $300 = 0, $300$hi = 0, $301$hi = 0, $407 = 0, $407$hi = 0, $413 = 0, $413$hi = 0, $414$hi = 0, $616 = 0, $616$hi = 0, $621 = 0, $621$hi = 0, $649$hi = 0, $651$hi = 0, $657 = 0, $657$hi = 0;
  $3 = __stack_pointer - 304 | 0;
  __stack_pointer = $3;
  $4 = 0;
  $5 = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5 = __lockfile($0 | 0) | 0;
  }
  label$2 : {
   $6 = HEAPU8[$1 >> 0] | 0;
   if (!$6) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   $7 = 0;
   $7$hi = i64toi32_i32$0;
   $4 = 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        label$8 : {
         label$9 : {
          if (!(isspace($6 & 255 | 0 | 0) | 0)) {
           break label$9
          }
          label$10 : while (1) {
           $6 = $1;
           $1 = $1 + 1 | 0;
           if (isspace(HEAPU8[($6 + 1 | 0) >> 0] | 0 | 0) | 0) {
            continue label$10
           }
           break label$10;
          };
          i64toi32_i32$0 = 0;
          __shlim($0 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$11 : while (1) {
           label$12 : {
            label$13 : {
             $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             if ($1 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$13
             }
             HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
             $1 = HEAPU8[$1 >> 0] | 0;
             break label$12;
            }
            $1 = __shgetc($0 | 0) | 0;
           }
           if (isspace($1 | 0) | 0) {
            continue label$11
           }
           break label$11;
          };
          $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          label$14 : {
           if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
            break label$14
           }
           $1 = $1 + -1 | 0;
           HEAP32[($0 + 4 | 0) >> 2] = $1;
          }
          i64toi32_i32$2 = $0;
          i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
          $68$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $7$hi;
          i64toi32_i32$1 = $68$hi;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = $7$hi;
          i64toi32_i32$3 = $7;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $70$hi = i64toi32_i32$5;
          i64toi32_i32$2 = $1 - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
          $75 = i64toi32_i32$2;
          $75$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $70$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$2 = $75$hi;
          i64toi32_i32$3 = $75;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $7 = i64toi32_i32$0;
          $7$hi = i64toi32_i32$4;
          break label$8;
         }
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             $6 = HEAPU8[$1 >> 0] | 0;
             if (($6 | 0) != (37 | 0)) {
              break label$18
             }
             $8 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
             if (($8 | 0) == (42 | 0)) {
              break label$17
             }
             if (($8 | 0) != (37 | 0)) {
              break label$16
             }
            }
            i64toi32_i32$4 = 0;
            __shlim($0 | 0, 0 | 0, i64toi32_i32$4 | 0);
            $6 = $1 + (($6 | 0) == (37 | 0)) | 0;
            label$19 : {
             label$20 : {
              $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              if ($1 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
              $1 = HEAPU8[$1 >> 0] | 0;
              break label$19;
             }
             $1 = __shgetc($0 | 0) | 0;
            }
            label$21 : {
             if (($1 | 0) == (HEAPU8[$6 >> 0] | 0 | 0)) {
              break label$21
             }
             label$22 : {
              if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
               break label$22
              }
              HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
             }
             $9 = 0;
             if (($1 | 0) >= (0 | 0)) {
              break label$2
             }
             break label$4;
            }
            i64toi32_i32$4 = $7$hi;
            i64toi32_i32$5 = $7;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = 1;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
            i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
             i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
            }
            $7 = i64toi32_i32$2;
            $7$hi = i64toi32_i32$0;
            break label$8;
           }
           $6 = $1 + 2 | 0;
           $10 = 0;
           break label$15;
          }
          label$23 : {
           if (!(isdigit($8 | 0) | 0)) {
            break label$23
           }
           if ((HEAPU8[($1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break label$23
           }
           $6 = $1 + 3 | 0;
           $10 = arg_n($2 | 0, (HEAPU8[($1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
           break label$15;
          }
          $6 = $1 + 1 | 0;
          $10 = HEAP32[$2 >> 2] | 0;
          $2 = $2 + 4 | 0;
         }
         $9 = 0;
         $1 = 0;
         label$24 : {
          if (!(isdigit(HEAPU8[$6 >> 0] | 0 | 0) | 0)) {
           break label$24
          }
          label$25 : while (1) {
           $1 = (Math_imul($1, 10) + (HEAPU8[$6 >> 0] | 0) | 0) + -48 | 0;
           $8 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
           $6 = $6 + 1 | 0;
           if (isdigit($8 | 0) | 0) {
            continue label$25
           }
           break label$25;
          };
         }
         label$26 : {
          label$27 : {
           $11 = HEAPU8[$6 >> 0] | 0;
           if (($11 | 0) == (109 | 0)) {
            break label$27
           }
           $8 = $6;
           break label$26;
          }
          $8 = $6 + 1 | 0;
          $12 = 0;
          $9 = ($10 | 0) != (0 | 0);
          $11 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
          $13 = 0;
         }
         $6 = $8 + 1 | 0;
         $14 = 3;
         label$28 : {
          label$29 : {
           switch (($11 & 255 | 0) + -65 | 0 | 0) {
           case 39:
            $174 = $8 + 2 | 0;
            $8 = (HEAPU8[($8 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
            $6 = $8 ? $174 : $6;
            $14 = $8 ? -2 : -1;
            break label$28;
           case 43:
            $184 = $8 + 2 | 0;
            $8 = (HEAPU8[($8 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
            $6 = $8 ? $184 : $6;
            $14 = $8 ? 3 : 1;
            break label$28;
           case 51:
           case 57:
            $14 = 1;
            break label$28;
           case 11:
            $14 = 2;
            break label$28;
           case 41:
            break label$28;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break label$29;
           default:
            break label$4;
           };
          }
          $14 = 0;
          $6 = $8;
         }
         $8 = HEAPU8[$6 >> 0] | 0;
         $11 = ($8 & 47 | 0 | 0) == (3 | 0);
         $15 = $11 ? 1 : $14;
         label$34 : {
          $16 = $11 ? $8 | 32 | 0 : $8;
          if (($16 | 0) == (91 | 0)) {
           break label$34
          }
          label$35 : {
           label$36 : {
            if (($16 | 0) == (110 | 0)) {
             break label$36
            }
            if (($16 | 0) != (99 | 0)) {
             break label$35
            }
            $1 = ($1 | 0) > (1 | 0) ? $1 : 1;
            break label$34;
           }
           i64toi32_i32$0 = $7$hi;
           store_int($10 | 0, $15 | 0, $7 | 0, i64toi32_i32$0 | 0);
           break label$8;
          }
          i64toi32_i32$0 = 0;
          __shlim($0 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label$37 : while (1) {
           label$38 : {
            label$39 : {
             $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             if ($8 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$39
             }
             HEAP32[($0 + 4 | 0) >> 2] = $8 + 1 | 0;
             $8 = HEAPU8[$8 >> 0] | 0;
             break label$38;
            }
            $8 = __shgetc($0 | 0) | 0;
           }
           if (isspace($8 | 0) | 0) {
            continue label$37
           }
           break label$37;
          };
          $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          label$40 : {
           if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
            break label$40
           }
           $8 = $8 + -1 | 0;
           HEAP32[($0 + 4 | 0) >> 2] = $8;
          }
          i64toi32_i32$4 = $0;
          i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
          $246$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $7$hi;
          i64toi32_i32$5 = $246$hi;
          i64toi32_i32$4 = i64toi32_i32$0;
          i64toi32_i32$0 = $7$hi;
          i64toi32_i32$3 = $7;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $248$hi = i64toi32_i32$2;
          i64toi32_i32$4 = $8 - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
          $253 = i64toi32_i32$4;
          $253$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $248$hi;
          i64toi32_i32$5 = i64toi32_i32$1;
          i64toi32_i32$4 = $253$hi;
          i64toi32_i32$3 = $253;
          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $7 = i64toi32_i32$0;
          $7$hi = i64toi32_i32$1;
         }
         i64toi32_i32$5 = $1;
         i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
         $17 = i64toi32_i32$5;
         $17$hi = i64toi32_i32$1;
         __shlim($0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0);
         label$41 : {
          label$42 : {
           $14 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           $8 = HEAP32[($0 + 104 | 0) >> 2] | 0;
           if ($14 >>> 0 >= $8 >>> 0) {
            break label$42
           }
           HEAP32[($0 + 4 | 0) >> 2] = $14 + 1 | 0;
           break label$41;
          }
          if ((__shgetc($0 | 0) | 0 | 0) < (0 | 0)) {
           break label$4
          }
          $8 = HEAP32[($0 + 104 | 0) >> 2] | 0;
         }
         label$43 : {
          if (!$8) {
           break label$43
          }
          HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $8 = 16;
         label$44 : {
          label$45 : {
           label$46 : {
            label$47 : {
             label$48 : {
              label$49 : {
               label$50 : {
                switch ($16 + -88 | 0 | 0) {
                default:
                 $1 = $16 + -65 | 0;
                 if ($1 >>> 0 > 6 >>> 0) {
                  break label$44
                 }
                 if (!((1 << $1 | 0) & 113 | 0)) {
                  break label$44
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 __floatscan($3 | 0, $0 | 0, $15 | 0, 0 | 0);
                 i64toi32_i32$2 = $0;
                 i64toi32_i32$1 = HEAP32[($0 + 120 | 0) >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
                 $294 = i64toi32_i32$1;
                 $294$hi = i64toi32_i32$5;
                 i64toi32_i32$1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
                 i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                 $300 = i64toi32_i32$1;
                 $300$hi = i64toi32_i32$5;
                 i64toi32_i32$5 = 0;
                 i64toi32_i32$2 = 0;
                 i64toi32_i32$1 = $300$hi;
                 i64toi32_i32$3 = $300;
                 i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                 i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                 i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                 i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                 $301$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = $294$hi;
                 i64toi32_i32$5 = $294;
                 i64toi32_i32$2 = $301$hi;
                 i64toi32_i32$3 = i64toi32_i32$4;
                 if ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                  break label$3
                 }
                 if (!$10) {
                  break label$44
                 }
                 i64toi32_i32$3 = $3;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                 $17 = i64toi32_i32$5;
                 $17$hi = i64toi32_i32$0;
                 i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                 i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                 $18 = i64toi32_i32$0;
                 $18$hi = i64toi32_i32$5;
                 switch ($15 | 0) {
                 case 2:
                  break label$46;
                 case 1:
                  break label$47;
                 case 0:
                  break label$48;
                 default:
                  break label$44;
                 };
                case 3:
                case 11:
                case 27:
                 label$56 : {
                  if (($16 & 239 | 0 | 0) != (99 | 0)) {
                   break label$56
                  }
                  memset($3 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                  HEAP8[($3 + 32 | 0) >> 0] = 0;
                  if (($16 | 0) != (115 | 0)) {
                   break label$45
                  }
                  HEAP8[($3 + 65 | 0) >> 0] = 0;
                  HEAP8[($3 + 46 | 0) >> 0] = 0;
                  $58 = 0;
                  HEAP16[($3 + 42 | 0) >> 1] = $58;
                  HEAP16[($3 + 44 | 0) >> 1] = $58 >>> 16 | 0;
                  break label$45;
                 }
                 $14 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
                 $8 = ($14 | 0) == (94 | 0);
                 memset($3 + 32 | 0 | 0, $8 | 0, 257 | 0) | 0;
                 HEAP8[($3 + 32 | 0) >> 0] = 0;
                 $11 = $8 ? $6 + 2 | 0 : $6 + 1 | 0;
                 label$57 : {
                  label$58 : {
                   label$59 : {
                    label$60 : {
                     $6 = HEAPU8[($6 + ($8 ? 2 : 1) | 0) >> 0] | 0;
                     if (($6 | 0) == (45 | 0)) {
                      break label$60
                     }
                     if (($6 | 0) == (93 | 0)) {
                      break label$59
                     }
                     $14 = ($14 | 0) != (94 | 0);
                     $6 = $11;
                     break label$57;
                    }
                    $14 = ($14 | 0) != (94 | 0);
                    HEAP8[($3 + 78 | 0) >> 0] = $14;
                    break label$58;
                   }
                   $14 = ($14 | 0) != (94 | 0);
                   HEAP8[($3 + 126 | 0) >> 0] = $14;
                  }
                  $6 = $11 + 1 | 0;
                 }
                 label$61 : while (1) {
                  label$62 : {
                   label$63 : {
                    $8 = HEAPU8[$6 >> 0] | 0;
                    if (($8 | 0) == (45 | 0)) {
                     break label$63
                    }
                    if (!$8) {
                     break label$4
                    }
                    if (($8 | 0) != (93 | 0)) {
                     break label$62
                    }
                    break label$45;
                   }
                   $8 = 45;
                   $19 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
                   if (!$19) {
                    break label$62
                   }
                   if (($19 | 0) == (93 | 0)) {
                    break label$62
                   }
                   $11 = $6 + 1 | 0;
                   label$64 : {
                    label$65 : {
                     $6 = HEAPU8[($6 + -1 | 0) >> 0] | 0;
                     if ($6 >>> 0 < $19 >>> 0) {
                      break label$65
                     }
                     $8 = $19;
                     break label$64;
                    }
                    label$66 : while (1) {
                     $6 = $6 + 1 | 0;
                     HEAP8[(($3 + 32 | 0) + $6 | 0) >> 0] = $14;
                     $8 = HEAPU8[$11 >> 0] | 0;
                     if ($6 >>> 0 < $8 >>> 0) {
                      continue label$66
                     }
                     break label$66;
                    };
                   }
                   $6 = $11;
                  }
                  HEAP8[(($8 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] = $14;
                  $6 = $6 + 1 | 0;
                  continue label$61;
                 };
                case 23:
                 $8 = 8;
                 break label$49;
                case 12:
                case 29:
                 $8 = 10;
                 break label$49;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break label$44;
                case 0:
                case 24:
                case 32:
                 break label$49;
                case 17:
                 break label$50;
                };
               }
               $8 = 0;
              }
              i64toi32_i32$5 = -1;
              i64toi32_i32$5 = __intscan($0 | 0, $8 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
              i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
              $17 = i64toi32_i32$5;
              $17$hi = i64toi32_i32$0;
              i64toi32_i32$3 = $0;
              i64toi32_i32$0 = HEAP32[($0 + 120 | 0) >> 2] | 0;
              i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
              $407 = i64toi32_i32$0;
              $407$hi = i64toi32_i32$5;
              i64toi32_i32$0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
              i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
              $413 = i64toi32_i32$0;
              $413$hi = i64toi32_i32$5;
              i64toi32_i32$5 = 0;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = $413$hi;
              i64toi32_i32$2 = $413;
              i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
              i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
              $414$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $407$hi;
              i64toi32_i32$5 = $407;
              i64toi32_i32$3 = $414$hi;
              i64toi32_i32$2 = i64toi32_i32$1;
              if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
               break label$3
              }
              label$67 : {
               if (!$10) {
                break label$67
               }
               if (($16 | 0) != (112 | 0)) {
                break label$67
               }
               i64toi32_i32$5 = $17$hi;
               HEAP32[$10 >> 2] = $17;
               break label$44;
              }
              i64toi32_i32$5 = $17$hi;
              store_int($10 | 0, $15 | 0, $17 | 0, i64toi32_i32$5 | 0);
              break label$44;
             }
             i64toi32_i32$5 = $18$hi;
             i64toi32_i32$5 = $17$hi;
             i64toi32_i32$5 = $18$hi;
             i64toi32_i32$4 = $17$hi;
             HEAPF32[$10 >> 2] = Math_fround(__trunctfsf2($18 | 0, i64toi32_i32$5 | 0, $17 | 0, i64toi32_i32$4 | 0));
             break label$44;
            }
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$4 = $17$hi;
            i64toi32_i32$4 = $18$hi;
            i64toi32_i32$5 = $17$hi;
            HEAPF64[$10 >> 3] = +__trunctfdf2($18 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$5 | 0);
            break label$44;
           }
           i64toi32_i32$5 = $18$hi;
           i64toi32_i32$4 = $10;
           HEAP32[i64toi32_i32$4 >> 2] = $18;
           HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
           i64toi32_i32$5 = $17$hi;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $17;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
           break label$44;
          }
          $11 = ($16 | 0) == (99 | 0);
          $14 = $11 ? $1 + 1 | 0 : 31;
          label$68 : {
           label$69 : {
            $16 = ($15 | 0) != (1 | 0);
            if ($16) {
             break label$69
            }
            $8 = $10;
            label$70 : {
             if (!$9) {
              break label$70
             }
             $8 = dlmalloc($14 << 2 | 0 | 0) | 0;
             if (!$8) {
              break label$5
             }
            }
            i64toi32_i32$4 = $3;
            i64toi32_i32$5 = 0;
            HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$5;
            $1 = 0;
            label$71 : while (1) {
             $13 = $8;
             label$72 : {
              label$73 : while (1) {
               label$74 : {
                label$75 : {
                 $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                 if ($8 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$75
                 }
                 HEAP32[($0 + 4 | 0) >> 2] = $8 + 1 | 0;
                 $8 = HEAPU8[$8 >> 0] | 0;
                 break label$74;
                }
                $8 = __shgetc($0 | 0) | 0;
               }
               if (!(HEAPU8[(($8 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                break label$72
               }
               HEAP8[($3 + 27 | 0) >> 0] = $8;
               $8 = mbrtowc($3 + 28 | 0 | 0, $3 + 27 | 0 | 0, 1 | 0, $3 + 296 | 0 | 0) | 0;
               if (($8 | 0) == (-2 | 0)) {
                continue label$73
               }
               if (($8 | 0) == (-1 | 0)) {
                break label$6
               }
               label$76 : {
                if (!$13) {
                 break label$76
                }
                HEAP32[($13 + ($1 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
                $1 = $1 + 1 | 0;
               }
               if (!$9) {
                continue label$73
               }
               if (($1 | 0) != ($14 | 0)) {
                continue label$73
               }
               break label$73;
              };
              $14 = $14 << 1 | 0 | 1 | 0;
              $8 = dlrealloc($13 | 0, $14 << 2 | 0 | 0) | 0;
              if ($8) {
               continue label$71
              }
              break label$6;
             }
             break label$71;
            };
            if (!(mbsinit($3 + 296 | 0 | 0) | 0)) {
             break label$6
            }
            $12 = 0;
            break label$68;
           }
           label$77 : {
            if (!$9) {
             break label$77
            }
            $1 = 0;
            $8 = dlmalloc($14 | 0) | 0;
            if (!$8) {
             break label$5
            }
            label$78 : while (1) {
             $12 = $8;
             label$79 : while (1) {
              label$80 : {
               label$81 : {
                $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if ($8 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$81
                }
                HEAP32[($0 + 4 | 0) >> 2] = $8 + 1 | 0;
                $8 = HEAPU8[$8 >> 0] | 0;
                break label$80;
               }
               $8 = __shgetc($0 | 0) | 0;
              }
              label$82 : {
               if (HEAPU8[(($8 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$82
               }
               $13 = 0;
               break label$68;
              }
              HEAP8[($12 + $1 | 0) >> 0] = $8;
              $1 = $1 + 1 | 0;
              if (($1 | 0) != ($14 | 0)) {
               continue label$79
              }
              break label$79;
             };
             $13 = 0;
             $14 = $14 << 1 | 0 | 1 | 0;
             $8 = dlrealloc($12 | 0, $14 | 0) | 0;
             if (!$8) {
              break label$4
             }
             continue label$78;
            };
           }
           $1 = 0;
           label$83 : {
            if (!$10) {
             break label$83
            }
            label$84 : while (1) {
             label$85 : {
              label$86 : {
               $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
               if ($8 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$86
               }
               HEAP32[($0 + 4 | 0) >> 2] = $8 + 1 | 0;
               $8 = HEAPU8[$8 >> 0] | 0;
               break label$85;
              }
              $8 = __shgetc($0 | 0) | 0;
             }
             label$87 : {
              if (HEAPU8[(($8 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
               break label$87
              }
              $13 = 0;
              $12 = $10;
              break label$68;
             }
             HEAP8[($10 + $1 | 0) >> 0] = $8;
             $1 = $1 + 1 | 0;
             continue label$84;
            };
           }
           label$88 : while (1) {
            label$89 : {
             label$90 : {
              $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              if ($1 >>> 0 >= (HEAP32[($0 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$90
              }
              HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
              $1 = HEAPU8[$1 >> 0] | 0;
              break label$89;
             }
             $1 = __shgetc($0 | 0) | 0;
            }
            if (HEAPU8[(($1 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
             continue label$88
            }
            break label$88;
           };
           $12 = 0;
           $13 = 0;
           $1 = 0;
          }
          $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          label$91 : {
           if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
            break label$91
           }
           $8 = $8 + -1 | 0;
           HEAP32[($0 + 4 | 0) >> 2] = $8;
          }
          i64toi32_i32$2 = $0;
          i64toi32_i32$5 = HEAP32[($0 + 120 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0 + 124 | 0) >> 2] | 0;
          $616 = i64toi32_i32$5;
          $616$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $8 - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
          $621 = i64toi32_i32$5;
          $621$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $616$hi;
          i64toi32_i32$2 = $616;
          i64toi32_i32$5 = $621$hi;
          i64toi32_i32$3 = $621;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $18 = i64toi32_i32$0;
          $18$hi = i64toi32_i32$1;
          if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
           break label$3
          }
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$4 = $18;
          i64toi32_i32$2 = $17$hi;
          i64toi32_i32$3 = $17;
          if ($11 & ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) | 0) {
           break label$3
          }
          label$92 : {
           if (!$9) {
            break label$92
           }
           label$93 : {
            if ($16) {
             break label$93
            }
            HEAP32[$10 >> 2] = $13;
            break label$92;
           }
           HEAP32[$10 >> 2] = $12;
          }
          if ($11) {
           break label$44
          }
          label$94 : {
           if (!$13) {
            break label$94
           }
           HEAP32[($13 + ($1 << 2 | 0) | 0) >> 2] = 0;
          }
          label$95 : {
           if ($12) {
            break label$95
           }
           $12 = 0;
           break label$44;
          }
          HEAP8[($12 + $1 | 0) >> 0] = 0;
         }
         i64toi32_i32$3 = $0;
         i64toi32_i32$4 = HEAP32[($0 + 120 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
         $649$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $7$hi;
         i64toi32_i32$1 = $649$hi;
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$4 = $7$hi;
         i64toi32_i32$2 = $7;
         i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $651$hi = i64toi32_i32$0;
         i64toi32_i32$3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 8 | 0) >> 2] | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
         $657 = i64toi32_i32$3;
         $657$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $651$hi;
         i64toi32_i32$1 = i64toi32_i32$5;
         i64toi32_i32$3 = $657$hi;
         i64toi32_i32$2 = $657;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $7 = i64toi32_i32$4;
         $7$hi = i64toi32_i32$5;
         $4 = $4 + (($10 | 0) != (0 | 0)) | 0;
        }
        $1 = $6 + 1 | 0;
        $6 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
        if ($6) {
         continue label$7
        }
        break label$2;
       };
      }
      $12 = 0;
      break label$4;
     }
     $12 = 0;
     $13 = 0;
    }
    $4 = $4 ? $4 : -1;
   }
   if (!$9) {
    break label$2
   }
   dlfree($12 | 0);
   dlfree($13 | 0);
  }
  label$96 : {
   if (!$5) {
    break label$96
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $3 + 304 | 0;
  return $4 | 0;
 }
 
 function arg_n($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  $0 = $1 >>> 0 > 1 >>> 0 ? (($1 << 2 | 0) + $0 | 0) + -4 | 0 : $0;
  HEAP32[($2 + 8 | 0) >> 2] = $0 + 4 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function store_int($0, $1, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    switch ($1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0 >> 0] = $2;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0 >> 1] = $2;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0 >> 2] = $2;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0 >> 2] = $2;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function __string_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  $4 = $2 + 256 | 0;
  $5 = memchr($3 | 0, 0 | 0, $4 | 0) | 0;
  $4 = $5 ? $5 - $3 | 0 : $4;
  $2 = $4 >>> 0 < $2 >>> 0 ? $4 : $2;
  memcpy($1 | 0, $3 | 0, $2 | 0) | 0;
  $4 = $3 + $4 | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $4;
  HEAP32[($0 + 8 | 0) >> 2] = $4;
  HEAP32[($0 + 4 | 0) >> 2] = $3 + $2 | 0;
  return $2 | 0;
 }
 
 function vsscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  $3 = memset($3 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3 + 76 | 0) >> 2] = -1;
  HEAP32[($3 + 44 | 0) >> 2] = $0;
  HEAP32[($3 + 32 | 0) >> 2] = 36;
  HEAP32[($3 + 84 | 0) >> 2] = $0;
  $0 = vfscanf($3 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 144 | 0;
  return $0 | 0;
 }
 
 function do_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __string_read($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
 }
 
 function sscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vsscanf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function __ofl_lock() {
  __lock(86804 | 0);
  return 86812 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(86804 | 0);
 }
 
 function putc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if (__lockfile($1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $2 = $0 & 255 | 0;
    if (($2 | 0) == (HEAP8[($1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if ($3 >>> 0 >= (HEAP32[($1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($1 + 20 | 0) >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $0;
    return $2 | 0;
   }
   return __overflow($1 | 0, $0 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $2 = $0 & 255 | 0;
    if (($2 | 0) == (HEAP8[($1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if ($3 >>> 0 >= (HEAP32[($1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($1 + 20 | 0) >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $0;
    break label$4;
   }
   $2 = __overflow($1 | 0, $0 | 0) | 0;
  }
  __unlockfile($1 | 0);
  return $2 | 0;
 }
 
 function fileno($0) {
  $0 = $0 | 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   if (!(__lockfile($0 | 0) | 0)) {
    break label$1
   }
   __unlockfile($0 | 0);
  }
  return HEAP32[($0 + 60 | 0) >> 2] | 0 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $6 = $1 + $2 | 0;
  $7 = 2;
  $1 = $3 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($4 | 0)) {
        break label$3
       }
       if (($4 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       $5 = $4 >>> 0 > $8 >>> 0;
       $9 = $1 + ($5 << 3 | 0) | 0;
       $8 = $4 - ($5 ? $8 : 0) | 0;
       HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $8 | 0;
       $9 = $1 + ($5 ? 12 : 4) | 0;
       HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) - $8 | 0;
       $6 = $6 - $4 | 0;
       $1 = $5 ? $1 + 8 | 0 : $1;
       $7 = $7 - $5 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, $7 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $4 = $2;
    break label$1;
   }
   $4 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($7 | 0) == (2 | 0)) {
    break label$1
   }
   $4 = $2 - (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function __strerror_l($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      if ((HEAPU8[($2 + 28784 | 0) >> 0] | 0 | 0) == ($0 | 0)) {
       break label$3
      }
      $3 = 87;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != (87 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    $3 = $2;
    if ($2) {
     break label$2
    }
    $4 = 28880;
    break label$1;
   }
   $2 = 28880;
   label$5 : while (1) {
    $0 = HEAPU8[$2 >> 0] | 0;
    $4 = $2 + 1 | 0;
    $2 = $4;
    if ($0) {
     continue label$5
    }
    $2 = $4;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue label$5
    }
    break label$5;
   };
  }
  return __lctrans($4 | 0, HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function strerror($0) {
  $0 = $0 | 0;
  return __strerror_l($0 | 0, HEAP32[((__pthread_self() | 0) + 172 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function perror($0) {
  $0 = $0 | 0;
  var $3 = 0, $1 = 0, $2 = 0;
  $1 = 0;
  $2 = strerror(HEAP32[(__errno_location() | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   $3 = HEAP32[(0 + 28204 | 0) >> 2] | 0;
   if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1 = __lockfile($3 | 0) | 0;
  }
  label$2 : {
   if (!$0) {
    break label$2
   }
   if (!(HEAPU8[$0 >> 0] | 0)) {
    break label$2
   }
   fwrite($0 | 0, strlen($0 | 0) | 0 | 0, 1 | 0, $3 | 0) | 0;
   fputc(58 | 0, $3 | 0) | 0;
   fputc(32 | 0, $3 | 0) | 0;
  }
  fwrite($2 | 0, strlen($2 | 0) | 0 | 0, 1 | 0, $3 | 0) | 0;
  fputc(10 | 0, $3 | 0) | 0;
  label$3 : {
   if (!$1) {
    break label$3
   }
   __unlockfile($3 | 0);
  }
 }
 
 function __fmodeflags($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 2;
  label$1 : {
   if (strchr($0 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1 = (HEAPU8[$0 >> 0] | 0 | 0) != (114 | 0);
  }
  $1 = strchr($0 | 0, 120 | 0) | 0 ? $1 | 128 | 0 : $1;
  $1 = strchr($0 | 0, 101 | 0) | 0 ? $1 | 524288 | 0 : $1;
  $0 = HEAPU8[$0 >> 0] | 0;
  $1 = ($0 | 0) == (114 | 0) ? $1 : $1 | 64 | 0;
  $1 = ($0 | 0) == (119 | 0) ? $1 | 512 | 0 : $1;
  return (($0 | 0) == (97 | 0) ? $1 | 1024 | 0 : $1) | 0;
 }
 
 function atof($0) {
  $0 = $0 | 0;
  return +(+strtod($0 | 0, 0 | 0));
 }
 
 function qsort($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $8 = 0, $7 = 0, $5 = 0, $6 = 0, $33 = 0, $126 = 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = 1;
  HEAP32[($4 + 12 | 0) >> 2] = 0;
  label$1 : {
   $5 = Math_imul($2, $1);
   if (!$5) {
    break label$1
   }
   HEAP32[($4 + 16 | 0) >> 2] = $2;
   HEAP32[($4 + 20 | 0) >> 2] = $2;
   $6 = 0 - $2 | 0;
   $1 = $2;
   $7 = $1;
   $8 = 2;
   label$2 : while (1) {
    $33 = $7 + $2 | 0;
    $7 = $1;
    $1 = $33 + $1 | 0;
    HEAP32[(($4 + 16 | 0) + ($8 << 2 | 0) | 0) >> 2] = $1;
    $8 = $8 + 1 | 0;
    if ($1 >>> 0 < $5 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    label$4 : {
     $7 = ($0 + $5 | 0) + $6 | 0;
     if ($7 >>> 0 > $0 >>> 0) {
      break label$4
     }
     $8 = 1;
     $1 = 1;
     break label$3;
    }
    $8 = 1;
    $1 = 1;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($8 & 3 | 0 | 0) != (3 | 0)) {
        break label$7
       }
       sift($0 | 0, $2 | 0, $3 | 0, $1 | 0, $4 + 16 | 0 | 0);
       shr($4 + 8 | 0 | 0, 2 | 0);
       $1 = $1 + 2 | 0;
       break label$6;
      }
      label$8 : {
       label$9 : {
        $8 = $1 + -1 | 0;
        if ((HEAP32[(($4 + 16 | 0) + ($8 << 2 | 0) | 0) >> 2] | 0) >>> 0 < ($7 - $0 | 0) >>> 0) {
         break label$9
        }
        trinkle($0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 | 0, 0 | 0, $4 + 16 | 0 | 0);
        break label$8;
       }
       sift($0 | 0, $2 | 0, $3 | 0, $1 | 0, $4 + 16 | 0 | 0);
      }
      label$10 : {
       if (($1 | 0) != (1 | 0)) {
        break label$10
       }
       shl($4 + 8 | 0 | 0, 1 | 0);
       $1 = 0;
       break label$6;
      }
      shl($4 + 8 | 0 | 0, $8 | 0);
      $1 = 1;
     }
     $8 = HEAP32[($4 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4 + 8 | 0) >> 2] = $8;
     $0 = $0 + $2 | 0;
     if ($0 >>> 0 < $7 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   trinkle($0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 | 0, 0 | 0, $4 + 16 | 0 | 0);
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        if (($1 | 0) != (1 | 0)) {
         break label$15
        }
        if (($8 | 0) != (1 | 0)) {
         break label$15
        }
        if (HEAP32[($4 + 12 | 0) >> 2] | 0) {
         break label$14
        }
        break label$1;
       }
       if (($1 | 0) > (1 | 0)) {
        break label$13
       }
      }
      $126 = $4 + 8 | 0;
      $8 = pntz($4 + 8 | 0 | 0) | 0;
      shr($126 | 0, $8 | 0);
      $1 = $8 + $1 | 0;
      $8 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      break label$12;
     }
     shl($4 + 8 | 0 | 0, 2 | 0);
     HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) ^ 7 | 0;
     shr($4 + 8 | 0 | 0, 1 | 0);
     $5 = $0 + $6 | 0;
     $7 = $1 + -2 | 0;
     trinkle($5 - (HEAP32[(($4 + 16 | 0) + ($7 << 2 | 0) | 0) >> 2] | 0) | 0 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $1 + -1 | 0 | 0, 1 | 0, $4 + 16 | 0 | 0);
     shl($4 + 8 | 0 | 0, 1 | 0);
     $8 = HEAP32[($4 + 8 | 0) >> 2] | 0 | 1 | 0;
     HEAP32[($4 + 8 | 0) >> 2] = $8;
     trinkle($5 | 0, $2 | 0, $3 | 0, $4 + 8 | 0 | 0, $7 | 0, 1 | 0, $4 + 16 | 0 | 0);
     $1 = $7;
    }
    $0 = $0 + $6 | 0;
    continue label$11;
   };
  }
  __stack_pointer = $4 + 208 | 0;
 }
 
 function sift($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $8 = 0, $5 = 0, $6 = 0, $10 = 0, $9 = 0, $11 = 0, $7 = 0;
  $5 = __stack_pointer - 240 | 0;
  __stack_pointer = $5;
  HEAP32[$5 >> 2] = $0;
  $6 = 1;
  label$1 : {
   if (($3 | 0) < (2 | 0)) {
    break label$1
   }
   $7 = 0 - $1 | 0;
   $6 = 1;
   $8 = $0;
   label$2 : while (1) {
    label$3 : {
     $8 = $8 + $7 | 0;
     $9 = $3 + -2 | 0;
     $10 = $8 - (HEAP32[($4 + ($9 << 2 | 0) | 0) >> 2] | 0) | 0;
     if ((FUNCTION_TABLE[$2 | 0]($0, $10) | 0 | 0) < (0 | 0)) {
      break label$3
     }
     if ((FUNCTION_TABLE[$2 | 0]($0, $8) | 0 | 0) > (-1 | 0)) {
      break label$1
     }
    }
    $11 = (FUNCTION_TABLE[$2 | 0]($10, $8) | 0 | 0) > (-1 | 0);
    $8 = $11 ? $10 : $8;
    HEAP32[($5 + ($6 << 2 | 0) | 0) >> 2] = $8;
    $6 = $6 + 1 | 0;
    $3 = $11 ? $3 + -1 | 0 : $9;
    if (($3 | 0) > (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  cycle($1 | 0, $5 | 0, $6 | 0);
  __stack_pointer = $5 + 240 | 0;
 }
 
 function shr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = $0;
    break label$1;
   }
   $3 = $0 + 4 | 0;
   $1 = $1 + -32 | 0;
   $2 = 0;
  }
  $3 = HEAP32[$3 >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2 >>> $1 | 0;
  HEAP32[$0 >> 2] = $2 << (32 - $1 | 0) | 0 | ($3 >>> $1 | 0) | 0;
 }
 
 function trinkle($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $8 = 0, $7 = 0, $9 = 0, $11 = 0, $10 = 0, $73 = 0;
  $7 = __stack_pointer - 240 | 0;
  __stack_pointer = $7;
  $8 = HEAP32[$3 >> 2] | 0;
  HEAP32[($7 + 232 | 0) >> 2] = $8;
  $3 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  HEAP32[$7 >> 2] = $0;
  HEAP32[($7 + 236 | 0) >> 2] = $3;
  $9 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($8 | 0) != (1 | 0)) {
       break label$4
      }
      if ($3) {
       break label$4
      }
      $3 = $0;
      break label$3;
     }
     $10 = 0 - $1 | 0;
     $8 = $0;
     $9 = 1;
     label$5 : while (1) {
      label$6 : {
       $11 = $6 + ($4 << 2 | 0) | 0;
       $3 = $8 - (HEAP32[$11 >> 2] | 0) | 0;
       if ((FUNCTION_TABLE[$2 | 0]($3, $0) | 0 | 0) >= (1 | 0)) {
        break label$6
       }
       $3 = $8;
       break label$3;
      }
      label$7 : {
       label$8 : {
        if ($5) {
         break label$8
        }
        if (($4 | 0) < (2 | 0)) {
         break label$8
        }
        $5 = HEAP32[($11 + -8 | 0) >> 2] | 0;
        $11 = $8 + $10 | 0;
        if ((FUNCTION_TABLE[$2 | 0]($11, $3) | 0 | 0) > (-1 | 0)) {
         break label$7
        }
        if ((FUNCTION_TABLE[$2 | 0]($11 - $5 | 0, $3) | 0 | 0) > (-1 | 0)) {
         break label$7
        }
       }
       HEAP32[($7 + ($9 << 2 | 0) | 0) >> 2] = $3;
       $73 = $7 + 232 | 0;
       $8 = pntz($7 + 232 | 0 | 0) | 0;
       shr($73 | 0, $8 | 0);
       $9 = $9 + 1 | 0;
       $4 = $8 + $4 | 0;
       $5 = 0;
       $8 = $3;
       if ((HEAP32[($7 + 232 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        continue label$5
       }
       $8 = $3;
       if (HEAP32[($7 + 236 | 0) >> 2] | 0) {
        continue label$5
       }
       break label$2;
      }
      break label$5;
     };
     $3 = $8;
     break label$2;
    }
    if ($5) {
     break label$1
    }
   }
   cycle($1 | 0, $7 | 0, $9 | 0);
   sift($3 | 0, $1 | 0, $2 | 0, $4 | 0, $6 | 0);
  }
  __stack_pointer = $7 + 240 | 0;
 }
 
 function shl($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 > 31 >>> 0) {
     break label$2
    }
    $2 = $0 + 4 | 0;
    $3 = HEAP32[$0 >> 2] | 0;
    break label$1;
   }
   $1 = $1 + -32 | 0;
   $3 = 0;
   $2 = $0;
  }
  $2 = HEAP32[$2 >> 2] | 0;
  HEAP32[$0 >> 2] = $3 << $1 | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $3 >>> (32 - $1 | 0) | 0 | ($2 << $1 | 0) | 0;
 }
 
 function pntz($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = __wasm_ctz_i32((HEAP32[$0 >> 2] | 0) + -1 | 0 | 0) | 0;
   if ($1) {
    break label$1
   }
   $0 = __wasm_ctz_i32(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0;
   return ($0 ? $0 + 32 | 0 : 0) | 0;
  }
  return $1 | 0;
 }
 
 function cycle($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $6 = 0, $7 = 0, $4 = 0;
  $3 = __stack_pointer - 256 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (($2 | 0) < (2 | 0)) {
    break label$1
   }
   $4 = $1 + ($2 << 2 | 0) | 0;
   HEAP32[$4 >> 2] = $3;
   if (!$0) {
    break label$1
   }
   $5 = $3;
   label$2 : while (1) {
    $6 = $0 >>> 0 < 256 >>> 0 ? $0 : 256;
    memcpy($5 | 0, HEAP32[$1 >> 2] | 0 | 0, $6 | 0) | 0;
    $5 = 0;
    label$3 : while (1) {
     $7 = $1 + ($5 << 2 | 0) | 0;
     $5 = $5 + 1 | 0;
     memcpy(HEAP32[$7 >> 2] | 0 | 0, HEAP32[($1 + ($5 << 2 | 0) | 0) >> 2] | 0 | 0, $6 | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $6 | 0;
     if (($5 | 0) != ($2 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $0 = $0 - $6 | 0;
    if (!$0) {
     break label$1
    }
    $5 = HEAP32[$4 >> 2] | 0;
    continue label$2;
   };
  }
  __stack_pointer = $3 + 256 | 0;
 }
 
 function atoi($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $5 = 0, $3 = 0, $4 = 0;
  label$1 : while (1) {
   $1 = $0;
   $0 = $1 + 1 | 0;
   if (isspace(HEAP8[$1 >> 0] | 0 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  $2 = 0;
  $3 = 0;
  $4 = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $5 = HEAP8[$1 >> 0] | 0;
     switch ($5 + -43 | 0 | 0) {
     case 0:
      break label$3;
     case 2:
      break label$4;
     default:
      break label$2;
     };
    }
    $3 = 1;
   }
   $5 = HEAP8[$0 >> 0] | 0;
   $1 = $0;
   $4 = $3;
  }
  label$5 : {
   if (!(isdigit($5 | 0) | 0)) {
    break label$5
   }
   label$6 : while (1) {
    $2 = (Math_imul($2, 10) - (HEAP8[$1 >> 0] | 0) | 0) + 48 | 0;
    $0 = HEAP8[($1 + 1 | 0) >> 0] | 0;
    $1 = $1 + 1 | 0;
    if (isdigit($0 | 0) | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return ($4 ? $2 : 0 - $2 | 0) | 0;
 }
 
 function atol($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $5 = 0, $3 = 0, $4 = 0;
  label$1 : while (1) {
   $1 = $0;
   $0 = $1 + 1 | 0;
   if (isspace(HEAP8[$1 >> 0] | 0 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  $2 = 0;
  $3 = 0;
  $4 = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $5 = HEAP8[$1 >> 0] | 0;
     switch ($5 + -43 | 0 | 0) {
     case 0:
      break label$3;
     case 2:
      break label$4;
     default:
      break label$2;
     };
    }
    $3 = 1;
   }
   $5 = HEAP8[$0 >> 0] | 0;
   $1 = $0;
   $4 = $3;
  }
  label$5 : {
   if (!(isdigit($5 | 0) | 0)) {
    break label$5
   }
   label$6 : while (1) {
    $2 = (Math_imul($2, 10) - (HEAP8[$1 >> 0] | 0) | 0) + 48 | 0;
    $0 = HEAP8[($1 + 1 | 0) >> 0] | 0;
    $1 = $1 + 1 | 0;
    if (isdigit($0 | 0) | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return ($4 ? $2 : 0 - $2 | 0) | 0;
 }
 
 function strtox($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $36$hi = 0, $42 = 0, $42$hi = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  memset($4 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4 + 92 | 0) >> 2] = -1;
  HEAP32[($4 + 60 | 0) >> 2] = $1;
  HEAP32[($4 + 24 | 0) >> 2] = -1;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  i64toi32_i32$0 = 0;
  __shlim($4 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  __floatscan($4 | 0, $4 + 16 | 0 | 0, $3 | 0, 1 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  $5 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[$4 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  $6 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $32 = $2;
   $33 = $1;
   $34 = $1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[($4 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4 + 140 | 0) >> 2] | 0;
   $36 = i64toi32_i32$0;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4 + 20 | 0) >> 2] | 0) - (HEAP32[($4 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $42 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $36$hi;
   i64toi32_i32$2 = $36;
   i64toi32_i32$0 = $42$hi;
   i64toi32_i32$3 = $42;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$32 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $33 : $34 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $6;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $4 + 160 | 0;
 }
 
 function strtod($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11 = 0, $11$hi = 0, $13 = 0, $13$hi = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  strtox($2 | 0, $0 | 0, $1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 4 | 0) >> 2] | 0;
  $11 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $13 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3 = +__trunctfdf2($11 | 0, i64toi32_i32$0 | 0, $13 | 0, i64toi32_i32$1 | 0);
  __stack_pointer = $2 + 16 | 0;
  return +$3;
 }
 
 function dummy_2($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 | 0;
 }
 
 function __lctrans($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return dummy_2($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function __emscripten_environ_constructor() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  label$1 : {
   if (__wasi_environ_sizes_get($0 + 12 | 0 | 0, $0 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1 = dlmalloc(((HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 87848 | 0) >> 2] = $1;
   if (!$1) {
    break label$1
   }
   label$2 : {
    $1 = dlmalloc(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) | 0;
    if ($1) {
     break label$2
    }
    HEAP32[(0 + 87848 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[(0 + 87848 | 0) >> 2] | 0) + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
   if (!(__wasi_environ_get(HEAP32[(0 + 87848 | 0) >> 2] | 0 | 0, $1 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 87848 | 0) >> 2] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function strncmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  $3 = 0;
  label$2 : {
   $4 = HEAPU8[$0 >> 0] | 0;
   if (!$4) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5 = HEAPU8[$1 >> 0] | 0;
     if (($4 & 255 | 0 | 0) != ($5 | 0)) {
      break label$3
     }
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$3
     }
     if (!$5) {
      break label$3
     }
     $1 = $1 + 1 | 0;
     $4 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     $0 = $0 + 1 | 0;
     if ($4) {
      continue label$4
     }
     break label$2;
    };
   }
   $3 = $4;
  }
  return ($3 & 255 | 0) - (HEAPU8[$1 >> 0] | 0) | 0 | 0;
 }
 
 function getenv($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $4 = 0, $2 = 0;
  $1 = 0;
  $2 = strlen($0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 87848 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0 >> 0] | 0)) {
    break label$1
   }
   if (strchr($0 | 0, 61 | 0) | 0) {
    break label$1
   }
   $1 = 0;
   $3 = HEAP32[(HEAP32[(0 + 87848 | 0) >> 2] | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4 = strncmp($0 | 0, $3 | 0, $2 | 0) | 0;
     $3 = HEAP32[(0 + 87848 | 0) >> 2] | 0;
     label$4 : {
      if ($4) {
       break label$4
      }
      $4 = (HEAP32[($3 + ($1 << 2 | 0) | 0) >> 2] | 0) + $2 | 0;
      if ((HEAPU8[$4 >> 0] | 0 | 0) == (61 | 0)) {
       break label$2
      }
     }
     $1 = $1 + 1 | 0;
     $3 = HEAP32[($3 + ($1 << 2 | 0) | 0) >> 2] | 0;
     if ($3) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $1 = $4 + 1 | 0;
  }
  return $1 | 0;
 }
 
 function __lock($0) {
  $0 = $0 | 0;
 }
 
 function __unlock($0) {
  $0 = $0 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[(__errno_location() | 0) >> 2] = $0;
  return -1 | 0;
 }
 
 function __pthread_self() {
  return 50040 | 0;
 }
 
 function __letf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $6 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    $4 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __getf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $4 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __multi3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, $9$hi = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0, $16 = 0, $16$hi = 0, $20 = 0, $20$hi = 0, $21 = 0, $21$hi = 0, $5 = 0, $5$hi = 0, $30$hi = 0, $33 = 0, $33$hi = 0, $36$hi = 0, $37 = 0, $37$hi = 0, $39 = 0, $39$hi = 0, $42 = 0, $42$hi = 0, $45$hi = 0, $47 = 0, $49$hi = 0, $51 = 0, $51$hi = 0, $52 = 0;
  $6 = $0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4 = $46;
  $4$hi = i64toi32_i32$2;
  $16 = $4;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2 = $48;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $2 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47 = $0;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47;
  HEAP32[i64toi32_i32$2 >> 2] = $52;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __fe_getround() {
  return 0 | 0;
 }
 
 function __fe_raise_inexact() {
  return 0 | 0;
 }
 
 function __addtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $9 = 0, $10 = 0, $5 = 0, $6$hi = 0, $6 = 0, $7$hi = 0, $8$hi = 0, $7 = 0, $8 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $11 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $12 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $21 = 0, $27 = 0, $28$hi = 0, $32 = 0, $39 = 0, $43 = 0, $44$hi = 0, $48 = 0, $53 = 0, $55 = 0, $63 = 0, $65 = 0, $73 = 0, $73$hi = 0, $79 = 0, $79$hi = 0, $83 = 0, $83$hi = 0, $93 = 0, $93$hi = 0, $121 = 0, $124 = 0, $151 = 0, $152 = 0, $152$hi = 0, $153 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183 = 0, $184 = 0, $184$hi = 0, $185 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $214 = 0, $214$hi = 0, $216$hi = 0, $242 = 0, $242$hi = 0, $244 = 0, $244$hi = 0, $248 = 0, $248$hi = 0, $250 = 0, $251$hi = 0, $269$hi = 0, $272 = 0, $273$hi = 0, $282 = 0, $283 = 0, $283$hi = 0, $284 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309 = 0, $309$hi = 0, $315 = 0, $316$hi = 0, $322 = 0, $322$hi = 0, $324$hi = 0, $325 = 0, $325$hi = 0, $327 = 0, $327$hi = 0, $354 = 0, $354$hi = 0, $356 = 0, $356$hi = 0, $360 = 0, $360$hi = 0, $362 = 0, $363$hi = 0, $369 = 0, $369$hi = 0, $371$hi = 0, $375$hi = 0, $377 = 0, $377$hi = 0, $380$hi = 0, $386 = 0, $386$hi = 0, $390$hi = 0, $394 = 0, $395$hi = 0, $400 = 0, $400$hi = 0, $408 = 0, $409$hi = 0, $411 = 0, $411$hi = 0, $417 = 0, $418$hi = 0, $422 = 0, $423$hi = 0, $426 = 0, $426$hi = 0, $432 = 0, $433$hi = 0, $437 = 0, $438$hi = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $8 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $8$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     $27 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $8;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7 = i64toi32_i32$5;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21 : $32) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     $43 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $7 = i64toi32_i32$3;
     $7$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39 : $48) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53 = !($1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $8;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53 : $55) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63 = !($3 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$4 = $6;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63 : $65) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $9 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $9;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $8;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $6;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3 = $1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4 = $2;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   $121 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$1 = $8;
   $124 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $6;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $8;
   $10 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121 : $124;
   i64toi32_i32$4 = $10;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $6 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4 : $2;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $8 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $7 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $10;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2 : $4;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $135 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $135 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $11 = $135 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$4 = $8;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $136 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $136 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $9 = $136 & 32767 | 0;
    if ($9) {
     break label$8
    }
    $151 = $5 + 96 | 0;
    i64toi32_i32$5 = $6$hi;
    $152 = $6;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    $153 = $7;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $7$hi;
    $9 = !($7 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $9;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $6 : $7;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $137 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $137 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $137;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $9 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $9 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    __ashlti3($151 | 0, $152 | 0, i64toi32_i32$3 | 0, $153 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $9 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $7 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $6 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $10;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1 : $3;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($11) {
     break label$9
    }
    $183 = $5 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184 = $3;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185 = $4;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $10 = !($4 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $10;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3 : $4;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $138;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $10 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    __ashlti3($183 | 0, $184 | 0, i64toi32_i32$4 | 0, $185 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $11 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $139 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $139 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208 = $139;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $140 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $140 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $140;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$1 = $7;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $141 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $141 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214 = $141;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $142 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $142 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $142;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $143 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $143 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3 = $143;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $7 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $7$hi = i64toi32_i32$1;
   label$10 : {
    $10 = $9 - $11 | 0;
    if (!$10) {
     break label$10
    }
    label$11 : {
     if ($10 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    __ashlti3($5 + 64 | 0 | 0, $3 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$4 | 0, 128 - $10 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    __lshrti3($5 + 48 | 0 | 0, $3 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$1 | 0, $10 | 0);
    i64toi32_i32$3 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $144 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $144 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2 = $144;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $145 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $146 = 0
       } else {
        $146 = 1
       }
       $147 = $146;
      } else {
       $147 = 0
      }
      $145 = $147;
     }
     if ($145) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3;
      $272 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282 = $5 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283 = $1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284 = $4;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $10 = !($4 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $10;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1 : $4;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $148 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $148 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $148;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $10 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $10 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     __ashlti3($282 | 0, $283 | 0, i64toi32_i32$3 | 0, $284 | 0, i64toi32_i32$2 | 0, $10 | 0);
     $9 = $9 - $10 | 0;
     i64toi32_i32$0 = $5 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3;
    $315 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $149 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $149 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322 = $149;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $150 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $150 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $150;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $9 = $9 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $154 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $154 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4 = $154;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$3 = $8;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($9 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $10 = 0;
   label$16 : {
    label$17 : {
     if (($9 | 0) <= (0 | 0)) {
      break label$17
     }
     $10 = $9;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    __ashlti3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$4 | 0, $9 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    __lshrti3($5 | 0, $1 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$3 | 0, 1 - $9 | 0 | 0);
    i64toi32_i32$5 = $5;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $155 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $155 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $369 = $155;
   $369$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $156 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $156 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $371$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $369$hi;
   i64toi32_i32$3 = $369;
   i64toi32_i32$2 = $371$hi;
   i64toi32_i32$5 = $156;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $157 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $157 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $157;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $375$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $375$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $377 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $377$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $10;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $380$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $377$hi;
   i64toi32_i32$2 = $377;
   i64toi32_i32$4 = $380$hi;
   i64toi32_i32$5 = $158;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $9 = $1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch (__fe_getround() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386 = $4;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $9 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3;
       $394 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($9 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3 = $1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400 = $4;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2;
       $408 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411 = $4;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($9 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3;
       $422 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3 = $1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426 = $4;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432 = !($2 | i64toi32_i32$2 | 0) & ($9 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     $437 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$9) {
     break label$1
    }
   }
   __fe_raise_inexact() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  __stack_pointer = $5 + 112 | 0;
 }
 
 function __extendsftf2($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $2 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0, $3 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $38 = 0, $38$hi = 0, $42$hi = 0, $48 = 0, $49 = 0, $49$hi = 0, $53$hi = 0, $54 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
    $4 = $3 & 2147483647 | 0;
    if (($4 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30 = $4;
   $4 = Math_clz32($4);
   i64toi32_i32$5 = 0;
   __ashlti3($2 | 0, $30 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 + 81 | 0 | 0);
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49 = $5;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __trunctfsf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $3 = 0, $3$hi = 0, $5 = 0, $4 = 0, $2 = 0, i64toi32_i32$2 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $20 = 0, $24 = 0, $34 = 0, $34$hi = 0, $42 = 0, $44 = 0, $81 = 0, $81$hi = 0, $83 = 0, $83$hi = 0, $87 = 0, $87$hi = 0, $89 = 0, $90$hi = 0, $93 = 0, $97 = 0, $105 = 0, $105$hi = 0, $114 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = $1 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4 = $37;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20 = !($0 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20 : $24) {
      break label$3
     }
     $5 = $4 + 1073741825 | 0;
     break label$1;
    }
    $5 = $4 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $5 = $5 + ($4 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42 : $44) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $5 = $38 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $5 = 2139095040;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $5 = 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4 = $39;
   if ($4 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $3 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$3 | 0, $4 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$1 | 0, 16257 - $4 | 0 | 0);
   i64toi32_i32$4 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $5 = $40;
   label$5 : {
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93 = !($0 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93 : $97) {
     break label$5
    }
    $5 = $5 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $5 = ($5 & 1 | 0) + $5 | 0;
  }
  __stack_pointer = $2 + 32 | 0;
  $114 = $5;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114 | ($41 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function __extenddftf2($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $4$hi = 0, $2 = 0, $3 = 0, $3$hi = 0, $5 = 0, $5$hi = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $31 = 0, $32 = 0, $33 = 0, $33$hi = 0, $37 = 0, $50 = 0, $50$hi = 0, $54$hi = 0, $63 = 0, $63$hi = 0, $64 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $5 = $26;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $5 = $28;
    $5$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $4$hi;
    if (!!($4 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   $32 = $2;
   i64toi32_i32$3 = $4$hi;
   $33 = $4;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   $37 = Math_clz32($3) + 32 | 0;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37 : Math_clz32($30);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   __ashlti3($32 | 0, $33 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $6 + 49 | 0 | 0);
   i64toi32_i32$5 = $2 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $6 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $5 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $0;
  HEAP32[i64toi32_i32$3 >> 2] = $5;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$4 = $4;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __multf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5 = 0, $10$hi = 0, $10 = 0, $8$hi = 0, $7$hi = 0, $6$hi = 0, $11$hi = 0, $8 = 0, $14 = 0, $11 = 0, $7 = 0, $6 = 0, $17$hi = 0, $16 = 0, $17 = 0, $9$hi = 0, $12$hi = 0, $13$hi = 0, $15 = 0, $9 = 0, $12 = 0, $13 = 0, $19$hi = 0, $22$hi = 0, $19 = 0, $18 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $254 = 0, $256 = 0, $20 = 0, $257 = 0, $258 = 0, $21 = 0, $22 = 0, $259 = 0, $24 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $29 = 0, $29$hi = 0, $31$hi = 0, $34 = 0, $34$hi = 0, $36$hi = 0, $39 = 0, $39$hi = 0, $43$hi = 0, $70 = 0, $74 = 0, $81 = 0, $85 = 0, $94 = 0, $94$hi = 0, $106 = 0, $106$hi = 0, $128 = 0, $129 = 0, $129$hi = 0, $130 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150 = 0, $150$hi = 0, $155$hi = 0, $162 = 0, $163 = 0, $163$hi = 0, $164 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186 = 0, $186$hi = 0, $191$hi = 0, $194 = 0, $194$hi = 0, $196$hi = 0, $207 = 0, $207$hi = 0, $215 = 0, $215$hi = 0, $222 = 0, $222$hi = 0, $227 = 0, $227$hi = 0, $236 = 0, $236$hi = 0, $243 = 0, $243$hi = 0, $245 = 0, $245$hi = 0, $247 = 0, $247$hi = 0, $250 = 0, $252$hi = 0, $253 = 0, $253$hi = 0, $255 = 0, $255$hi = 0, $264 = 0, $264$hi = 0, $269 = 0, $269$hi = 0, $277 = 0, $277$hi = 0, $280$hi = 0, $23 = 0, $296 = 0, $296$hi = 0, $300 = 0, $301 = 0, $301$hi = 0, $305 = 0, $305$hi = 0, $309 = 0, $310$hi = 0, $311 = 0, $311$hi = 0, $312 = 0, $312$hi = 0, $315 = 0, $316$hi = 0, $319 = 0, $320$hi = 0, $321$hi = 0, $325 = 0, $326$hi = 0, $327$hi = 0, $330 = 0, $330$hi = 0, $331 = 0, $331$hi = 0, $338 = 0, $338$hi = 0, $344 = 0, $344$hi = 0, $346$hi = 0, $347 = 0, $347$hi = 0, $348 = 0, $348$hi = 0, $349 = 0, $349$hi = 0, $351$hi = 0, $355 = 0, $356$hi = 0, $357 = 0, $357$hi = 0, $358 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $363 = 0, $364$hi = 0, $367 = 0, $368$hi = 0, $369$hi = 0, $372 = 0, $373$hi = 0, $375$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382 = 0, $382$hi = 0, $383 = 0, $383$hi = 0, $386 = 0, $387$hi = 0, $390 = 0, $391$hi = 0, $392$hi = 0, $396 = 0, $397$hi = 0, $407 = 0, $407$hi = 0, $409$hi = 0, $412 = 0, $412$hi = 0, $414$hi = 0, $418 = 0, $418$hi = 0, $420$hi = 0, $454 = 0, $454$hi = 0, $456 = 0, $456$hi = 0, $457 = 0, $457$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $465 = 0, $466$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $484$hi = 0, $486 = 0, $486$hi = 0, $492 = 0, $498 = 0, $498$hi = 0, $503 = 0, $504$hi = 0, $508 = 0, $508$hi = 0, $512 = 0, $512$hi = 0, $515 = 0, $515$hi = 0, $519 = 0, $520$hi = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $228;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $6 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34 = $230;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $7 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39 = $232;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $8 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $8;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $9 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $10 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $11 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $11;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12 = $234;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$1 = $8;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13 = $235;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $14 = $237 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $15 = $238 & 32767 | 0;
     if (($15 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $16 = 0;
     if (($14 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70 = !($1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $17 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $17;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $17;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70 : $74) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $10 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81 = !($3 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81 : $85) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $10 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $10 = 0;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $10 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $10 = 0;
      $10$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $10 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $10$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$1 = $17;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $16 = 0;
    label$12 : {
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128 = $5 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129 = $1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     $130 = $11;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     $16 = !($11 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $16;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1 : $11;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $16 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     __ashlti3($128 | 0, $129 | 0, i64toi32_i32$5 | 0, $130 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $16 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150 = $240;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $11 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $12 = $242;
     $12$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162 = $5 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163 = $3;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    $164 = $8;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $8$hi;
    $18 = !($8 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $18;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3 : $8;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $18 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $18 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    __ashlti3($162 | 0, $163 | 0, i64toi32_i32$2 | 0, $164 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $16 = ($16 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186 = $246;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $9 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194 = $249;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $7 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $13 = $252;
    $13$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$2 = $7;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$1 = $6;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $6 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $8 = $256;
   $8$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $7 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$5 = $8;
   i64toi32_i32$3 = 0;
   $227 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$5 = $11;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $8 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $8 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $17 = i64toi32_i32$2;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $11 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $9 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   $245 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247 = $257;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$2 = $6;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19;
   $250 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$5 | 0, $8 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $12 = i64toi32_i32$2;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($11 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $13 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $14 = (($15 + $14 | 0) + $16 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = __wasm_i64_mul($11 | 0, i64toi32_i32$2 | 0, $8 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24;
     $300 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301 = $300;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2;
     $309 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312 = $3;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$2 = $17;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20;
     $315 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9;
     i64toi32_i32$5 = $17;
     $319 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     $325 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1 | 0, i64toi32_i32$5 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = __wasm_i64_mul($11 | 0, i64toi32_i32$5 | 0, $6 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344 = $260;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349 = $2;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2;
     $355 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358 = $1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = $13;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360 = $263;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$4 = $12;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21;
     $363 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22;
     i64toi32_i32$3 = $12;
     $367 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22;
     $372 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1;
     $380 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383 = $3;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $9;
     $386 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23;
     i64toi32_i32$3 = $19;
     $390 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3;
     $396 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $14 = $14 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $266;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407 = $267;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $270 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $270 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $412 = $270;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$5 = $7;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $7 = $272;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418 = $3;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($14 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$5 = $10;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $10 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($14 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $15 = 1 - $14 | 0;
      if ($15 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $4$hi;
     $14 = $14 + 127 | 0;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$5 = $4$hi;
     __ashlti3($5 + 48 | 0 | 0, $7 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$5 | 0, $14 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     __ashlti3($5 + 32 | 0 | 0, $2 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$1 | 0, $14 | 0);
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$5 = $4$hi;
     __lshrti3($5 + 16 | 0 | 0, $7 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$5 | 0, $15 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     __lshrti3($5 | 0, $2 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$1 | 0, $15 | 0);
     i64toi32_i32$0 = $5;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $7 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $14;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$1 = $10;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $10 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $7$hi;
    $492 = !($7 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276 = 0
      } else {
       $276 = 1
      }
      $278 = $276;
     } else {
      $278 = 0
     }
     $275 = $278;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492 : $275) {
     break label$19
    }
    i64toi32_i32$1 = $10$hi;
    $498 = $10;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2;
    $503 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$4 = $7;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1 = $2;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $10$hi;
   $512 = $10;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2;
   $519 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $10 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0;
  HEAP32[i64toi32_i32$4 >> 2] = $1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $10$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $10;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $5 + 96 | 0;
 }
 
 function __subtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5 = 0, $14 = 0, $14$hi = 0, $17 = 0, $20 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  __addtf3($5 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17 = i64toi32_i32$3;
  i64toi32_i32$3 = $0;
  HEAP32[i64toi32_i32$3 >> 2] = $17;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$4 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $21 = 0, $22 = 0, $19 = 0, $27 = 0, $27$hi = 0, $31$hi = 0, $32 = 0, $32$hi = 0, $36$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   $5 = $1 >> 31 | 0;
   $5 = ($1 + $5 | 0) ^ $5 | 0;
   i64toi32_i32$0 = 0;
   $19 = $5;
   $5 = Math_clz32($5);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $19 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $5 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $3;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __divtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15$hi = 0, $12$hi = 0, $15 = 0, $16$hi = 0, $12 = 0, i64toi32_i32$6 = 0, $5 = 0, $18$hi = 0, $19$hi = 0, $17$hi = 0, $16 = 0, $18 = 0, $19 = 0, $7$hi = 0, $17 = 0, $8$hi = 0, $20$hi = 0, $7 = 0, $8 = 0, $20 = 0, $6$hi = 0, $6 = 0, $11 = 0, $9 = 0, $14 = 0, $14$hi = 0, $10 = 0, $21$hi = 0, $13 = 0, $470 = 0, $471 = 0, $475 = 0, $476 = 0, $478 = 0, $479 = 0, $480 = 0, $481 = 0, $482 = 0, $484 = 0, $485 = 0, $486 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $507 = 0, $508 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $530 = 0, $21 = 0, $531 = 0, $532 = 0, $533 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $560 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $572 = 0, $573 = 0, $575 = 0, $576 = 0, $48 = 0, $52 = 0, $59 = 0, $63 = 0, $72 = 0, $72$hi = 0, $77 = 0, $77$hi = 0, $85 = 0, $85$hi = 0, $101 = 0, $102 = 0, $102$hi = 0, $103 = 0, $103$hi = 0, $110$hi = 0, $113$hi = 0, $128 = 0, $129 = 0, $129$hi = 0, $130 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $155 = 0, $157 = 0, $157$hi = 0, $161$hi = 0, $172 = 0, $172$hi = 0, $173$hi = 0, $176 = 0, $179 = 0, $179$hi = 0, $184$hi = 0, $194 = 0, $194$hi = 0, $195$hi = 0, $197 = 0, $200 = 0, $200$hi = 0, $205$hi = 0, $215 = 0, $215$hi = 0, $216$hi = 0, $218 = 0, $221 = 0, $221$hi = 0, $226$hi = 0, $236 = 0, $236$hi = 0, $237$hi = 0, $239 = 0, $242 = 0, $242$hi = 0, $247$hi = 0, $256 = 0, $256$hi = 0, $257$hi = 0, $265 = 0, $265$hi = 0, $269$hi = 0, $274 = 0, $274$hi = 0, $279 = 0, $279$hi = 0, $286 = 0, $286$hi = 0, $289 = 0, $289$hi = 0, $292 = 0, $294$hi = 0, $295 = 0, $295$hi = 0, $298 = 0, $298$hi = 0, $299 = 0, $299$hi = 0, $305 = 0, $305$hi = 0, $309 = 0, $310$hi = 0, $311 = 0, $311$hi = 0, $312 = 0, $312$hi = 0, $313 = 0, $313$hi = 0, $319 = 0, $319$hi = 0, $320 = 0, $320$hi = 0, $325 = 0, $325$hi = 0, $332 = 0, $332$hi = 0, $333$hi = 0, $335 = 0, $336 = 0, $336$hi = 0, $338 = 0, $338$hi = 0, $341 = 0, $343$hi = 0, $344 = 0, $344$hi = 0, $347 = 0, $347$hi = 0, $348$hi = 0, $349$hi = 0, $353 = 0, $354$hi = 0, $355$hi = 0, $357 = 0, $358$hi = 0, $359$hi = 0, $366 = 0, $366$hi = 0, $370 = 0, $370$hi = 0, $371 = 0, $371$hi = 0, $375 = 0, $375$hi = 0, $378$hi = 0, $383 = 0, $383$hi = 0, $385 = 0, $385$hi = 0, $388 = 0, $390$hi = 0, $391 = 0, $391$hi = 0, $394 = 0, $394$hi = 0, $395$hi = 0, $396 = 0, $396$hi = 0, $397 = 0, $397$hi = 0, $410 = 0, $410$hi = 0, $417 = 0, $417$hi = 0, $418$hi = 0, $420 = 0, $421 = 0, $421$hi = 0, $423 = 0, $423$hi = 0, $426 = 0, $428$hi = 0, $429 = 0, $429$hi = 0, $432 = 0, $432$hi = 0, $433$hi = 0, $434$hi = 0, $438 = 0, $439$hi = 0, $440 = 0, $440$hi = 0, $445 = 0, $446$hi = 0, $451 = 0, $451$hi = 0, $453 = 0, $453$hi = 0, $455$hi = 0, $460 = 0, $460$hi = 0, $464 = 0, $464$hi = 0, $468 = 0, $468$hi = 0, $472 = 0, $473 = 0, $473$hi = 0, $474 = 0, $474$hi = 0, $477 = 0, $477$hi = 0, $483 = 0, $483$hi = 0, $487 = 0, $488$hi = 0, $489$hi = 0, $492 = 0, $492$hi = 0, $493 = 0, $493$hi = 0, $500 = 0, $500$hi = 0, $506 = 0, $506$hi = 0, $508$hi = 0, $509 = 0, $509$hi = 0, $510 = 0, $510$hi = 0, $511 = 0, $511$hi = 0, $513$hi = 0, $517 = 0, $518$hi = 0, $519 = 0, $519$hi = 0, $520 = 0, $520$hi = 0, $529 = 0, $529$hi = 0, $534 = 0, $534$hi = 0, $535 = 0, $535$hi = 0, $536 = 0, $536$hi = 0, $541 = 0, $541$hi = 0, $545 = 0, $546$hi = 0, $547$hi = 0, $551 = 0, $552$hi = 0, $553 = 0, $553$hi = 0, $554 = 0, $554$hi = 0, $561 = 0, $561$hi = 0, $566 = 0, $566$hi = 0, $571 = 0, $571$hi = 0, $574 = 0, $574$hi = 0, $577 = 0, $578$hi = 0, $581 = 0, $582$hi = 0, $583$hi = 0, $586 = 0, $587$hi = 0, $589$hi = 0, $590 = 0, $590$hi = 0, $594 = 0, $595$hi = 0, $596 = 0, $596$hi = 0, $597 = 0, $597$hi = 0, $598 = 0, $598$hi = 0, $605 = 0, $605$hi = 0, $608 = 0, $608$hi = 0, $611 = 0, $613$hi = 0, $614 = 0, $614$hi = 0, $618 = 0, $619 = 0, $619$hi = 0, $620 = 0, $620$hi = 0, $622$hi = 0, $623$hi = 0, $625 = 0, $626$hi = 0, $627$hi = 0, $631 = 0, $632$hi = 0, $637$hi = 0, $646 = 0, $647$hi = 0, $648 = 0, $648$hi = 0, $651 = 0, $651$hi = 0, $657 = 0, $657$hi = 0, $658 = 0, $658$hi = 0, $662 = 0, $662$hi = 0, $667 = 0, $668$hi = 0, $669 = 0, $669$hi = 0, $670 = 0, $670$hi = 0, $672$hi = 0, $673 = 0, $673$hi = 0, $674 = 0, $674$hi = 0, $676$hi = 0, $677 = 0, $677$hi = 0, $678$hi = 0, $681 = 0, $681$hi = 0, $682$hi = 0, $685 = 0, $685$hi = 0, $687 = 0, $687$hi = 0, $689$hi = 0, $578 = 0, $691 = 0, $691$hi = 0, $694 = 0, $694$hi = 0, $695 = 0, $695$hi = 0, $696$hi = 0, $699 = 0, $699$hi = 0, $700 = 0, $700$hi = 0, $702 = 0, $702$hi = 0, $705 = 0, $707$hi = 0, $708 = 0, $708$hi = 0, $709$hi = 0, $710$hi = 0, $720 = 0, $720$hi = 0, $722 = 0, $722$hi = 0, $724$hi = 0, $734 = 0, $735$hi = 0, $736 = 0, $736$hi = 0, $739 = 0, $739$hi = 0, $740 = 0, $740$hi = 0, $745 = 0, $745$hi = 0, $746 = 0, $746$hi = 0, $748$hi = 0, $754 = 0, $754$hi = 0, $759 = 0, $760$hi = 0, $761 = 0, $761$hi = 0, $762 = 0, $762$hi = 0, $764$hi = 0, $765 = 0, $765$hi = 0, $766 = 0, $766$hi = 0, $768$hi = 0, $769 = 0, $769$hi = 0, $770 = 0, $770$hi = 0, $775 = 0, $775$hi = 0, $776$hi = 0, $779 = 0, $779$hi = 0, $781 = 0, $781$hi = 0, $784 = 0, $784$hi = 0, $786$hi = 0, $579 = 0, $788 = 0, $788$hi = 0, $789$hi = 0, $792 = 0, $792$hi = 0, $793 = 0, $793$hi = 0, $794 = 0, $794$hi = 0, $796 = 0, $796$hi = 0, $799 = 0, $801$hi = 0, $802 = 0, $802$hi = 0, $803$hi = 0, $804$hi = 0, $820 = 0, $820$hi = 0, $821 = 0, $821$hi = 0, $823$hi = 0, $825 = 0, $827 = 0, $827$hi = 0, $829$hi = 0, $833 = 0, $837 = 0, $838$hi = 0, $842 = 0, $843$hi = 0, $852 = 0, $852$hi = 0, $853 = 0, $853$hi = 0, $855$hi = 0, $857 = 0, $859 = 0, $859$hi = 0, $861$hi = 0, $865 = 0, $869 = 0, $870$hi = 0, $874 = 0, $875$hi = 0, $876 = 0, $876$hi = 0, $879$hi = 0, $880$hi = 0, $896 = 0;
  $5 = __stack_pointer - 192 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $7 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $470 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $470 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $470 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $471 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $471 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $10 = $471 & 32767 | 0;
      if (($10 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$4
      }
      $11 = 0;
      if (($9 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$3
      }
     }
     label$5 : {
      i64toi32_i32$0 = $1$hi;
      $48 = !($1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $12 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $12;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $52 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $12;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48 : $52) {
       break label$5
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $8 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $8$hi = i64toi32_i32$0;
      break label$2;
     }
     label$6 : {
      i64toi32_i32$0 = $3$hi;
      $59 = !($3 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $63 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $59 : $63) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $8 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1 = $3;
      $1$hi = i64toi32_i32$0;
      break label$2;
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$1 = $12;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $72 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$2 = $72;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$7
      }
      label$8 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $77 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3;
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$0 = $77;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$8
       }
       i64toi32_i32$2 = 0;
       $1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $8 = 0;
       $8$hi = i64toi32_i32$2;
       break label$2;
      }
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$1 = $8;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $8 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $8$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$2;
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $85 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $85$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $85$hi;
      i64toi32_i32$0 = $85;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$9
      }
      i64toi32_i32$1 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = $12;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$0 = $8;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $8 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$2;
     }
     $11 = 0;
     label$11 : {
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$11
      }
      $101 = $5 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $102 = $1;
      $102$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $7$hi;
      $103 = $7;
      $103$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $7$hi;
      $11 = !($7 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $11;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1 : $7;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $475 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $475 = i64toi32_i32$1
      }
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $113$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $110$hi;
      i64toi32_i32$0 = $475;
      i64toi32_i32$3 = $113$hi;
      i64toi32_i32$1 = $11 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $11 = i64toi32_i32$2;
      i64toi32_i32$5 = $102$hi;
      i64toi32_i32$0 = $103$hi;
      __ashlti3($101 | 0, $102 | 0, i64toi32_i32$5 | 0, $103 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $11 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $7 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     $128 = $5 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $129 = $3;
     $129$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $6$hi;
     $130 = $6;
     $130$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $6$hi;
     $13 = !($6 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $13;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3 : $6;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476 = i64toi32_i32$4
     }
     $137$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $140$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $137$hi;
     i64toi32_i32$5 = $476;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$4 = $13 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $13 = i64toi32_i32$0;
     i64toi32_i32$2 = $129$hi;
     i64toi32_i32$5 = $130$hi;
     __ashlti3($128 | 0, $129 | 0, i64toi32_i32$2 | 0, $130 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $11 = (i64toi32_i32$0 + $11 | 0) + -16 | 0;
     i64toi32_i32$3 = $5 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $6 = i64toi32_i32$5;
     $6$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $155 = $5 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $478 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $478 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $157 = $478;
    $157$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $14 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $14$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $14;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $479 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $479 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $161$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $157$hi;
    i64toi32_i32$3 = $157;
    i64toi32_i32$2 = $161$hi;
    i64toi32_i32$4 = $479;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    __multi3($155 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $172 = i64toi32_i32$4;
    $172$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $172$hi;
    i64toi32_i32$0 = $172;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $173$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $173$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    __multi3($5 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $176 = $5 + 112 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $480 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $480 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $179 = $480;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $481 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $481 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $179$hi;
    i64toi32_i32$5 = $179;
    i64toi32_i32$2 = $184$hi;
    i64toi32_i32$1 = $481;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    __multi3($176 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $194 = i64toi32_i32$1;
    $194$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $194$hi;
    i64toi32_i32$2 = $194;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$2 = 0;
    __multi3($5 + 96 | 0 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $197 = $5 + 80 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $482 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $482 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $200 = $482;
    $200$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $484 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $484 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $205$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $200$hi;
    i64toi32_i32$5 = $200;
    i64toi32_i32$0 = $205$hi;
    i64toi32_i32$3 = $484;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    __multi3($197 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $216$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $216$hi;
    i64toi32_i32$0 = 0;
    __multi3($5 + 64 | 0 | 0, $4 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $218 = $5 + 48 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $485 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $485 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $221 = $485;
    $221$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $486 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $486 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $226$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $221$hi;
    i64toi32_i32$5 = $221;
    i64toi32_i32$2 = $226$hi;
    i64toi32_i32$4 = $486;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    __multi3($218 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236 = i64toi32_i32$4;
    $236$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $236$hi;
    i64toi32_i32$2 = $236;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = 0;
    __multi3($5 + 32 | 0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $239 = $5 + 16 | 0;
    i64toi32_i32$5 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $488 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $488 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $242 = $488;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $489 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $489 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $247$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$5 = $242;
    i64toi32_i32$0 = $247$hi;
    i64toi32_i32$1 = $489;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    __multi3($239 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $256 = i64toi32_i32$1;
    $256$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $256$hi;
    i64toi32_i32$0 = $256;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $257$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $257$hi;
    i64toi32_i32$0 = 0;
    __multi3($5 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $9 = $11 + ($10 - $9 | 0) | 0;
    label$12 : {
     label$13 : {
      i64toi32_i32$5 = $5;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $490 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $490 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $265 = $490;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $491 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $491 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $265$hi;
      i64toi32_i32$5 = $265;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$3 = $491;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $12 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $274 = $4;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $494 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $494 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $15 = $494;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($274 | 0, i64toi32_i32$2 | 0, $15 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      $279 = i64toi32_i32$4;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$0 = $12;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $495 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $495 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $12 = $495;
      $12$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $17 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12 | 0, i64toi32_i32$0 | 0, $17 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $286 = i64toi32_i32$2;
      $286$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$4 = $279;
      i64toi32_i32$2 = $286$hi;
      i64toi32_i32$3 = $286;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $496 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $289 = $496;
      $289$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $16;
      $292 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $292;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $497 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $294$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $289$hi;
      i64toi32_i32$1 = $289;
      i64toi32_i32$3 = $294$hi;
      i64toi32_i32$0 = $497;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $295 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $295$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = __wasm_i64_mul($12 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $298 = i64toi32_i32$1;
      $298$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $295$hi;
      i64toi32_i32$4 = $295;
      i64toi32_i32$1 = $298$hi;
      i64toi32_i32$0 = $298;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $299 = i64toi32_i32$2;
      $299$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $498 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $498 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $15 = $498;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = __wasm_i64_mul($4 | 0, i64toi32_i32$4 | 0, $17 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $305 = i64toi32_i32$3;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15;
      i64toi32_i32$3 = $305$hi;
      i64toi32_i32$0 = $305;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $15;
      $309 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $310$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $299$hi;
      i64toi32_i32$0 = $299;
      i64toi32_i32$2 = $310$hi;
      i64toi32_i32$5 = $309;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $311 = i64toi32_i32$3;
      $311$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      $312 = $2;
      $312$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $313 = $4;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 17;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $499 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $499 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      i64toi32_i32$1 = $499;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $313$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($313 | 0, i64toi32_i32$4 | 0, $16 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $17 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      $319 = i64toi32_i32$1;
      $319$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $12$hi;
      $320 = $12;
      $320$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 15;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $501 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $501 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      i64toi32_i32$4 = $501;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -32768;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $18 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $320$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($320 | 0, i64toi32_i32$0 | 0, $18 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $325 = i64toi32_i32$4;
      $325$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $319$hi;
      i64toi32_i32$1 = $319;
      i64toi32_i32$4 = $325$hi;
      i64toi32_i32$5 = $325;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $502 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $502 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $19 = $502;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, $18 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332 = i64toi32_i32$0;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19;
      i64toi32_i32$0 = $332$hi;
      i64toi32_i32$5 = $332;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $333$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $333$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $19;
      $335 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $336 = $335;
      $336$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$5 = $15;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $503 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $503 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $338 = $503;
      $338$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = $17;
      $341 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $341;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $504 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $504 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $343$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $338$hi;
      i64toi32_i32$1 = $338;
      i64toi32_i32$3 = $343$hi;
      i64toi32_i32$5 = $504;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $344 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $344$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($12 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $347 = i64toi32_i32$1;
      $347$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $344$hi;
      i64toi32_i32$2 = $344;
      i64toi32_i32$1 = $347$hi;
      i64toi32_i32$5 = $347;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $348$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $336$hi;
      i64toi32_i32$3 = $336;
      i64toi32_i32$2 = $348$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $349$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $312$hi;
      i64toi32_i32$4 = $312;
      i64toi32_i32$3 = $349$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2;
      $353 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $354$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $311$hi;
      i64toi32_i32$5 = $311;
      i64toi32_i32$1 = $354$hi;
      i64toi32_i32$4 = $353;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = $15;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      $357 = (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = 0;
      $358$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $355$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $358$hi;
      i64toi32_i32$5 = $357;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $359$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $359$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $2 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $16 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $17 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$0;
      $366 = i64toi32_i32$3;
      $366$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $370 = i64toi32_i32$3;
      $370$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $371 = $4;
      $371$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $505 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $505 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $19 = $505;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $371$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($371 | 0, i64toi32_i32$3 | 0, $19 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $375 = i64toi32_i32$1;
      $375$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $370$hi;
      i64toi32_i32$0 = $370;
      i64toi32_i32$1 = $375$hi;
      i64toi32_i32$5 = $375;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $507 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $507 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $378$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $366$hi;
      i64toi32_i32$2 = $366;
      i64toi32_i32$3 = $378$hi;
      i64toi32_i32$5 = $507;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$5 = $17;
      i64toi32_i32$0 = 0;
      $383 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $383$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $508 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $385 = $508;
      $385$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18;
      $388 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $388;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $512 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
       $512 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $390$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$0 = $385;
      i64toi32_i32$2 = $390$hi;
      i64toi32_i32$5 = $512;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $391 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $391$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $19 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $394 = i64toi32_i32$0;
      $394$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $391$hi;
      i64toi32_i32$4 = $391;
      i64toi32_i32$0 = $394$hi;
      i64toi32_i32$5 = $394;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $395$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $383$hi;
      i64toi32_i32$2 = $383;
      i64toi32_i32$4 = $395$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $396 = i64toi32_i32$0;
      $396$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      $397 = $16;
      $397$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $2 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $513 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $513 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $15 = $513;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $17 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $18 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18 | 0, i64toi32_i32$3 | 0, $12 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $410 = i64toi32_i32$0;
      $410$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17;
      i64toi32_i32$0 = $410$hi;
      i64toi32_i32$5 = $410;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $514 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $514 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $19 = $514;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $417 = i64toi32_i32$3;
      $417$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$4 = $19;
      i64toi32_i32$3 = $417$hi;
      i64toi32_i32$5 = $417;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $418$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $418$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19;
      $420 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $421 = $420;
      $421$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $515 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       $515 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $423 = $515;
      $423$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17;
      $426 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = $426;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
       $516 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
       $516 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $428$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $423$hi;
      i64toi32_i32$1 = $423;
      i64toi32_i32$4 = $428$hi;
      i64toi32_i32$5 = $516;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $429 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $429$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = __wasm_i64_mul($15 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $432 = i64toi32_i32$1;
      $432$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $429$hi;
      i64toi32_i32$2 = $429;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $432;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $433$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $421$hi;
      i64toi32_i32$4 = $421;
      i64toi32_i32$2 = $433$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $397$hi;
      i64toi32_i32$0 = $397;
      i64toi32_i32$4 = $434$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $16;
      $438 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $439$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $396$hi;
      i64toi32_i32$5 = $396;
      i64toi32_i32$1 = $439$hi;
      i64toi32_i32$0 = $438;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $440 = i64toi32_i32$4;
      $440$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = -2;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $17 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2;
      $445 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $446$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $440$hi;
      i64toi32_i32$0 = $440;
      i64toi32_i32$4 = $446$hi;
      i64toi32_i32$3 = $445;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $15 = i64toi32_i32$4;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$2;
      $451 = $2;
      $451$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$5 = $1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 62;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $518 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $518 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $453 = $518;
      $453$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$2 = $7;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 2;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $521 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $521 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $453$hi;
      i64toi32_i32$1 = $453;
      i64toi32_i32$2 = $455$hi;
      i64toi32_i32$3 = $521;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $4 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $451$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = __wasm_i64_mul($451 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $16 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$1;
      $460 = i64toi32_i32$5;
      $460$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 30;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $522 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $522 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      i64toi32_i32$1 = $522;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $12 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      $464 = $12;
      $464$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $523 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $523 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15 = $523;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $464$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = __wasm_i64_mul($464 | 0, i64toi32_i32$1 | 0, $15 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $468 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$2 = $460;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$3 = $468;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$3 = $16;
      $472 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $473 = $472;
      $473$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $474 = i64toi32_i32$0;
      $474$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $17;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $524 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $524 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16 = $524;
      $16$hi = i64toi32_i32$4;
      $477 = $16;
      $477$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$1 = $7;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 30;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $525 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $525 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$4 = $525;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = -262145;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 262144;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $7 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $7$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $477$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = __wasm_i64_mul($477 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $483 = i64toi32_i32$3;
      $483$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $474$hi;
      i64toi32_i32$1 = $474;
      i64toi32_i32$3 = $483$hi;
      i64toi32_i32$2 = $483;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$2 = $18;
      $487 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $488$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $473$hi;
      i64toi32_i32$2 = $473;
      i64toi32_i32$0 = $488$hi;
      i64toi32_i32$1 = $487;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $489$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$5 | 0, $15 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $492 = i64toi32_i32$2;
      $492$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $489$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $492$hi;
      i64toi32_i32$1 = $492;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $493 = i64toi32_i32$0;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $7 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $20 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $500 = i64toi32_i32$4;
      $500$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$5 = $20;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$1 = $500;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $18 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$1 = $20;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $526 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $526 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $506 = $526;
      $506$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $527 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $527 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $508$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $506$hi;
      i64toi32_i32$0 = $506;
      i64toi32_i32$3 = $508$hi;
      i64toi32_i32$5 = $527;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $509 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $509$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $493$hi;
      i64toi32_i32$1 = $493;
      i64toi32_i32$0 = $509$hi;
      i64toi32_i32$5 = $509;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $510 = i64toi32_i32$4;
      $510$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      $511 = $19;
      $511$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $528 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $528 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $511$hi;
      i64toi32_i32$2 = $511;
      i64toi32_i32$3 = $513$hi;
      i64toi32_i32$5 = $528;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19;
      $517 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $518$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $510$hi;
      i64toi32_i32$5 = $510;
      i64toi32_i32$4 = $518$hi;
      i64toi32_i32$2 = $517;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $519 = i64toi32_i32$3;
      $519$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      $520 = $18;
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $20 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $17 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($17 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $529 = i64toi32_i32$1;
      $529$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $20;
      i64toi32_i32$1 = $529$hi;
      i64toi32_i32$2 = $529;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$2 = $20;
      i64toi32_i32$5 = 0;
      $534 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      $534$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$3;
      $535 = i64toi32_i32$4;
      $535$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $2$hi;
      $536 = $2;
      $536$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $530 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $530 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      i64toi32_i32$5 = $530;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = -4;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $20 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $536$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($536 | 0, i64toi32_i32$2 | 0, $20 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $541 = i64toi32_i32$5;
      $541$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $535$hi;
      i64toi32_i32$3 = $535;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$0 = $541;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $21 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $19;
      $545 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $546$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $534$hi;
      i64toi32_i32$0 = $534;
      i64toi32_i32$4 = $546$hi;
      i64toi32_i32$3 = $545;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $547$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $520$hi;
      i64toi32_i32$2 = $520;
      i64toi32_i32$0 = $547$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18;
      $551 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $552$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $519$hi;
      i64toi32_i32$3 = $519;
      i64toi32_i32$5 = $552$hi;
      i64toi32_i32$2 = $551;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $553 = i64toi32_i32$0;
      $553$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      $554 = $19;
      $554$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $18 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = __wasm_i64_mul($17 | 0, i64toi32_i32$4 | 0, $7 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $561 = i64toi32_i32$3;
      $561$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $18;
      i64toi32_i32$3 = $561$hi;
      i64toi32_i32$2 = $561;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $15 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $566 = i64toi32_i32$1;
      $566$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $566$hi;
      i64toi32_i32$2 = $566;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2 | 0, i64toi32_i32$5 | 0, $12 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $571 = i64toi32_i32$4;
      $571$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$4 = $571$hi;
      i64toi32_i32$2 = $571;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $531 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $574 = $531;
      $574$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $15;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18;
      $577 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4;
      i64toi32_i32$5 = $15;
      $581 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $582$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $577;
      i64toi32_i32$3 = $582$hi;
      i64toi32_i32$0 = $581;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $583$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = $4;
      $586 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $587$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $583$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $587$hi;
      i64toi32_i32$5 = $586;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $532 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $532 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $589$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $574$hi;
      i64toi32_i32$4 = $574;
      i64toi32_i32$2 = $589$hi;
      i64toi32_i32$5 = $532;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $590 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $590$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $554$hi;
      i64toi32_i32$0 = $554;
      i64toi32_i32$4 = $590$hi;
      i64toi32_i32$5 = $590;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$5 = $19;
      $594 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $595$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$5 = $553;
      i64toi32_i32$3 = $595$hi;
      i64toi32_i32$0 = $594;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $596 = i64toi32_i32$4;
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      $597 = $15;
      $597$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $598 = $21;
      $598$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $4 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17 | 0, i64toi32_i32$1 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $605 = i64toi32_i32$5;
      $605$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4;
      i64toi32_i32$5 = $605$hi;
      i64toi32_i32$0 = $605;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $12 = i64toi32_i32$3;
      $12$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $533 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $533 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      $608 = $533;
      $608$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$4 = $12;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4;
      $611 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $611;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
       $537 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
       $537 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $613$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $608$hi;
      i64toi32_i32$4 = $608;
      i64toi32_i32$0 = $613$hi;
      i64toi32_i32$1 = $537;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $614 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $614$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $598$hi;
      i64toi32_i32$2 = $598;
      i64toi32_i32$4 = $614$hi;
      i64toi32_i32$1 = $614;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $21;
      $618 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $619 = $618;
      $619$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$3;
      $620 = i64toi32_i32$5;
      $620$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $538 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $538 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $622$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $620$hi;
      i64toi32_i32$0 = $620;
      i64toi32_i32$1 = $622$hi;
      i64toi32_i32$2 = $538;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $623$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $623$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $4;
      $625 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $626$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $619$hi;
      i64toi32_i32$2 = $619;
      i64toi32_i32$5 = $626$hi;
      i64toi32_i32$0 = $625;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $597$hi;
      i64toi32_i32$3 = $597;
      i64toi32_i32$2 = $627$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$0 = $15;
      $631 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $632$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $596$hi;
      i64toi32_i32$0 = $596;
      i64toi32_i32$1 = $632$hi;
      i64toi32_i32$3 = $631;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $2 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 131071;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$3 = $1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 49;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $539 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $539 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $637$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = $4;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $1$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $12 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $15 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 0;
      $646 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = 0;
      $647$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $637$hi;
      i64toi32_i32$0 = $539;
      i64toi32_i32$4 = $647$hi;
      i64toi32_i32$5 = $646;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $648 = i64toi32_i32$1;
      $648$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $15;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $17 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$1;
      $651 = i64toi32_i32$4;
      $651$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $540 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $540 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15 = $540;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15 | 0, i64toi32_i32$3 | 0, $12 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $18 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$3;
      $657 = i64toi32_i32$2;
      $657$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      $658 = $1;
      $658$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $542 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       $542 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $16 = $542;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $658$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($658 | 0, i64toi32_i32$2 | 0, $16 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $662 = i64toi32_i32$1;
      $662$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $657$hi;
      i64toi32_i32$3 = $657;
      i64toi32_i32$1 = $662$hi;
      i64toi32_i32$5 = $662;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $7 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $543 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $543 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $19 = $543;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $651$hi;
      i64toi32_i32$4 = $651;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19;
      $667 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $668$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $648$hi;
      i64toi32_i32$5 = $648;
      i64toi32_i32$3 = $668$hi;
      i64toi32_i32$2 = $667;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $669 = i64toi32_i32$1;
      $669$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $670 = $4;
      $670$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$4 = $14;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $544 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $544 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $672$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $670$hi;
      i64toi32_i32$4 = $672$hi;
      i64toi32_i32$4 = __wasm_i64_mul($670 | 0, i64toi32_i32$5 | 0, $544 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $673 = i64toi32_i32$4;
      $673$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $3$hi;
      $674 = $3;
      $674$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $546 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       $546 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $676$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $674$hi;
      i64toi32_i32$0 = $676$hi;
      i64toi32_i32$0 = __wasm_i64_mul($674 | 0, i64toi32_i32$4 | 0, $546 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $677 = i64toi32_i32$0;
      $677$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $673$hi;
      i64toi32_i32$5 = $673;
      i64toi32_i32$0 = $677$hi;
      i64toi32_i32$2 = $677;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $678$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $681 = i64toi32_i32$5;
      $681$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $678$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$5 = $681$hi;
      i64toi32_i32$2 = $681;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $682$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$4 = __wasm_i64_mul($15 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $685 = i64toi32_i32$4;
      $685$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $682$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $685$hi;
      i64toi32_i32$2 = $685;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $547 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $547 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $687 = $547;
      $687$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $689$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = $689$hi;
      $578 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$0 = __wasm_i64_mul($578 | 0, i64toi32_i32$3 | 0, $12 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $691 = i64toi32_i32$0;
      $691$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$1 = $6;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $694 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $694$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $694$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, $694 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $695 = i64toi32_i32$1;
      $695$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $691$hi;
      i64toi32_i32$3 = $691;
      i64toi32_i32$1 = $695$hi;
      i64toi32_i32$2 = $695;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $696$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $699 = i64toi32_i32$3;
      $699$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = $699$hi;
      i64toi32_i32$2 = $699;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $700 = i64toi32_i32$1;
      $700$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $7$hi;
      i64toi32_i32$5 = $7;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $548 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $548 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $702 = $548;
      $702$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$4 = $7;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18;
      $705 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = $705;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $549 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $707$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $702$hi;
      i64toi32_i32$4 = $702;
      i64toi32_i32$2 = $707$hi;
      i64toi32_i32$5 = $549;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $708 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $708$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $700$hi;
      i64toi32_i32$0 = $700;
      i64toi32_i32$4 = $708$hi;
      i64toi32_i32$5 = $708;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $709$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $687$hi;
      i64toi32_i32$2 = $687;
      i64toi32_i32$0 = $709$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $669$hi;
      i64toi32_i32$1 = $669;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $12 = i64toi32_i32$0;
      $12$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $17;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $19;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      $9 = $9 + -1 | 0;
      break label$12;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $550 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      $550 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16 = $550;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 48;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $552 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $552 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $720 = $552;
     $720$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $555 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $555 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $722 = $555;
     $722$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $556 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $556 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $724$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $722$hi;
     i64toi32_i32$0 = $722;
     i64toi32_i32$4 = $724$hi;
     i64toi32_i32$5 = $556;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
     $1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $12 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$4 = __wasm_i64_mul($1 | 0, i64toi32_i32$3 | 0, $12 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $15 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 0;
     $734 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $735$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $720$hi;
     i64toi32_i32$5 = $720;
     i64toi32_i32$3 = $735$hi;
     i64toi32_i32$4 = $734;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     $736 = i64toi32_i32$1;
     $736$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$4 = $15;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$3;
     $7$hi = i64toi32_i32$1;
     $739 = i64toi32_i32$3;
     $739$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $740 = $1;
     $740$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $557 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $557 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $15 = $557;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $740$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = __wasm_i64_mul($740 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $17 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$0;
     $745 = i64toi32_i32$2;
     $745$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $746 = $16;
     $746$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 31;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $558 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $558 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $748$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $746$hi;
     i64toi32_i32$0 = $746;
     i64toi32_i32$1 = $748$hi;
     i64toi32_i32$4 = $558;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $18 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $18;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $19 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = __wasm_i64_mul($19 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $754 = i64toi32_i32$2;
     $754$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $745$hi;
     i64toi32_i32$1 = $745;
     i64toi32_i32$2 = $754$hi;
     i64toi32_i32$4 = $754;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $559 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $559 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $20 = $559;
     $20$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $739$hi;
     i64toi32_i32$3 = $739;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$4 = $20;
     $759 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $760$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $736$hi;
     i64toi32_i32$4 = $736;
     i64toi32_i32$1 = $760$hi;
     i64toi32_i32$0 = $759;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $761 = i64toi32_i32$2;
     $761$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $762 = $4;
     $762$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $14;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $560 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $560 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $764$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $762$hi;
     i64toi32_i32$3 = $764$hi;
     i64toi32_i32$3 = __wasm_i64_mul($762 | 0, i64toi32_i32$4 | 0, $560 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $765 = i64toi32_i32$3;
     $765$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $766 = $3;
     $766$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $562 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $562 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $768$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $766$hi;
     i64toi32_i32$5 = $768$hi;
     i64toi32_i32$5 = __wasm_i64_mul($766 | 0, i64toi32_i32$3 | 0, $562 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $769 = i64toi32_i32$5;
     $769$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $765$hi;
     i64toi32_i32$4 = $765;
     i64toi32_i32$5 = $769$hi;
     i64toi32_i32$0 = $769;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $770 = i64toi32_i32$1;
     $770$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $563 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $563 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
     }
     $2 = $563;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $775 = i64toi32_i32$3;
     $775$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $770$hi;
     i64toi32_i32$2 = $770;
     i64toi32_i32$3 = $775$hi;
     i64toi32_i32$0 = $775;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $776$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $779 = i64toi32_i32$2;
     $779$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $776$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$2 = $779$hi;
     i64toi32_i32$0 = $779;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $564 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $564 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $781 = $564;
     $781$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = __wasm_i64_mul($19 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $784 = i64toi32_i32$1;
     $784$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $786$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $786$hi;
     $579 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = __wasm_i64_mul($579 | 0, i64toi32_i32$1 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $788 = i64toi32_i32$5;
     $788$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $784$hi;
     i64toi32_i32$4 = $784;
     i64toi32_i32$5 = $788$hi;
     i64toi32_i32$0 = $788;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $789$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $792 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $792$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = $792$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$4 | 0, $792 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $793 = i64toi32_i32$1;
     $793$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $789$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$0 = $793;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $794 = i64toi32_i32$5;
     $794$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $565 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $565 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $796 = $565;
     $796$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = $17;
     $799 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = $799;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $567 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $567 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $801$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $796$hi;
     i64toi32_i32$2 = $796;
     i64toi32_i32$0 = $801$hi;
     i64toi32_i32$4 = $567;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $802 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $802$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $794$hi;
     i64toi32_i32$3 = $794;
     i64toi32_i32$2 = $802$hi;
     i64toi32_i32$4 = $802;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $803$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $781$hi;
     i64toi32_i32$0 = $781;
     i64toi32_i32$3 = $803$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $804$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761;
     i64toi32_i32$0 = $804$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $12 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$4 = $20;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     $1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     $2$hi = i64toi32_i32$3;
    }
    label$14 : {
     if (($9 | 0) < (16384 | 0)) {
      break label$14
     }
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    $10 = $9 + 16383 | 0;
    label$15 : {
     if (($9 | 0) > (-16383 | 0)) {
      break label$15
     }
     label$16 : {
      if ($10) {
       break label$16
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2;
      i64toi32_i32$2 = 65535;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $820 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $820$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      $821 = $4;
      $821$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $568 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $568 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      $823$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $823$hi;
      i64toi32_i32$2 = $568;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3;
      $825 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$4 = $12;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $569 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $569 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $827 = $569;
      $827$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $570 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       $570 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $829$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $827$hi;
      i64toi32_i32$3 = $827;
      i64toi32_i32$2 = $829$hi;
      i64toi32_i32$1 = $570;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$1 = $14;
      $833 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $1;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = $14;
      $837 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $825 : $833;
      i64toi32_i32$1 = 0;
      $838$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $821$hi;
      i64toi32_i32$3 = $821;
      i64toi32_i32$4 = $838$hi;
      i64toi32_i32$2 = $837;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4;
      $842 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $843$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $820$hi;
      i64toi32_i32$2 = $820;
      i64toi32_i32$0 = $843$hi;
      i64toi32_i32$3 = $842;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
       break label$16
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$5 = $3;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$3 = $8;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $8 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $852 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $852$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $853 = $4;
    $853$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $572 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $572 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $855$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $855$hi;
    i64toi32_i32$5 = $572;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$3 = $3;
    $857 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$3 = $12;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $573 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
     $573 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $859 = $573;
    $859$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $575 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $575 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $861$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $859$hi;
    i64toi32_i32$2 = $859;
    i64toi32_i32$5 = $861$hi;
    i64toi32_i32$1 = $575;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$1 = $14;
    $865 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$1 = $1;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $14;
    $869 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $857 : $865;
    i64toi32_i32$1 = 0;
    $870$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $853$hi;
    i64toi32_i32$2 = $853;
    i64toi32_i32$3 = $870$hi;
    i64toi32_i32$5 = $869;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4;
    $874 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $875$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $852$hi;
    i64toi32_i32$5 = $852;
    i64toi32_i32$4 = $875$hi;
    i64toi32_i32$2 = $874;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $876 = i64toi32_i32$3;
    $876$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $10;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $576 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $576 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $879$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $876$hi;
    i64toi32_i32$0 = $876;
    i64toi32_i32$1 = $879$hi;
    i64toi32_i32$2 = $576;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $880$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$3 = $880$hi;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$2 = $8;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $8 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $8$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $0;
   HEAP32[i64toi32_i32$5 >> 2] = $1;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $8;
   HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
   __stack_pointer = $5 + 192 | 0;
   return;
  }
  i64toi32_i32$5 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$5 >> 2] = 0;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
  i64toi32_i32$1 = !(i64toi32_i32$3 | i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0);
  i64toi32_i32$5 = 2147450880;
  i64toi32_i32$3 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ? 0 : $8;
  i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$3;
  $896 = i64toi32_i32$2;
  i64toi32_i32$2 = $0;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $896;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $5 + 192 | 0;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $3 = 0, $3$hi = 0, $4$hi = 0, $4 = 0, $2 = 0, $5 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $17 = 0, $17$hi = 0, $19$hi = 0, $34 = 0, $34$hi = 0, $37 = 0, $39 = 0, $44 = 0, $44$hi = 0, $46$hi = 0, $74 = 0, $74$hi = 0, $78$hi = 0, $81 = 0, $81$hi = 0, $83 = 0, $83$hi = 0, $87 = 0, $87$hi = 0, $89 = 0, $90$hi = 0, $100$hi = 0, $107 = 0, $107$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17 = $43;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37 : $39) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44 = $46;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $5 = $48;
   if ($5 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$5 | 0, $3 | 0, i64toi32_i32$0 | 0, $5 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$5 | 0, 15361 - $5 | 0 | 0);
   i64toi32_i32$4 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74 = $49;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $3;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $4 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$3;
  }
  __stack_pointer = $2 + 32 | 0;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$3 = $4;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function __floatunsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $17 = 0, $11 = 0, $19 = 0, $19$hi = 0, $23$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11 = $1;
   $1 = Math_clz32($1);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $3;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function saveSetjmp($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $32 = 0;
  $4 = 0;
  $5 = (HEAP32[(0 + 87852 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 87852 | 0) >> 2] = $5;
  HEAP32[$0 >> 2] = $5;
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    label$3 : while (1) {
     $6 = $2 + ($4 << 3 | 0) | 0;
     if (!(HEAP32[$6 >> 2] | 0)) {
      break label$1
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($3 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $32 = dlrealloc($2 | 0, $3 << 4 | 0 | 8 | 0 | 0) | 0;
   $4 = $3 << 1 | 0;
   $3 = saveSetjmp($0 | 0, $1 | 0, $32 | 0, $4 | 0) | 0;
   setTempRet0($4 | 0);
   return $3 | 0;
  }
  HEAP32[$6 >> 2] = $5;
  $4 = $2 + ($4 << 3 | 0) | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = 0;
  setTempRet0($3 | 0);
  return $2 | 0;
 }
 
 function testSetjmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = 0;
   label$2 : while (1) {
    $4 = HEAP32[($1 + ($3 << 3 | 0) | 0) >> 2] | 0;
    if (!$4) {
     break label$1
    }
    label$3 : {
     if (($4 | 0) != ($0 | 0)) {
      break label$3
     }
     return HEAP32[(($1 + ($3 << 3 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function setThrew($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (HEAP32[(0 + 87856 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 87860 | 0) >> 2] = $1;
   HEAP32[(0 + 87856 | 0) >> 2] = $0;
  }
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $4 = 0, $6 = 0, $5 = 0, $3 = 0, $8 = 0, $2 = 0, $12 = 0, $9 = 0, $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10 = 0, $11 = 0, $1 = 0, $83 = 0, $96 = 0, $107 = 0, $115 = 0, $123 = 0, $217 = 0, $228 = 0, $236 = 0, $244 = 0, $279 = 0, $354 = 0, $361 = 0, $368 = 0, $459 = 0, $470 = 0, $478 = 0, $486 = 0, $1194 = 0, $1201 = 0, $1208 = 0, $1330 = 0, $1332 = 0, $1393 = 0, $1400 = 0, $1407 = 0, $1640 = 0, $1647 = 0, $1654 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2 = HEAP32[(0 + 87864 | 0) >> 2] | 0;
                $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & -8 | 0;
                $4 = $3 >>> 3 | 0;
                $0 = $2 >>> $4 | 0;
                if (!($0 & 3 | 0)) {
                 break label$14
                }
                $3 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
                $5 = $3 << 3 | 0;
                $4 = HEAP32[($5 + 87912 | 0) >> 2] | 0;
                $0 = $4 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                  $5 = $5 + 87904 | 0;
                  if (($6 | 0) != ($5 | 0)) {
                   break label$16
                  }
                  HEAP32[(0 + 87864 | 0) >> 2] = $2 & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0;
                  break label$15;
                 }
                 HEAP32[(0 + 87880 | 0) >> 2] | 0;
                 HEAP32[($6 + 12 | 0) >> 2] = $5;
                 HEAP32[($5 + 8 | 0) >> 2] = $6;
                }
                $6 = $3 << 3 | 0;
                HEAP32[($4 + 4 | 0) >> 2] = $6 | 3 | 0;
                $4 = $4 + $6 | 0;
                HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7 = HEAP32[(0 + 87872 | 0) >> 2] | 0;
               if ($3 >>> 0 <= $7 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $83 = $0 << $4 | 0;
                  $0 = 2 << $4 | 0;
                  $0 = $83 & ($0 | (0 - $0 | 0) | 0) | 0;
                  $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                  $96 = $0;
                  $0 = ($0 >>> 12 | 0) & 16 | 0;
                  $4 = $96 >>> $0 | 0;
                  $6 = ($4 >>> 5 | 0) & 8 | 0;
                  $107 = $6 | $0 | 0;
                  $0 = $4 >>> $6 | 0;
                  $4 = ($0 >>> 2 | 0) & 4 | 0;
                  $115 = $107 | $4 | 0;
                  $0 = $0 >>> $4 | 0;
                  $4 = ($0 >>> 1 | 0) & 2 | 0;
                  $123 = $115 | $4 | 0;
                  $0 = $0 >>> $4 | 0;
                  $4 = ($0 >>> 1 | 0) & 1 | 0;
                  $6 = ($123 | $4 | 0) + ($0 >>> $4 | 0) | 0;
                  $5 = $6 << 3 | 0;
                  $4 = HEAP32[($5 + 87912 | 0) >> 2] | 0;
                  $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                  $5 = $5 + 87904 | 0;
                  if (($0 | 0) != ($5 | 0)) {
                   break label$19
                  }
                  $2 = $2 & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0;
                  HEAP32[(0 + 87864 | 0) >> 2] = $2;
                  break label$18;
                 }
                 HEAP32[(0 + 87880 | 0) >> 2] | 0;
                 HEAP32[($0 + 12 | 0) >> 2] = $5;
                 HEAP32[($5 + 8 | 0) >> 2] = $0;
                }
                $0 = $4 + 8 | 0;
                HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
                $5 = $4 + $3 | 0;
                $8 = $6 << 3 | 0;
                $6 = $8 - $3 | 0;
                HEAP32[($5 + 4 | 0) >> 2] = $6 | 1 | 0;
                HEAP32[($4 + $8 | 0) >> 2] = $6;
                label$20 : {
                 if (!$7) {
                  break label$20
                 }
                 $8 = $7 >>> 3 | 0;
                 $3 = ($8 << 3 | 0) + 87904 | 0;
                 $4 = HEAP32[(0 + 87884 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8 = 1 << $8 | 0;
                   if ($2 & $8 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 87864 | 0) >> 2] = $2 | $8 | 0;
                   $8 = $3;
                   break label$21;
                  }
                  $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3 + 8 | 0) >> 2] = $4;
                 HEAP32[($8 + 12 | 0) >> 2] = $4;
                 HEAP32[($4 + 12 | 0) >> 2] = $3;
                 HEAP32[($4 + 8 | 0) >> 2] = $8;
                }
                HEAP32[(0 + 87884 | 0) >> 2] = $5;
                HEAP32[(0 + 87872 | 0) >> 2] = $6;
                break label$1;
               }
               $9 = HEAP32[(0 + 87868 | 0) >> 2] | 0;
               if (!$9) {
                break label$12
               }
               $0 = ($9 & (0 - $9 | 0) | 0) + -1 | 0;
               $217 = $0;
               $0 = ($0 >>> 12 | 0) & 16 | 0;
               $4 = $217 >>> $0 | 0;
               $6 = ($4 >>> 5 | 0) & 8 | 0;
               $228 = $6 | $0 | 0;
               $0 = $4 >>> $6 | 0;
               $4 = ($0 >>> 2 | 0) & 4 | 0;
               $236 = $228 | $4 | 0;
               $0 = $0 >>> $4 | 0;
               $4 = ($0 >>> 1 | 0) & 2 | 0;
               $244 = $236 | $4 | 0;
               $0 = $0 >>> $4 | 0;
               $4 = ($0 >>> 1 | 0) & 1 | 0;
               $5 = HEAP32[(((($244 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 88168 | 0) >> 2] | 0;
               $4 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
               $6 = $5;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0 = HEAP32[($6 + 16 | 0) >> 2] | 0;
                  if ($0) {
                   break label$25
                  }
                  $0 = HEAP32[($6 + 20 | 0) >> 2] | 0;
                  if (!$0) {
                   break label$23
                  }
                 }
                 $6 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                 $279 = $6;
                 $6 = $6 >>> 0 < $4 >>> 0;
                 $4 = $6 ? $279 : $4;
                 $5 = $6 ? $0 : $5;
                 $6 = $0;
                 continue label$24;
                };
               }
               $10 = $5 + $3 | 0;
               if ($10 >>> 0 <= $5 >>> 0) {
                break label$11
               }
               $11 = HEAP32[($5 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8 = HEAP32[($5 + 12 | 0) >> 2] | 0;
                if (($8 | 0) == ($5 | 0)) {
                 break label$26
                }
                label$27 : {
                 $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
                 if ((HEAP32[(0 + 87880 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
                  break label$27
                 }
                 HEAP32[($0 + 12 | 0) >> 2] | 0;
                }
                HEAP32[($0 + 12 | 0) >> 2] = $8;
                HEAP32[($8 + 8 | 0) >> 2] = $0;
                break label$2;
               }
               label$28 : {
                $6 = $5 + 20 | 0;
                $0 = HEAP32[$6 >> 2] | 0;
                if ($0) {
                 break label$28
                }
                $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
                if (!$0) {
                 break label$10
                }
                $6 = $5 + 16 | 0;
               }
               label$29 : while (1) {
                $12 = $6;
                $8 = $0;
                $6 = $0 + 20 | 0;
                $0 = HEAP32[$6 >> 2] | 0;
                if ($0) {
                 continue label$29
                }
                $6 = $8 + 16 | 0;
                $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
                if ($0) {
                 continue label$29
                }
                break label$29;
               };
               HEAP32[$12 >> 2] = 0;
               break label$2;
              }
              $3 = -1;
              if ($0 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0 = $0 + 11 | 0;
              $3 = $0 & -8 | 0;
              $7 = HEAP32[(0 + 87868 | 0) >> 2] | 0;
              if (!$7) {
               break label$12
              }
              $12 = 31;
              label$30 : {
               if ($3 >>> 0 > 16777215 >>> 0) {
                break label$30
               }
               $0 = $0 >>> 8 | 0;
               $354 = $0;
               $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4 = $354 << $0 | 0;
               $361 = $4;
               $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $6 = $361 << $4 | 0;
               $368 = $6;
               $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0 = (($368 << $6 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $6 | 0) | 0;
               $12 = ($0 << 1 | 0 | (($3 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4 = 0 - $3 | 0;
              label$31 : {
               label$32 : {
                label$33 : {
                 label$34 : {
                  $6 = HEAP32[(($12 << 2 | 0) + 88168 | 0) >> 2] | 0;
                  if ($6) {
                   break label$34
                  }
                  $0 = 0;
                  $8 = 0;
                  break label$33;
                 }
                 $0 = 0;
                 $5 = $3 << (($12 | 0) == (31 | 0) ? 0 : 25 - ($12 >>> 1 | 0) | 0) | 0;
                 $8 = 0;
                 label$35 : while (1) {
                  label$36 : {
                   $2 = ((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                   if ($2 >>> 0 >= $4 >>> 0) {
                    break label$36
                   }
                   $4 = $2;
                   $8 = $6;
                   if ($4) {
                    break label$36
                   }
                   $4 = 0;
                   $8 = $6;
                   $0 = $6;
                   break label$32;
                  }
                  $2 = HEAP32[($6 + 20 | 0) >> 2] | 0;
                  $6 = HEAP32[(($6 + (($5 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0 = $2 ? (($2 | 0) == ($6 | 0) ? $0 : $2) : $0;
                  $5 = $5 << 1 | 0;
                  if ($6) {
                   continue label$35
                  }
                  break label$35;
                 };
                }
                label$37 : {
                 if ($0 | $8 | 0) {
                  break label$37
                 }
                 $0 = 2 << $12 | 0;
                 $0 = ($0 | (0 - $0 | 0) | 0) & $7 | 0;
                 if (!$0) {
                  break label$12
                 }
                 $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                 $459 = $0;
                 $0 = ($0 >>> 12 | 0) & 16 | 0;
                 $6 = $459 >>> $0 | 0;
                 $5 = ($6 >>> 5 | 0) & 8 | 0;
                 $470 = $5 | $0 | 0;
                 $0 = $6 >>> $5 | 0;
                 $6 = ($0 >>> 2 | 0) & 4 | 0;
                 $478 = $470 | $6 | 0;
                 $0 = $0 >>> $6 | 0;
                 $6 = ($0 >>> 1 | 0) & 2 | 0;
                 $486 = $478 | $6 | 0;
                 $0 = $0 >>> $6 | 0;
                 $6 = ($0 >>> 1 | 0) & 1 | 0;
                 $0 = HEAP32[(((($486 | $6 | 0) + ($0 >>> $6 | 0) | 0) << 2 | 0) + 88168 | 0) >> 2] | 0;
                }
                if (!$0) {
                 break label$31
                }
               }
               label$38 : while (1) {
                $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                $5 = $2 >>> 0 < $4 >>> 0;
                label$39 : {
                 $6 = HEAP32[($0 + 16 | 0) >> 2] | 0;
                 if ($6) {
                  break label$39
                 }
                 $6 = HEAP32[($0 + 20 | 0) >> 2] | 0;
                }
                $4 = $5 ? $2 : $4;
                $8 = $5 ? $0 : $8;
                $0 = $6;
                if ($0) {
                 continue label$38
                }
                break label$38;
               };
              }
              if (!$8) {
               break label$12
              }
              if ($4 >>> 0 >= ((HEAP32[(0 + 87872 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
               break label$12
              }
              $12 = $8 + $3 | 0;
              if ($12 >>> 0 <= $8 >>> 0) {
               break label$11
              }
              $9 = HEAP32[($8 + 24 | 0) >> 2] | 0;
              label$40 : {
               $5 = HEAP32[($8 + 12 | 0) >> 2] | 0;
               if (($5 | 0) == ($8 | 0)) {
                break label$40
               }
               label$41 : {
                $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 87880 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) {
                 break label$41
                }
                HEAP32[($0 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0 + 12 | 0) >> 2] = $5;
               HEAP32[($5 + 8 | 0) >> 2] = $0;
               break label$3;
              }
              label$42 : {
               $6 = $8 + 20 | 0;
               $0 = HEAP32[$6 >> 2] | 0;
               if ($0) {
                break label$42
               }
               $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
               if (!$0) {
                break label$9
               }
               $6 = $8 + 16 | 0;
              }
              label$43 : while (1) {
               $2 = $6;
               $5 = $0;
               $6 = $0 + 20 | 0;
               $0 = HEAP32[$6 >> 2] | 0;
               if ($0) {
                continue label$43
               }
               $6 = $5 + 16 | 0;
               $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
               if ($0) {
                continue label$43
               }
               break label$43;
              };
              HEAP32[$2 >> 2] = 0;
              break label$3;
             }
             label$44 : {
              $0 = HEAP32[(0 + 87872 | 0) >> 2] | 0;
              if ($0 >>> 0 < $3 >>> 0) {
               break label$44
              }
              $4 = HEAP32[(0 + 87884 | 0) >> 2] | 0;
              label$45 : {
               label$46 : {
                $6 = $0 - $3 | 0;
                if ($6 >>> 0 < 16 >>> 0) {
                 break label$46
                }
                HEAP32[(0 + 87872 | 0) >> 2] = $6;
                $5 = $4 + $3 | 0;
                HEAP32[(0 + 87884 | 0) >> 2] = $5;
                HEAP32[($5 + 4 | 0) >> 2] = $6 | 1 | 0;
                HEAP32[($4 + $0 | 0) >> 2] = $6;
                HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
                break label$45;
               }
               HEAP32[(0 + 87884 | 0) >> 2] = 0;
               HEAP32[(0 + 87872 | 0) >> 2] = 0;
               HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
               $0 = $4 + $0 | 0;
               HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0 = $4 + 8 | 0;
              break label$1;
             }
             label$47 : {
              $5 = HEAP32[(0 + 87876 | 0) >> 2] | 0;
              if ($5 >>> 0 <= $3 >>> 0) {
               break label$47
              }
              $4 = $5 - $3 | 0;
              HEAP32[(0 + 87876 | 0) >> 2] = $4;
              $0 = HEAP32[(0 + 87888 | 0) >> 2] | 0;
              $6 = $0 + $3 | 0;
              HEAP32[(0 + 87888 | 0) >> 2] = $6;
              HEAP32[($6 + 4 | 0) >> 2] = $4 | 1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
              $0 = $0 + 8 | 0;
              break label$1;
             }
             label$48 : {
              label$49 : {
               if (!(HEAP32[(0 + 88336 | 0) >> 2] | 0)) {
                break label$49
               }
               $4 = HEAP32[(0 + 88344 | 0) >> 2] | 0;
               break label$48;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 88348 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 88352 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 88340 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 88344 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 88336 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 88356 | 0) >> 2] = 0;
              HEAP32[(0 + 88308 | 0) >> 2] = 0;
              $4 = 4096;
             }
             $0 = 0;
             $7 = $3 + 47 | 0;
             $2 = $4 + $7 | 0;
             $12 = 0 - $4 | 0;
             $8 = $2 & $12 | 0;
             if ($8 >>> 0 <= $3 >>> 0) {
              break label$1
             }
             $0 = 0;
             label$50 : {
              $4 = HEAP32[(0 + 88304 | 0) >> 2] | 0;
              if (!$4) {
               break label$50
              }
              $6 = HEAP32[(0 + 88296 | 0) >> 2] | 0;
              $9 = $6 + $8 | 0;
              if ($9 >>> 0 <= $6 >>> 0) {
               break label$1
              }
              if ($9 >>> 0 > $4 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 88308 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$51 : {
              label$52 : {
               label$53 : {
                $4 = HEAP32[(0 + 87888 | 0) >> 2] | 0;
                if (!$4) {
                 break label$53
                }
                $0 = 88312;
                label$54 : while (1) {
                 label$55 : {
                  $6 = HEAP32[$0 >> 2] | 0;
                  if ($6 >>> 0 > $4 >>> 0) {
                   break label$55
                  }
                  if (($6 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
                   break label$52
                  }
                 }
                 $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                 if ($0) {
                  continue label$54
                 }
                 break label$54;
                };
               }
               $5 = sbrk(0 | 0) | 0;
               if (($5 | 0) == (-1 | 0)) {
                break label$7
               }
               $2 = $8;
               label$56 : {
                $0 = HEAP32[(0 + 88340 | 0) >> 2] | 0;
                $4 = $0 + -1 | 0;
                if (!($4 & $5 | 0)) {
                 break label$56
                }
                $2 = ($8 - $5 | 0) + (($4 + $5 | 0) & (0 - $0 | 0) | 0) | 0;
               }
               if ($2 >>> 0 <= $3 >>> 0) {
                break label$7
               }
               if ($2 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$57 : {
                $0 = HEAP32[(0 + 88304 | 0) >> 2] | 0;
                if (!$0) {
                 break label$57
                }
                $4 = HEAP32[(0 + 88296 | 0) >> 2] | 0;
                $6 = $4 + $2 | 0;
                if ($6 >>> 0 <= $4 >>> 0) {
                 break label$7
                }
                if ($6 >>> 0 > $0 >>> 0) {
                 break label$7
                }
               }
               $0 = sbrk($2 | 0) | 0;
               if (($0 | 0) != ($5 | 0)) {
                break label$51
               }
               break label$5;
              }
              $2 = ($2 - $5 | 0) & $12 | 0;
              if ($2 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $5 = sbrk($2 | 0) | 0;
              if (($5 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0 = $5;
             }
             label$58 : {
              if (($3 + 48 | 0) >>> 0 <= $2 >>> 0) {
               break label$58
              }
              if (($0 | 0) == (-1 | 0)) {
               break label$58
              }
              label$59 : {
               $4 = HEAP32[(0 + 88344 | 0) >> 2] | 0;
               $4 = (($7 - $2 | 0) + $4 | 0) & (0 - $4 | 0) | 0;
               if ($4 >>> 0 <= 2147483646 >>> 0) {
                break label$59
               }
               $5 = $0;
               break label$5;
              }
              label$60 : {
               if ((sbrk($4 | 0) | 0 | 0) == (-1 | 0)) {
                break label$60
               }
               $2 = $4 + $2 | 0;
               $5 = $0;
               break label$5;
              }
              sbrk(0 - $2 | 0 | 0) | 0;
              break label$7;
             }
             $5 = $0;
             if (($0 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8 = 0;
           break label$2;
          }
          $5 = 0;
          break label$3;
         }
         if (($5 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 88308 | 0) >> 2] = HEAP32[(0 + 88308 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5 = sbrk($8 | 0) | 0;
       $0 = sbrk(0 | 0) | 0;
       if ($5 >>> 0 >= $0 >>> 0) {
        break label$4
       }
       if (($5 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0 | 0) == (-1 | 0)) {
        break label$4
       }
       $2 = $0 - $5 | 0;
       if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0 = (HEAP32[(0 + 88296 | 0) >> 2] | 0) + $2 | 0;
      HEAP32[(0 + 88296 | 0) >> 2] = $0;
      label$61 : {
       if ($0 >>> 0 <= (HEAP32[(0 + 88300 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 88300 | 0) >> 2] = $0;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4 = HEAP32[(0 + 87888 | 0) >> 2] | 0;
          if (!$4) {
           break label$65
          }
          $0 = 88312;
          label$66 : while (1) {
           $6 = HEAP32[$0 >> 2] | 0;
           $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($5 | 0) == ($6 + $8 | 0 | 0)) {
            break label$64
           }
           $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if ($0) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0 = HEAP32[(0 + 87880 | 0) >> 2] | 0;
           if (!$0) {
            break label$68
           }
           if ($5 >>> 0 >= $0 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 87880 | 0) >> 2] = $5;
         }
         $0 = 0;
         HEAP32[(0 + 88316 | 0) >> 2] = $2;
         HEAP32[(0 + 88312 | 0) >> 2] = $5;
         HEAP32[(0 + 87896 | 0) >> 2] = -1;
         HEAP32[(0 + 87900 | 0) >> 2] = HEAP32[(0 + 88336 | 0) >> 2] | 0;
         HEAP32[(0 + 88324 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4 = $0 << 3 | 0;
          $6 = $4 + 87904 | 0;
          HEAP32[($4 + 87912 | 0) >> 2] = $6;
          HEAP32[($4 + 87916 | 0) >> 2] = $6;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0 = $2 + -40 | 0;
         $4 = ($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0;
         $6 = $0 - $4 | 0;
         HEAP32[(0 + 87876 | 0) >> 2] = $6;
         $4 = $5 + $4 | 0;
         HEAP32[(0 + 87888 | 0) >> 2] = $4;
         HEAP32[($4 + 4 | 0) >> 2] = $6 | 1 | 0;
         HEAP32[(($5 + $0 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 87892 | 0) >> 2] = HEAP32[(0 + 88352 | 0) >> 2] | 0;
         break label$62;
        }
        if ($5 >>> 0 <= $4 >>> 0) {
         break label$63
        }
        if ($6 >>> 0 > $4 >>> 0) {
         break label$63
        }
        if ((HEAP32[($0 + 12 | 0) >> 2] | 0) & 8 | 0) {
         break label$63
        }
        HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
        $0 = ($4 + 8 | 0) & 7 | 0 ? (-8 - $4 | 0) & 7 | 0 : 0;
        $6 = $4 + $0 | 0;
        HEAP32[(0 + 87888 | 0) >> 2] = $6;
        $5 = (HEAP32[(0 + 87876 | 0) >> 2] | 0) + $2 | 0;
        $0 = $5 - $0 | 0;
        HEAP32[(0 + 87876 | 0) >> 2] = $0;
        HEAP32[($6 + 4 | 0) >> 2] = $0 | 1 | 0;
        HEAP32[(($4 + $5 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 87892 | 0) >> 2] = HEAP32[(0 + 88352 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8 = HEAP32[(0 + 87880 | 0) >> 2] | 0;
        if ($5 >>> 0 >= $8 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 87880 | 0) >> 2] = $5;
        $8 = $5;
       }
       $6 = $5 + $2 | 0;
       $0 = 88312;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0 >> 2] | 0 | 0) == ($6 | 0)) {
                break label$77
               }
               $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
               if ($0) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0 = 88312;
            label$79 : while (1) {
             label$80 : {
              $6 = HEAP32[$0 >> 2] | 0;
              if ($6 >>> 0 > $4 >>> 0) {
               break label$80
              }
              $6 = $6 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
              if ($6 >>> 0 > $4 >>> 0) {
               break label$74
              }
             }
             $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0 >> 2] = $5;
           HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $2 | 0;
           $12 = $5 + (($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12 + 4 | 0) >> 2] = $3 | 3 | 0;
           $2 = $6 + (($6 + 8 | 0) & 7 | 0 ? (-8 - $6 | 0) & 7 | 0 : 0) | 0;
           $6 = ($2 - $12 | 0) - $3 | 0;
           $3 = $12 + $3 | 0;
           label$81 : {
            if (($4 | 0) != ($2 | 0)) {
             break label$81
            }
            HEAP32[(0 + 87888 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 87876 | 0) >> 2] | 0) + $6 | 0;
            HEAP32[(0 + 87876 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
             break label$82
            }
            HEAP32[(0 + 87884 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 87872 | 0) >> 2] | 0) + $6 | 0;
            HEAP32[(0 + 87872 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            HEAP32[($3 + $0 | 0) >> 2] = $0;
            break label$72;
           }
           label$83 : {
            $0 = HEAP32[($2 + 4 | 0) >> 2] | 0;
            if (($0 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7 = $0 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($0 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
              label$86 : {
               $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
               $9 = $0 >>> 3 | 0;
               $0 = ($9 << 3 | 0) + 87904 | 0;
               if (($5 | 0) == ($0 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($4 | 0) != ($5 | 0)) {
                break label$87
               }
               HEAP32[(0 + 87864 | 0) >> 2] = (HEAP32[(0 + 87864 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9 | 0) | 0) | 0;
               break label$84;
              }
              label$88 : {
               if (($4 | 0) == ($0 | 0)) {
                break label$88
               }
              }
              HEAP32[($5 + 12 | 0) >> 2] = $4;
              HEAP32[($4 + 8 | 0) >> 2] = $5;
              break label$84;
             }
             $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
               if (($5 | 0) == ($2 | 0)) {
                break label$90
               }
               label$91 : {
                $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
                if ($8 >>> 0 > $0 >>> 0) {
                 break label$91
                }
                HEAP32[($0 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0 + 12 | 0) >> 2] = $5;
               HEAP32[($5 + 8 | 0) >> 2] = $0;
               break label$89;
              }
              label$92 : {
               $0 = $2 + 20 | 0;
               $4 = HEAP32[$0 >> 2] | 0;
               if ($4) {
                break label$92
               }
               $0 = $2 + 16 | 0;
               $4 = HEAP32[$0 >> 2] | 0;
               if ($4) {
                break label$92
               }
               $5 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8 = $0;
               $5 = $4;
               $0 = $4 + 20 | 0;
               $4 = HEAP32[$0 >> 2] | 0;
               if ($4) {
                continue label$93
               }
               $0 = $5 + 16 | 0;
               $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
               if ($4) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8 >> 2] = 0;
             }
             if (!$9) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
               $0 = ($4 << 2 | 0) + 88168 | 0;
               if ((HEAP32[$0 >> 2] | 0 | 0) != ($2 | 0)) {
                break label$95
               }
               HEAP32[$0 >> 2] = $5;
               if ($5) {
                break label$94
               }
               HEAP32[(0 + 87868 | 0) >> 2] = (HEAP32[(0 + 87868 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
               break label$84;
              }
              HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $5;
              if (!$5) {
               break label$84
              }
             }
             HEAP32[($5 + 24 | 0) >> 2] = $9;
             label$96 : {
              $0 = HEAP32[($2 + 16 | 0) >> 2] | 0;
              if (!$0) {
               break label$96
              }
              HEAP32[($5 + 16 | 0) >> 2] = $0;
              HEAP32[($0 + 24 | 0) >> 2] = $5;
             }
             $0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
             if (!$0) {
              break label$84
             }
             HEAP32[($5 + 20 | 0) >> 2] = $0;
             HEAP32[($0 + 24 | 0) >> 2] = $5;
            }
            $6 = $7 + $6 | 0;
            $2 = $2 + $7 | 0;
           }
           HEAP32[($2 + 4 | 0) >> 2] = (HEAP32[($2 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3 + 4 | 0) >> 2] = $6 | 1 | 0;
           HEAP32[($3 + $6 | 0) >> 2] = $6;
           label$97 : {
            if ($6 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4 = $6 >>> 3 | 0;
            $0 = ($4 << 3 | 0) + 87904 | 0;
            label$98 : {
             label$99 : {
              $6 = HEAP32[(0 + 87864 | 0) >> 2] | 0;
              $4 = 1 << $4 | 0;
              if ($6 & $4 | 0) {
               break label$99
              }
              HEAP32[(0 + 87864 | 0) >> 2] = $6 | $4 | 0;
              $4 = $0;
              break label$98;
             }
             $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0 + 8 | 0) >> 2] = $3;
            HEAP32[($4 + 12 | 0) >> 2] = $3;
            HEAP32[($3 + 12 | 0) >> 2] = $0;
            HEAP32[($3 + 8 | 0) >> 2] = $4;
            break label$72;
           }
           $0 = 31;
           label$100 : {
            if ($6 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $0 = $6 >>> 8 | 0;
            $1194 = $0;
            $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4 = $1194 << $0 | 0;
            $1201 = $4;
            $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5 = $1201 << $4 | 0;
            $1208 = $5;
            $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0 = (($1208 << $5 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $5 | 0) | 0;
            $0 = ($0 << 1 | 0 | (($6 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3 + 28 | 0) >> 2] = $0;
           i64toi32_i32$1 = $3;
           i64toi32_i32$0 = 0;
           HEAP32[($3 + 16 | 0) >> 2] = 0;
           HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4 = ($0 << 2 | 0) + 88168 | 0;
           label$101 : {
            label$102 : {
             $5 = HEAP32[(0 + 87868 | 0) >> 2] | 0;
             $8 = 1 << $0 | 0;
             if ($5 & $8 | 0) {
              break label$102
             }
             HEAP32[(0 + 87868 | 0) >> 2] = $5 | $8 | 0;
             HEAP32[$4 >> 2] = $3;
             HEAP32[($3 + 24 | 0) >> 2] = $4;
             break label$101;
            }
            $0 = $6 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
            $5 = HEAP32[$4 >> 2] | 0;
            label$103 : while (1) {
             $4 = $5;
             if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6 | 0)) {
              break label$73
             }
             $5 = $0 >>> 29 | 0;
             $0 = $0 << 1 | 0;
             $8 = ($4 + ($5 & 4 | 0) | 0) + 16 | 0;
             $5 = HEAP32[$8 >> 2] | 0;
             if ($5) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8 >> 2] = $3;
            HEAP32[($3 + 24 | 0) >> 2] = $4;
           }
           HEAP32[($3 + 12 | 0) >> 2] = $3;
           HEAP32[($3 + 8 | 0) >> 2] = $3;
           break label$72;
          }
          $0 = $2 + -40 | 0;
          $8 = ($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0;
          $12 = $0 - $8 | 0;
          HEAP32[(0 + 87876 | 0) >> 2] = $12;
          $8 = $5 + $8 | 0;
          HEAP32[(0 + 87888 | 0) >> 2] = $8;
          HEAP32[($8 + 4 | 0) >> 2] = $12 | 1 | 0;
          HEAP32[(($5 + $0 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 87892 | 0) >> 2] = HEAP32[(0 + 88352 | 0) >> 2] | 0;
          $0 = ($6 + (($6 + -39 | 0) & 7 | 0 ? (39 - $6 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
          HEAP32[($8 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88320 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88324 | 0) >> 2] | 0;
          $1330 = i64toi32_i32$0;
          i64toi32_i32$0 = $8 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1330;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88312 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88316 | 0) >> 2] | 0;
          $1332 = i64toi32_i32$1;
          i64toi32_i32$1 = $8;
          HEAP32[($8 + 8 | 0) >> 2] = $1332;
          HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 88320 | 0) >> 2] = $8 + 8 | 0;
          HEAP32[(0 + 88316 | 0) >> 2] = $2;
          HEAP32[(0 + 88312 | 0) >> 2] = $5;
          HEAP32[(0 + 88324 | 0) >> 2] = 0;
          $0 = $8 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0 + 4 | 0) >> 2] = 7;
           $5 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($6 >>> 0 > $5 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8 | 0) == ($4 | 0)) {
           break label$62
          }
          HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2 = $8 - $4 | 0;
          HEAP32[($4 + 4 | 0) >> 2] = $2 | 1 | 0;
          HEAP32[$8 >> 2] = $2;
          label$105 : {
           if ($2 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6 = $2 >>> 3 | 0;
           $0 = ($6 << 3 | 0) + 87904 | 0;
           label$106 : {
            label$107 : {
             $5 = HEAP32[(0 + 87864 | 0) >> 2] | 0;
             $6 = 1 << $6 | 0;
             if ($5 & $6 | 0) {
              break label$107
             }
             HEAP32[(0 + 87864 | 0) >> 2] = $5 | $6 | 0;
             $6 = $0;
             break label$106;
            }
            $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0 + 8 | 0) >> 2] = $4;
           HEAP32[($6 + 12 | 0) >> 2] = $4;
           HEAP32[($4 + 12 | 0) >> 2] = $0;
           HEAP32[($4 + 8 | 0) >> 2] = $6;
           break label$62;
          }
          $0 = 31;
          label$108 : {
           if ($2 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0 = $2 >>> 8 | 0;
           $1393 = $0;
           $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6 = $1393 << $0 | 0;
           $1400 = $6;
           $6 = (($6 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5 = $1400 << $6 | 0;
           $1407 = $5;
           $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0 = (($1407 << $5 | 0) >>> 15 | 0) - ($0 | $6 | 0 | $5 | 0) | 0;
           $0 = ($0 << 1 | 0 | (($2 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4;
          i64toi32_i32$0 = 0;
          HEAP32[($4 + 16 | 0) >> 2] = 0;
          HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4 + 28 | 0) >> 2] = $0;
          $6 = ($0 << 2 | 0) + 88168 | 0;
          label$109 : {
           label$110 : {
            $5 = HEAP32[(0 + 87868 | 0) >> 2] | 0;
            $8 = 1 << $0 | 0;
            if ($5 & $8 | 0) {
             break label$110
            }
            HEAP32[(0 + 87868 | 0) >> 2] = $5 | $8 | 0;
            HEAP32[$6 >> 2] = $4;
            HEAP32[($4 + 24 | 0) >> 2] = $6;
            break label$109;
           }
           $0 = $2 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
           $5 = HEAP32[$6 >> 2] | 0;
           label$111 : while (1) {
            $6 = $5;
            if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2 | 0)) {
             break label$71
            }
            $5 = $0 >>> 29 | 0;
            $0 = $0 << 1 | 0;
            $8 = ($6 + ($5 & 4 | 0) | 0) + 16 | 0;
            $5 = HEAP32[$8 >> 2] | 0;
            if ($5) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8 >> 2] = $4;
           HEAP32[($4 + 24 | 0) >> 2] = $6;
          }
          HEAP32[($4 + 12 | 0) >> 2] = $4;
          HEAP32[($4 + 8 | 0) >> 2] = $4;
          break label$62;
         }
         $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $3;
         HEAP32[($4 + 8 | 0) >> 2] = $3;
         HEAP32[($3 + 24 | 0) >> 2] = 0;
         HEAP32[($3 + 12 | 0) >> 2] = $4;
         HEAP32[($3 + 8 | 0) >> 2] = $0;
        }
        $0 = $12 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[($6 + 8 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($6 + 8 | 0) >> 2] = $4;
       HEAP32[($4 + 24 | 0) >> 2] = 0;
       HEAP32[($4 + 12 | 0) >> 2] = $6;
       HEAP32[($4 + 8 | 0) >> 2] = $0;
      }
      $0 = HEAP32[(0 + 87876 | 0) >> 2] | 0;
      if ($0 >>> 0 <= $3 >>> 0) {
       break label$4
      }
      $4 = $0 - $3 | 0;
      HEAP32[(0 + 87876 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 87888 | 0) >> 2] | 0;
      $6 = $0 + $3 | 0;
      HEAP32[(0 + 87888 | 0) >> 2] = $6;
      HEAP32[($6 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 48;
     $0 = 0;
     break label$1;
    }
    label$112 : {
     if (!$9) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $6 = HEAP32[($8 + 28 | 0) >> 2] | 0;
       $0 = ($6 << 2 | 0) + 88168 | 0;
       if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0 >> 2] = $5;
       if ($5) {
        break label$113
       }
       $7 = $7 & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0;
       HEAP32[(0 + 87868 | 0) >> 2] = $7;
       break label$112;
      }
      HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $5;
      if (!$5) {
       break label$112
      }
     }
     HEAP32[($5 + 24 | 0) >> 2] = $9;
     label$115 : {
      $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
      if (!$0) {
       break label$115
      }
      HEAP32[($5 + 16 | 0) >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $5;
     }
     $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
     if (!$0) {
      break label$112
     }
     HEAP32[($5 + 20 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $5;
    }
    label$116 : {
     label$117 : {
      if ($4 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0 = $4 + $3 | 0;
      HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
      $0 = $8 + $0 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
     HEAP32[($12 + 4 | 0) >> 2] = $4 | 1 | 0;
     HEAP32[($12 + $4 | 0) >> 2] = $4;
     label$118 : {
      if ($4 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4 = $4 >>> 3 | 0;
      $0 = ($4 << 3 | 0) + 87904 | 0;
      label$119 : {
       label$120 : {
        $6 = HEAP32[(0 + 87864 | 0) >> 2] | 0;
        $4 = 1 << $4 | 0;
        if ($6 & $4 | 0) {
         break label$120
        }
        HEAP32[(0 + 87864 | 0) >> 2] = $6 | $4 | 0;
        $4 = $0;
        break label$119;
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 8 | 0) >> 2] = $12;
      HEAP32[($4 + 12 | 0) >> 2] = $12;
      HEAP32[($12 + 12 | 0) >> 2] = $0;
      HEAP32[($12 + 8 | 0) >> 2] = $4;
      break label$116;
     }
     $0 = 31;
     label$121 : {
      if ($4 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0 = $4 >>> 8 | 0;
      $1640 = $0;
      $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $6 = $1640 << $0 | 0;
      $1647 = $6;
      $6 = (($6 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3 = $1647 << $6 | 0;
      $1654 = $3;
      $3 = (($3 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0 = (($1654 << $3 | 0) >>> 15 | 0) - ($0 | $6 | 0 | $3 | 0) | 0;
      $0 = ($0 << 1 | 0 | (($4 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12 + 28 | 0) >> 2] = $0;
     i64toi32_i32$1 = $12;
     i64toi32_i32$0 = 0;
     HEAP32[($12 + 16 | 0) >> 2] = 0;
     HEAP32[($12 + 20 | 0) >> 2] = i64toi32_i32$0;
     $6 = ($0 << 2 | 0) + 88168 | 0;
     label$122 : {
      label$123 : {
       label$124 : {
        $3 = 1 << $0 | 0;
        if ($7 & $3 | 0) {
         break label$124
        }
        HEAP32[(0 + 87868 | 0) >> 2] = $7 | $3 | 0;
        HEAP32[$6 >> 2] = $12;
        HEAP32[($12 + 24 | 0) >> 2] = $6;
        break label$123;
       }
       $0 = $4 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
       $3 = HEAP32[$6 >> 2] | 0;
       label$125 : while (1) {
        $6 = $3;
        if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4 | 0)) {
         break label$122
        }
        $3 = $0 >>> 29 | 0;
        $0 = $0 << 1 | 0;
        $5 = ($6 + ($3 & 4 | 0) | 0) + 16 | 0;
        $3 = HEAP32[$5 >> 2] | 0;
        if ($3) {
         continue label$125
        }
        break label$125;
       };
       HEAP32[$5 >> 2] = $12;
       HEAP32[($12 + 24 | 0) >> 2] = $6;
      }
      HEAP32[($12 + 12 | 0) >> 2] = $12;
      HEAP32[($12 + 8 | 0) >> 2] = $12;
      break label$116;
     }
     $0 = HEAP32[($6 + 8 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $12;
     HEAP32[($6 + 8 | 0) >> 2] = $12;
     HEAP32[($12 + 24 | 0) >> 2] = 0;
     HEAP32[($12 + 12 | 0) >> 2] = $6;
     HEAP32[($12 + 8 | 0) >> 2] = $0;
    }
    $0 = $8 + 8 | 0;
    break label$1;
   }
   label$126 : {
    if (!$11) {
     break label$126
    }
    label$127 : {
     label$128 : {
      $6 = HEAP32[($5 + 28 | 0) >> 2] | 0;
      $0 = ($6 << 2 | 0) + 88168 | 0;
      if (($5 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
       break label$128
      }
      HEAP32[$0 >> 2] = $8;
      if ($8) {
       break label$127
      }
      HEAP32[(0 + 87868 | 0) >> 2] = $9 & (__wasm_rotl_i32(-2 | 0, $6 | 0) | 0) | 0;
      break label$126;
     }
     HEAP32[($11 + ((HEAP32[($11 + 16 | 0) >> 2] | 0 | 0) == ($5 | 0) ? 16 : 20) | 0) >> 2] = $8;
     if (!$8) {
      break label$126
     }
    }
    HEAP32[($8 + 24 | 0) >> 2] = $11;
    label$129 : {
     $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
     if (!$0) {
      break label$129
     }
     HEAP32[($8 + 16 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $8;
    }
    $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
    if (!$0) {
     break label$126
    }
    HEAP32[($8 + 20 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = $8;
   }
   label$130 : {
    label$131 : {
     if ($4 >>> 0 > 15 >>> 0) {
      break label$131
     }
     $0 = $4 + $3 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = $0 | 3 | 0;
     $0 = $5 + $0 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$130;
    }
    HEAP32[($5 + 4 | 0) >> 2] = $3 | 3 | 0;
    HEAP32[($10 + 4 | 0) >> 2] = $4 | 1 | 0;
    HEAP32[($10 + $4 | 0) >> 2] = $4;
    label$132 : {
     if (!$7) {
      break label$132
     }
     $3 = $7 >>> 3 | 0;
     $6 = ($3 << 3 | 0) + 87904 | 0;
     $0 = HEAP32[(0 + 87884 | 0) >> 2] | 0;
     label$133 : {
      label$134 : {
       $3 = 1 << $3 | 0;
       if ($3 & $2 | 0) {
        break label$134
       }
       HEAP32[(0 + 87864 | 0) >> 2] = $3 | $2 | 0;
       $3 = $6;
       break label$133;
      }
      $3 = HEAP32[($6 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($6 + 8 | 0) >> 2] = $0;
     HEAP32[($3 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $6;
     HEAP32[($0 + 8 | 0) >> 2] = $3;
    }
    HEAP32[(0 + 87884 | 0) >> 2] = $10;
    HEAP32[(0 + 87872 | 0) >> 2] = $4;
   }
   $0 = $5 + 8 | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $2 = 0, $5 = 0, $1 = 0, $4 = 0, $3 = 0, $7 = 0, $6 = 0, $399 = 0, $406 = 0, $413 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $0 + -8 | 0;
   $2 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $0 = $2 & -8 | 0;
   $3 = $1 + $0 | 0;
   label$2 : {
    if ($2 & 1 | 0) {
     break label$2
    }
    if (!($2 & 3 | 0)) {
     break label$1
    }
    $2 = HEAP32[$1 >> 2] | 0;
    $1 = $1 - $2 | 0;
    $4 = HEAP32[(0 + 87880 | 0) >> 2] | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $0 = $2 + $0 | 0;
    label$3 : {
     if ((HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0) == ($1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       $7 = $2 >>> 3 | 0;
       $2 = ($7 << 3 | 0) + 87904 | 0;
       if (($6 | 0) == ($2 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5 | 0) != ($6 | 0)) {
        break label$6
       }
       HEAP32[(0 + 87864 | 0) >> 2] = (HEAP32[(0 + 87864 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5 | 0) == ($2 | 0)) {
        break label$7
       }
      }
      HEAP32[($6 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 8 | 0) >> 2] = $6;
      break label$2;
     }
     $7 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($5 | 0) == ($1 | 0)) {
        break label$9
       }
       label$10 : {
        $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
        if ($4 >>> 0 > $2 >>> 0) {
         break label$10
        }
        HEAP32[($2 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2 + 12 | 0) >> 2] = $5;
       HEAP32[($5 + 8 | 0) >> 2] = $2;
       break label$8;
      }
      label$11 : {
       $2 = $1 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$11
       }
       $2 = $1 + 16 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$11
       }
       $5 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6 = $2;
       $5 = $4;
       $2 = $5 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        continue label$12
       }
       $2 = $5 + 16 | 0;
       $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
       $2 = ($4 << 2 | 0) + 88168 | 0;
       if ((HEAP32[$2 >> 2] | 0 | 0) != ($1 | 0)) {
        break label$14
       }
       HEAP32[$2 >> 2] = $5;
       if ($5) {
        break label$13
       }
       HEAP32[(0 + 87868 | 0) >> 2] = (HEAP32[(0 + 87868 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $5;
      if (!$5) {
       break label$2
      }
     }
     HEAP32[($5 + 24 | 0) >> 2] = $7;
     label$15 : {
      $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      if (!$2) {
       break label$15
      }
      HEAP32[($5 + 16 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $5;
     }
     $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$2
     }
     HEAP32[($5 + 20 | 0) >> 2] = $2;
     HEAP32[($2 + 24 | 0) >> 2] = $5;
     break label$2;
    }
    $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (($2 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 87872 | 0) >> 2] = $0;
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
    return;
   }
   if ($3 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!($2 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 87888 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
       break label$18
      }
      HEAP32[(0 + 87888 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 87876 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 87876 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      if (($1 | 0) != (HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 87872 | 0) >> 2] = 0;
      HEAP32[(0 + 87884 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
       break label$19
      }
      HEAP32[(0 + 87884 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 87872 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 87872 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      return;
     }
     $0 = ($2 & -8 | 0) + $0 | 0;
     label$20 : {
      label$21 : {
       if ($2 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        $3 = $2 >>> 3 | 0;
        $2 = ($3 << 3 | 0) + 87904 | 0;
        if (($5 | 0) == ($2 | 0)) {
         break label$22
        }
        HEAP32[(0 + 87880 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4 | 0) != ($5 | 0)) {
         break label$23
        }
        HEAP32[(0 + 87864 | 0) >> 2] = (HEAP32[(0 + 87864 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4 | 0) == ($2 | 0)) {
         break label$24
        }
        HEAP32[(0 + 87880 | 0) >> 2] | 0;
       }
       HEAP32[($5 + 12 | 0) >> 2] = $4;
       HEAP32[($4 + 8 | 0) >> 2] = $5;
       break label$20;
      }
      $7 = HEAP32[($3 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($5 | 0) == ($3 | 0)) {
         break label$26
        }
        label$27 : {
         $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 87880 | 0) >> 2] | 0) >>> 0 > $2 >>> 0) {
          break label$27
         }
         HEAP32[($2 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2 + 12 | 0) >> 2] = $5;
        HEAP32[($5 + 8 | 0) >> 2] = $2;
        break label$25;
       }
       label$28 : {
        $2 = $3 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$28
        }
        $2 = $3 + 16 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$28
        }
        $5 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6 = $2;
        $5 = $4;
        $2 = $5 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         continue label$29
        }
        $2 = $5 + 16 | 0;
        $4 = HEAP32[($5 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        $2 = ($4 << 2 | 0) + 88168 | 0;
        if ((HEAP32[$2 >> 2] | 0 | 0) != ($3 | 0)) {
         break label$31
        }
        HEAP32[$2 >> 2] = $5;
        if ($5) {
         break label$30
        }
        HEAP32[(0 + 87868 | 0) >> 2] = (HEAP32[(0 + 87868 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($3 | 0) ? 16 : 20) | 0) >> 2] = $5;
       if (!$5) {
        break label$20
       }
      }
      HEAP32[($5 + 24 | 0) >> 2] = $7;
      label$32 : {
       $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
       if (!$2) {
        break label$32
       }
       HEAP32[($5 + 16 | 0) >> 2] = $2;
       HEAP32[($2 + 24 | 0) >> 2] = $5;
      }
      $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (!$2) {
       break label$20
      }
      HEAP32[($5 + 20 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $5;
     }
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
     if (($1 | 0) != (HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 87872 | 0) >> 2] = $0;
     return;
    }
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
   }
   label$33 : {
    if ($0 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2 = $0 >>> 3 | 0;
    $0 = ($2 << 3 | 0) + 87904 | 0;
    label$34 : {
     label$35 : {
      $4 = HEAP32[(0 + 87864 | 0) >> 2] | 0;
      $2 = 1 << $2 | 0;
      if ($4 & $2 | 0) {
       break label$35
      }
      HEAP32[(0 + 87864 | 0) >> 2] = $4 | $2 | 0;
      $2 = $0;
      break label$34;
     }
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 8 | 0) >> 2] = $1;
    HEAP32[($2 + 12 | 0) >> 2] = $1;
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    HEAP32[($1 + 8 | 0) >> 2] = $2;
    return;
   }
   $2 = 31;
   label$36 : {
    if ($0 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2 = $0 >>> 8 | 0;
    $399 = $2;
    $2 = (($2 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4 = $399 << $2 | 0;
    $406 = $4;
    $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5 = $406 << $4 | 0;
    $413 = $5;
    $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2 = (($413 << $5 | 0) >>> 15 | 0) - ($2 | $4 | 0 | $5 | 0) | 0;
    $2 = ($2 << 1 | 0 | (($0 >>> ($2 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1 + 16 | 0) >> 2] = 0;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   HEAP32[($1 + 28 | 0) >> 2] = $2;
   $4 = ($2 << 2 | 0) + 88168 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5 = HEAP32[(0 + 87868 | 0) >> 2] | 0;
       $3 = 1 << $2 | 0;
       if ($5 & $3 | 0) {
        break label$40
       }
       HEAP32[(0 + 87868 | 0) >> 2] = $5 | $3 | 0;
       HEAP32[$4 >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $4;
       break label$39;
      }
      $2 = $0 << (($2 | 0) == (31 | 0) ? 0 : 25 - ($2 >>> 1 | 0) | 0) | 0;
      $5 = HEAP32[$4 >> 2] | 0;
      label$41 : while (1) {
       $4 = $5;
       if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
        break label$38
       }
       $5 = $2 >>> 29 | 0;
       $2 = $2 << 1 | 0;
       $3 = ($4 + ($5 & 4 | 0) | 0) + 16 | 0;
       $5 = HEAP32[$3 >> 2] | 0;
       if ($5) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3 >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $4;
     }
     HEAP32[($1 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 8 | 0) >> 2] = $1;
     break label$37;
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($4 + 8 | 0) >> 2] = $1;
    HEAP32[($1 + 24 | 0) >> 2] = 0;
    HEAP32[($1 + 12 | 0) >> 2] = $4;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
   }
   $1 = (HEAP32[(0 + 87896 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 87896 | 0) >> 2] = $1 ? $1 : -1;
  }
 }
 
 function dlrealloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return dlmalloc($1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[(__errno_location() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2 = try_realloc_chunk($0 + -8 | 0 | 0, ($1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2) {
    break label$3
   }
   return $2 + 8 | 0 | 0;
  }
  label$4 : {
   $2 = dlmalloc($1 | 0) | 0;
   if ($2) {
    break label$4
   }
   return 0 | 0;
  }
  $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
  $3 = ($3 & 3 | 0 ? -4 : -8) + ($3 & -8 | 0) | 0;
  memcpy($2 | 0, $0 | 0, ($3 >>> 0 < $1 >>> 0 ? $3 : $1) | 0) | 0;
  dlfree($0 | 0);
  return $2 | 0;
 }
 
 function try_realloc_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $7 = 0, $4 = 0, $2 = 0, $6 = 0, $8 = 0, $10 = 0, $9 = 0;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $3 = $2 & 3 | 0;
  $4 = $2 & -8 | 0;
  $5 = $0 + $4 | 0;
  label$1 : {
   $6 = HEAP32[(0 + 87880 | 0) >> 2] | 0;
   if ($6 >>> 0 > $0 >>> 0) {
    break label$1
   }
   if (($3 | 0) == (1 | 0)) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($3) {
     break label$3
    }
    $3 = 0;
    if ($1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($4 >>> 0 < ($1 + 4 | 0) >>> 0) {
      break label$4
     }
     $3 = $0;
     if (($4 - $1 | 0) >>> 0 <= ((HEAP32[(0 + 88344 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($4 >>> 0 < $1 >>> 0) {
      break label$6
     }
     $3 = $4 - $1 | 0;
     if ($3 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
     $1 = $0 + $1 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $3 | 3 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0 | 1 | 0;
     dispose_chunk($1 | 0, $3 | 0);
     break label$5;
    }
    $3 = 0;
    label$7 : {
     if ((HEAP32[(0 + 87888 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
      break label$7
     }
     $5 = (HEAP32[(0 + 87876 | 0) >> 2] | 0) + $4 | 0;
     if ($5 >>> 0 <= $1 >>> 0) {
      break label$2
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
     $3 = $0 + $1 | 0;
     $1 = $5 - $1 | 0;
     HEAP32[($3 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[(0 + 87876 | 0) >> 2] = $1;
     HEAP32[(0 + 87888 | 0) >> 2] = $3;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0) != ($5 | 0)) {
      break label$8
     }
     $3 = 0;
     $5 = (HEAP32[(0 + 87872 | 0) >> 2] | 0) + $4 | 0;
     if ($5 >>> 0 < $1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3 = $5 - $1 | 0;
       if ($3 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
       $1 = $0 + $1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $3 | 1 | 0;
       $5 = $0 + $5 | 0;
       HEAP32[$5 >> 2] = $3;
       HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $5 | 0 | 2 | 0;
      $1 = $0 + $5 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3 = 0;
      $1 = 0;
     }
     HEAP32[(0 + 87884 | 0) >> 2] = $1;
     HEAP32[(0 + 87872 | 0) >> 2] = $3;
     break label$5;
    }
    $3 = 0;
    $7 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    if ($7 & 2 | 0) {
     break label$2
    }
    $8 = ($7 & -8 | 0) + $4 | 0;
    if ($8 >>> 0 < $1 >>> 0) {
     break label$2
    }
    $9 = $8 - $1 | 0;
    label$11 : {
     label$12 : {
      if ($7 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3 = HEAP32[($5 + 12 | 0) >> 2] | 0;
      label$13 : {
       $5 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       $7 = $7 >>> 3 | 0;
       $4 = ($7 << 3 | 0) + 87904 | 0;
       if (($5 | 0) == ($4 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3 | 0) != ($5 | 0)) {
        break label$14
       }
       HEAP32[(0 + 87864 | 0) >> 2] = (HEAP32[(0 + 87864 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0;
       break label$11;
      }
      label$15 : {
       if (($3 | 0) == ($4 | 0)) {
        break label$15
       }
      }
      HEAP32[($5 + 12 | 0) >> 2] = $3;
      HEAP32[($3 + 8 | 0) >> 2] = $5;
      break label$11;
     }
     $10 = HEAP32[($5 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if (($7 | 0) == ($5 | 0)) {
        break label$17
       }
       label$18 : {
        $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
        if ($6 >>> 0 > $3 >>> 0) {
         break label$18
        }
        HEAP32[($3 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3 + 12 | 0) >> 2] = $7;
       HEAP32[($7 + 8 | 0) >> 2] = $3;
       break label$16;
      }
      label$19 : {
       $3 = $5 + 20 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        break label$19
       }
       $3 = $5 + 16 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        break label$19
       }
       $7 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $6 = $3;
       $7 = $4;
       $3 = $7 + 20 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        continue label$20
       }
       $3 = $7 + 16 | 0;
       $4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$10) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $4 = HEAP32[($5 + 28 | 0) >> 2] | 0;
       $3 = ($4 << 2 | 0) + 88168 | 0;
       if ((HEAP32[$3 >> 2] | 0 | 0) != ($5 | 0)) {
        break label$22
       }
       HEAP32[$3 >> 2] = $7;
       if ($7) {
        break label$21
       }
       HEAP32[(0 + 87868 | 0) >> 2] = (HEAP32[(0 + 87868 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($5 | 0) ? 16 : 20) | 0) >> 2] = $7;
      if (!$7) {
       break label$11
      }
     }
     HEAP32[($7 + 24 | 0) >> 2] = $10;
     label$23 : {
      $3 = HEAP32[($5 + 16 | 0) >> 2] | 0;
      if (!$3) {
       break label$23
      }
      HEAP32[($7 + 16 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $7;
     }
     $5 = HEAP32[($5 + 20 | 0) >> 2] | 0;
     if (!$5) {
      break label$11
     }
     HEAP32[($7 + 20 | 0) >> 2] = $5;
     HEAP32[($5 + 24 | 0) >> 2] = $7;
    }
    label$24 : {
     if ($9 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $8 | 0 | 2 | 0;
     $1 = $0 + $8 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
    $1 = $0 + $1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $9 | 3 | 0;
    $5 = $0 + $8 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0 | 1 | 0;
    dispose_chunk($1 | 0, $9 | 0);
   }
   $3 = $0;
  }
  return $3 | 0;
 }
 
 function dispose_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $5 = 0, $2 = 0, $7 = 0, $4 = 0, $382 = 0, $389 = 0, $396 = 0;
  $2 = $0 + $1 | 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($3 & 1 | 0) {
     break label$2
    }
    if (!($3 & 3 | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $1 = $3 + $1 | 0;
    label$3 : {
     $0 = $0 - $3 | 0;
     if ((HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0) == ($0 | 0)) {
      break label$3
     }
     $4 = HEAP32[(0 + 87880 | 0) >> 2] | 0;
     label$4 : {
      if ($3 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $7 = $3 >>> 3 | 0;
       $3 = ($7 << 3 | 0) + 87904 | 0;
       if (($6 | 0) == ($3 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5 | 0) != ($6 | 0)) {
        break label$6
       }
       HEAP32[(0 + 87864 | 0) >> 2] = (HEAP32[(0 + 87864 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5 | 0) == ($3 | 0)) {
        break label$7
       }
      }
      HEAP32[($6 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 8 | 0) >> 2] = $6;
      break label$2;
     }
     $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($0 | 0)) {
        break label$9
       }
       label$10 : {
        $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        if ($4 >>> 0 > $3 >>> 0) {
         break label$10
        }
        HEAP32[($3 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3 + 12 | 0) >> 2] = $6;
       HEAP32[($6 + 8 | 0) >> 2] = $3;
       break label$8;
      }
      label$11 : {
       $3 = $0 + 20 | 0;
       $5 = HEAP32[$3 >> 2] | 0;
       if ($5) {
        break label$11
       }
       $3 = $0 + 16 | 0;
       $5 = HEAP32[$3 >> 2] | 0;
       if ($5) {
        break label$11
       }
       $6 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4 = $3;
       $6 = $5;
       $3 = $6 + 20 | 0;
       $5 = HEAP32[$3 >> 2] | 0;
       if ($5) {
        continue label$12
       }
       $3 = $6 + 16 | 0;
       $5 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       if ($5) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
       $3 = ($5 << 2 | 0) + 88168 | 0;
       if ((HEAP32[$3 >> 2] | 0 | 0) != ($0 | 0)) {
        break label$14
       }
       HEAP32[$3 >> 2] = $6;
       if ($6) {
        break label$13
       }
       HEAP32[(0 + 87868 | 0) >> 2] = (HEAP32[(0 + 87868 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($0 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$2
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $7;
     label$15 : {
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      if (!$3) {
       break label$15
      }
      HEAP32[($6 + 16 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
     }
     $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (!$3) {
      break label$2
     }
     HEAP32[($6 + 20 | 0) >> 2] = $3;
     HEAP32[($3 + 24 | 0) >> 2] = $6;
     break label$2;
    }
    $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
    if (($3 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 87872 | 0) >> 2] = $1;
    HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
    HEAP32[$2 >> 2] = $1;
    return;
   }
   label$16 : {
    label$17 : {
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if ($3 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 87888 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$18
      }
      HEAP32[(0 + 87888 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 87876 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 87876 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      if (($0 | 0) != (HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 87872 | 0) >> 2] = 0;
      HEAP32[(0 + 87884 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$19
      }
      HEAP32[(0 + 87884 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 87872 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 87872 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($0 + $1 | 0) >> 2] = $1;
      return;
     }
     $4 = HEAP32[(0 + 87880 | 0) >> 2] | 0;
     $1 = ($3 & -8 | 0) + $1 | 0;
     label$20 : {
      label$21 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        $2 = $3 >>> 3 | 0;
        $3 = ($2 << 3 | 0) + 87904 | 0;
        if (($6 | 0) == ($3 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5 | 0) != ($6 | 0)) {
         break label$23
        }
        HEAP32[(0 + 87864 | 0) >> 2] = (HEAP32[(0 + 87864 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($5 | 0) == ($3 | 0)) {
         break label$24
        }
       }
       HEAP32[($6 + 12 | 0) >> 2] = $5;
       HEAP32[($5 + 8 | 0) >> 2] = $6;
       break label$20;
      }
      $7 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($2 | 0)) {
         break label$26
        }
        label$27 : {
         $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
         if ($4 >>> 0 > $3 >>> 0) {
          break label$27
         }
         HEAP32[($3 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$25;
       }
       label$28 : {
        $5 = $2 + 20 | 0;
        $3 = HEAP32[$5 >> 2] | 0;
        if ($3) {
         break label$28
        }
        $5 = $2 + 16 | 0;
        $3 = HEAP32[$5 >> 2] | 0;
        if ($3) {
         break label$28
        }
        $6 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4 = $5;
        $6 = $3;
        $5 = $3 + 20 | 0;
        $3 = HEAP32[$5 >> 2] | 0;
        if ($3) {
         continue label$29
        }
        $5 = $6 + 16 | 0;
        $3 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($3) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4 >> 2] = 0;
      }
      if (!$7) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
        $3 = ($5 << 2 | 0) + 88168 | 0;
        if ((HEAP32[$3 >> 2] | 0 | 0) != ($2 | 0)) {
         break label$31
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$30
        }
        HEAP32[(0 + 87868 | 0) >> 2] = (HEAP32[(0 + 87868 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$20
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$32 : {
       $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$32
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$20
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[($0 + $1 | 0) >> 2] = $1;
     if (($0 | 0) != (HEAP32[(0 + 87884 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 87872 | 0) >> 2] = $1;
     return;
    }
    HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
    HEAP32[($0 + $1 | 0) >> 2] = $1;
   }
   label$33 : {
    if ($1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3 = $1 >>> 3 | 0;
    $1 = ($3 << 3 | 0) + 87904 | 0;
    label$34 : {
     label$35 : {
      $5 = HEAP32[(0 + 87864 | 0) >> 2] | 0;
      $3 = 1 << $3 | 0;
      if ($5 & $3 | 0) {
       break label$35
      }
      HEAP32[(0 + 87864 | 0) >> 2] = $5 | $3 | 0;
      $3 = $1;
      break label$34;
     }
     $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1 + 8 | 0) >> 2] = $0;
    HEAP32[($3 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    return;
   }
   $3 = 31;
   label$36 : {
    if ($1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3 = $1 >>> 8 | 0;
    $382 = $3;
    $3 = (($3 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5 = $382 << $3 | 0;
    $389 = $5;
    $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6 = $389 << $5 | 0;
    $396 = $6;
    $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3 = (($396 << $6 | 0) >>> 15 | 0) - ($3 | $5 | 0 | $6 | 0) | 0;
    $3 = ($3 << 1 | 0 | (($1 >>> ($3 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[($0 + 28 | 0) >> 2] = $3;
   $5 = ($3 << 2 | 0) + 88168 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6 = HEAP32[(0 + 87868 | 0) >> 2] | 0;
      $2 = 1 << $3 | 0;
      if ($6 & $2 | 0) {
       break label$39
      }
      HEAP32[(0 + 87868 | 0) >> 2] = $6 | $2 | 0;
      HEAP32[$5 >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $5;
      break label$38;
     }
     $3 = $1 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
     $6 = HEAP32[$5 >> 2] | 0;
     label$40 : while (1) {
      $5 = $6;
      if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1 | 0)) {
       break label$37
      }
      $6 = $3 >>> 29 | 0;
      $3 = $3 << 1 | 0;
      $2 = ($5 + ($6 & 4 | 0) | 0) + 16 | 0;
      $6 = HEAP32[$2 >> 2] | 0;
      if ($6) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2 >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $5;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 8 | 0) >> 2] = $0;
    return;
   }
   $1 = HEAP32[($5 + 8 | 0) >> 2] | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $0;
   HEAP32[($5 + 8 | 0) >> 2] = $0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = $5;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
  }
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[(0 + 50268 | 0) >> 2] | 0;
  $2 = ($0 + 3 | 0) & -4 | 0;
  $0 = $1 + $2 | 0;
  label$1 : {
   label$2 : {
    if (($2 | 0) < (1 | 0)) {
     break label$2
    }
    if ($0 >>> 0 <= $1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$3
    }
    if (!(emscripten_resize_heap($0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 50268 | 0) >> 2] = $0;
   return $1 | 0;
  }
  HEAP32[(__errno_location() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function fmodl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10 = 0, $9$hi = 0, $8 = 0, $9 = 0, $6 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64 = 0, $7 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $11 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $52 = 0, $52$hi = 0, $55$hi = 0, $57 = 0, $57$hi = 0, $59 = 0, $59$hi = 0, $60 = 0, $60$hi = 0, $67$hi = 0, $69 = 0, $69$hi = 0, $131$hi = 0, $134 = 0, $135$hi = 0, $156 = 0, $156$hi = 0, $158$hi = 0, $161 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178 = 0, $179$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $219 = 0, $220 = 0, $220$hi = 0, $222 = 0, $222$hi = 0, $228$hi = 0, $229 = 0, $229$hi = 0, $236 = 0, $236$hi = 0, $241$hi = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!(__letf2($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6 = __fpclassifyl($3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7 = $64;
     $8 = $7 & 32767 | 0;
     if (($8 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    __multf3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    __divtf3($5 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52 = $1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59 = $9;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60 = $3;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6 = $66 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if ((__letf2($52 | 0, i64toi32_i32$1 | 0, $59 | 0, i64toi32_i32$2 | 0, $60 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!(__letf2($1 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$2 | 0, $10 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    __multf3($5 + 112 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    __multf3($5 + 96 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8 = $68 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    __multf3($5 + 80 | 0 | 0, $3 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6 = $70 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8 | 0) <= ($6 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3;
       $134 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72 = 0
         } else {
          $72 = 1
         }
         $73 = $72;
        } else {
         $73 = 0
        }
        $71 = $73;
       }
       if ($71) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        __multf3($5 + 32 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156 = $74;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161 = $76;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4 = $78;
     $4$hi = i64toi32_i32$3;
     $8 = $8 + -1 | 0;
     if (($8 | 0) > ($6 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8 = $6;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3;
     $178 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80 = 0
       } else {
        $80 = 1
       }
       $81 = $80;
      } else {
       $81 = 0
      }
      $79 = $81;
     }
     if ($79) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10 = $9;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    __multf3($5 + 48 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $82;
     $3$hi = i64toi32_i32$3;
     $8 = $8 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4 = $83;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208 = $3;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6 = $7 & 32768 | 0;
   label$18 : {
    if (($8 | 0) > (0 | 0)) {
     break label$18
    }
    $219 = $5 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220 = $4;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8 + 120 | 0 | $6 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    __multf3($219 | 0, $220 | 0, i64toi32_i32$0 | 0, $229 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8 | $6 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $5 + 128 | 0;
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < (3069 | 0) ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0 = $0 * 2.2250738585072014e-308;
   label$4 : {
    if (($1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1 = $1 + 1022 | 0;
    break label$1;
   }
   $0 = $0 * 2.2250738585072014e-308;
   $1 = (($1 | 0) > (-3066 | 0) ? $1 : -3066) + 2044 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function __fpclassifyl($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2 = 0, $13 = 0, $3 = 0, $4 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $13 & 32767 | 0;
    if (($3 | 0) == (32767 | 0)) {
     break label$2
    }
    $4 = 4;
    if ($3) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4 | 0;
 }
 
 function memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 512 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2 | 0) >= (1 | 0)) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if ($0 & 3 | 0) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if ($2 >>> 0 >= $3 >>> 0) {
       break label$4
      }
      if ($2 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5 = 0, $14 = 0, $104$hi = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $2 + $0 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   HEAP8[$0 >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6 = $1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6 = i64toi32_i32$0 | $6 | 0;
   $6$hi = i64toi32_i32$2;
   $1 = $3 + $5 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function __towrite($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAPU8[($0 + 74 | 0) >> 0] | 0;
  HEAP8[($0 + 74 | 0) >> 0] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $1;
  HEAP32[($0 + 20 | 0) >> 2] = $1;
  HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function __overflow($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[($2 + 15 | 0) >> 0] = $1;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $3 = -1;
    if (__towrite($0 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if ($4 >>> 0 >= $3 >>> 0) {
     break label$3
    }
    $3 = $1 & 255 | 0;
    if (($3 | 0) == (HEAP8[($0 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    HEAP32[($0 + 20 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $1;
    break label$1;
   }
   $3 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, $2 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3 = HEAPU8[($2 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function __fwritex($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    if (__towrite($2 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    if (($3 - $5 | 0) >>> 0 >= $1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2 + 75 | 0) >> 0] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3 = 0;
     break label$4;
    }
    $4 = $1;
    label$6 : while (1) {
     label$7 : {
      $3 = $4;
      if ($3) {
       break label$7
      }
      $3 = 0;
      break label$4;
     }
     $4 = $3 + -1 | 0;
     if ((HEAPU8[($0 + $4 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4 = FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $0 = $0 + $3 | 0;
    $1 = $1 - $3 | 0;
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   }
   memcpy($5 | 0, $0 | 0, $1 | 0) | 0;
   HEAP32[($2 + 20 | 0) >> 2] = (HEAP32[($2 + 20 | 0) >> 2] | 0) + $1 | 0;
   $4 = $3 + $1 | 0;
  }
  return $4 | 0;
 }
 
 function fwrite($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = Math_imul($2, $1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
    break label$1;
   }
   $5 = __lockfile($3 | 0) | 0;
   $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
   if (!$5) {
    break label$1
   }
   __unlockfile($3 | 0);
  }
  label$3 : {
   if (($0 | 0) != ($4 | 0)) {
    break label$3
   }
   return ($1 ? $2 : 0) | 0;
  }
  return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
 }
 
 function fputs($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = strlen($0 | 0) | 0;
  return (($2 | 0) != (fwrite($0 | 0, 1 | 0, $2 | 0, $1 | 0) | 0 | 0) ? -1 : 0) | 0;
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($0 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0 >> 0] | 0) {
      break label$3
     }
     return $0 - $0 | 0 | 0;
    }
    $1 = $0;
    label$4 : while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3 & 255 | 0) {
     break label$6
    }
    return $2 - $0 | 0 | 0;
   }
   label$7 : while (1) {
    $3 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
    $1 = $2 + 1 | 0;
    $2 = $1;
    if ($3) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function emscripten_stack_init() {
  __stack_base = 5331248;
  __stack_end = (88360 + 15 | 0) & -16 | 0;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0 | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function stackSave() {
  return __stack_pointer | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (__stack_pointer - $0 | 0) & -16 | 0;
  __stack_pointer = $1;
  return $1 | 0;
 }
 
 function dynCall_jiji(fptr, $0, $1, $1$hi, $2) {
  fptr = fptr | 0;
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[fptr | 0]($0, $1, i64toi32_i32$0, $2) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, var$8$hi = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, var$7$hi = 0, $51 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $70 = 0, $119 = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $39 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $39;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $40 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $40 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $40;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $41 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $41 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $41;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $42 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $42 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $42;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            $70 = (__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> $70 | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $43 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $43 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $43;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      $119 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = $119;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $44 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $44 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $44;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $45 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $45 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $45;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $46 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $46 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $46;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $47 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $47 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140 = $47;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $48 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $48;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $49 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $49 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $49;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $50 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $50 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $50;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $51 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $51 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $51;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, getenv, strcmp, atoi, initialize_world_28char__2c_20bool_29, error_28char__2c_20____29, initialize_run_stack_28int_2c_20char___29, read_assembly_file_28char__29, write_assembled_code_28char__29, dump_data_seg_28bool_29, console_to_program_28_29, dump_text_seg_28bool_29, top_level_28_29, undefined_symbol_string_28_29, write_output_28port_2c_20char__2c_20____29, find_symbol_address_28char__29, run_program_28unsigned_20int_2c_20int_2c_20bool_2c_20bool_2c_20bool__29, console_to_spim_28_29, control_c_seen_28int_29, parse_spim_command_28bool_29, fflush, compare_pair_value_28name_val_val__2c_20name_val_val__29, store_byte_28int_29, store_double_28double__29, store_float_28double__29, store_half_28int_29, store_word_data_28int_29, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, sn_write, fmt_fp, pop_arg_long_double, __emscripten_stdout_close, __emscripten_stdout_seek, do_read]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "js_spim_main": js_spim_main, 
  "malloc": dlmalloc, 
  "testSetjmp": testSetjmp, 
  "saveSetjmp": saveSetjmp, 
  "free": dlfree, 
  "fflush": fflush, 
  "js_spim_top_level": js_spim_top_level, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "realloc": dlrealloc, 
  "__errno_location": __errno_location, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "setThrew": setThrew, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536
      ,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

__ATINIT__.push({ func: function() { ___wasm_call_ctors() } });

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile = '<<< WASM_BINARY_FILE >>>';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }
    
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (_emscripten_stack_get_free() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 16384);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        assert(typeof parent === 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys__newselect(nfds, readfds, writefds, exceptfds, timeout) {try {
  
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var check = function(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      };
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)] = dstReadLow;
        HEAP32[(((readfds)+(4))>>2)] = dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)] = dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)] = dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)] = dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)] = dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = varargs ? SYSCALLS.get() : 0;
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _longjmp(env, value) {
      _setThrew(env, value || 1);
      throw 'longjmp';
    }
  function _emscripten_longjmp(a0,a1
  ) {
  return _longjmp(a0,a1);
  }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  var ENV={};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  function _environ_get(__environ, environ_buf) {try {
  
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {try {
  
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_fdstat_get(fd, pbuf) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      // All character devices are terminals (other things a Linux system would
      // assume is a character device, like the mouse, we have special APIs for).
      var type = stream.tty ? 2 :
                 FS.isDir(stream.mode) ? 3 :
                 FS.isLink(stream.mode) ? 7 :
                 4;
      HEAP8[((pbuf)>>0)] = type;
      // TODO HEAP16[(((pbuf)+(2))>>1)] = ?;
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(8))>>2)] = tempI64[0],HEAP32[(((pbuf)+(12))>>2)] = tempI64[1]);
      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(16))>>2)] = tempI64[0],HEAP32[(((pbuf)+(20))>>2)] = tempI64[1]);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _getTempRet0() {
      return (getTempRet0() | 0);
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  var __sigalrm_handler=0;
  function _signal(sig, func) {
      if (sig == 14) {
        __sigalrm_handler = func;
      } else {
        err('Calling stub instead of signal()');
      }
      return 0;
    }

var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__sys__newselect": ___sys__newselect,
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "emscripten_longjmp": _emscripten_longjmp,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_fdstat_get": _fd_fdstat_get,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "invoke_i": invoke_i,
  "invoke_ii": invoke_ii,
  "invoke_iii": invoke_iii,
  "invoke_iiiiii": invoke_iiiiii,
  "invoke_v": invoke_v,
  "invoke_vi": invoke_vi,
  "invoke_vii": invoke_vii,
  "invoke_viii": invoke_viii,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0,
  "signal": _signal
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _js_spim_main = Module["_js_spim_main"] = createExportWrapper("js_spim_main");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _testSetjmp = Module["_testSetjmp"] = createExportWrapper("testSetjmp");

/** @type {function(...*):?} */
var _saveSetjmp = Module["_saveSetjmp"] = createExportWrapper("saveSetjmp");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _js_spim_top_level = Module["_js_spim_top_level"] = createExportWrapper("js_spim_top_level");

/** @type {function(...*):?} */
var _realloc = Module["_realloc"] = createExportWrapper("realloc");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");


function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    wasmTable.get(index)();
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_i(index) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)();
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}




// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

noExitRuntime = true;

run();






Module['spim_stdin'] = "";
Module['spim_stdout'] = "";
Module['spim_stderr'] = "";

Module['preRun'] = function() {

  function stdin() {
    let code = null;
    if (Module['spim_stdin'].length > 0) {
      code = Module['spim_stdin'].charCodeAt(0);
      Module['spim_stdin'] = Module['spim_stdin'].substring(1);
    } 
    return code;
  }

  function stdout(code) {
    Module['spim_stdout'] += String.fromCharCode(code);
  }

  function stderr(code) {
    Module['spim_stderr'] += String.fromCharCode(code);
  }

  FS.init(stdin, stdout, stderr);
}

let js_spim_main = Module.cwrap('js_spim_main','number');
let js_spim_top_level = Module.cwrap('js_spim_top_level','number',['number']);

let initialized = false;

onmessage = (event) => {
  if (!initialized) {
    js_spim_main();
    initialized = true;
  }
  let command = event.data[0];
  let command_args = event.data[0].split(" ");
  if (command_args[0] === "load" || command_args[0] === "read") {
    FS.writeFile(command_args[1].slice(1,-1), event.data[1]);
  } 
  Module['spim_stdin'] = command+"\n";
  Module['spim_stdout'] = "";
  Module['spim_stderr'] = "";
  js_spim_top_level(0);
  postMessage([command,Module['spim_stdout'],Module['spim_stderr']]);
};

